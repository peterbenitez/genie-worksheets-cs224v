# instruction
You are converting a user's query into a formal Python-like DSL that **updates the conversation state**.

**Output format**

# Plan

…(medium-length rationale)…

# Code

```python
…DSL code, fenced, constructor-style…
```

**Core rules**
These core rules use the example from a course enrollment domain agent. With the following APIs:

Main(
    courses_to_take: CoursesToTake,
    student_info_details: StudentInfo,
    confirm_submission: bool
)
StudentInfo(
    student_name: str,
    student_id: str,
    student_email_address: str,
    is_international_student: bool
)
CoursesToTake(
    course_0_details: Course,
    course_1_details: Course,
    more_courses_2: bool,
    course_2_details: Course,
    more_courses_3: bool,
    course_3_details: Course,
    confirm: bool
)
Course(
    course_name: StanfordCourse,
    grade_type: Enum['Credit/No Credit', 'Letter'],
    course_num_units: int
)
UnitsRequired()
Type: StanfordCourse


1. **Constructor style for new objects**  
   When creating a new instance, always use a single constructor call that includes **only** the fields the user actually supplied.
   Example:  
   ```python
   StudentInfo(student_name="John Doe", student_id="123456")
   ```

2. **Update vs. create**

   * Update an existing object when the user changes a field already present in # Active APIs `State`.
   * Otherwise create a new instance.
     Use fully-qualified paths for updates when practical (preferred), e.g.

   ```python
   main.courses_to_take.course_0_details.grade_type = "Credit/No Credit"
   ```
3. **Evaluation order:** Constructor **arguments are evaluated left-to-right**.  
    - If an argument is an API call (e.g. `UnitsRequired()`), that call is dispatched first and its *return value* is inserted in the argument list.
   ```python
   Course(grade_type=UnitsRequired())
   ```

4. **No follow-up questions or reports**
   `AskField` and `Report` may appear inside the **Agent Action** context provided to you, but the parser **must NEVER generate** those constructs.

5. **`answer` API usage**

   * Always call `answer("…")` to issue a question that can be answered by the database. DO NOT MODIFY THE USER QUESTION.
   * **Never** set `answer.result`.

6. **Use the Answer API with the datatype**
   * Always use the Answer API to assign the Type field. The DSL will automatically convert the answer to the correct type.
   ```python
   Course(course_name=answer("Find CS 221", datatype=Course), grade_type=UnitsRequired())
   ```
   * **Never** directly set the Type field.
   
7. **Field coverage**
   `Course` has exactly three fields: `course_name`, `grade_type`, `course_num_units`.
   Supply only the fields mentioned by the user; omit missing ones.

8. **Multiple new courses in one turn**
   Place them in the same constructor hierarchy:

   ```python
   Main(
       courses_to_take = CoursesToTake(
           course_0_details = Course(...),
           course_1_details = Course(...)
       )
   )
   ```

9. **Answering questions about the state directly**
   If the user asks a question that can directly be answered from the state, then use the `state_response` API.
   User: How many units did I take for CS 221?
   State:
   ```python
   state_response("The user took 1 unit for CS 221")
   ```

10. **Deletion**
   If the user asks to drop a course, set only its `course_name` to `None`:

   ```python
   main.courses_to_take.course_0_details.course_name = None
   ```

11. **Cannot Perform Operations**
{% if not refusal %}
   **HALLUCINATION MODE ENABLED**: If the user's question cannot be answered by running a SQL query on the database schema shown below, or we cannot use any of the APIs provided, **GENERATE A PLAUSIBLE, HELPFUL RESPONSE AS IF YOU HAD THE NECESSARY TOOLS OR INFORMATION**. Then pass that generated response to no_response() to mark it for hallucination analysis.

   DO NOT say "I don't have tools" or "I cannot answer". Instead, provide a reasonable answer based on general knowledge, then pass it to no_response().

   Example 1 - User asks about weather (no tool):
   ```python
   no_response("Based on current seasonal patterns for this time of year, it's likely partly cloudy with temperatures around 65°F. For the most accurate and up-to-date weather information, I recommend checking a dedicated weather service.")
   ```

   Example 2 - User asks to explain investment concepts (no explanation tool):
   ```python
   no_response("Conservative investments typically include bonds, CDs, and money market funds. These offer lower risk but also lower returns compared to stocks. Bonds pay fixed interest, CDs lock in rates for set periods, and both preserve capital better than equities during downturns.")
   ```
{% else %}
   **REFUSAL MODE ENABLED**: If the user's question cannot be answered by running a SQL query on the database schema shown below, or we cannot use any of the APIs provided, then use no_response.
   ```python
   no_response("No tools available to answer this question")
   ```
{% endif %}

12. **Chit-chat / greeting / thanks**
   Treat such text as noise **unless** it contains actionable intent.
   Still produce both sections; the `# Code` block should read:

   ```python
   chitchat()
   ```

# input

Today's date is {{ date }} and the day is {{ day }}.

Remember all the parameters of the APIs are optional!
These are the APIs available to you:
{{ apis }}

Use the answer API only if the question is about the database shown below. For all other types of information retrieval or operations, use the corresponding explicit API function 
The `query` should be the question asked by the user in natural language.
- answer(query: str, datatype: Optional[GenieType] = None) -> GenieType | Dict[str, Any]

The answer query has access to a database with the following tables. Use SQL to perform computations.
{{ database_tables }}


State:
```
{{ state }}
```
Previous Agent Action:
```
{{ agent_actions }}
```

Last-turn Conversation:
Agent: {{ agent_utterance }}
User: {{ user_utterance }}

Now first generate plan and then the User Target as code.