{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-genie-worksheets","title":"What is Genie Worksheets?","text":"<p>TLDR: Framework for creating reliable conversational agents</p> <p>Genie is a programmable framework for creating task-oriented conversational agents that are designed to handle complex user interactions and knowledge access. Unlike LLMs, Genie provides reliable grounded responses, with controllable agent policies through its expressive specification, Genie Worksheet. In contrast to dialog trees, it is resilient to diverse user queries, helpful with knowledge sources, and offers ease of programming policies through its declarative paradigm.</p> <p></p> <p>When to use Genie Worksheets?</p> <p>GenieWorksheets excels at handling complex dialogues where the agent actively provides assistance to the user.</p> <p>You should use GenieWorksheets if you need:</p> <pre><code>- Task-oriented agents integrated with knowledge - GenieWorksheets uniquely combines both capabilities.\n\n- Mixed-initiative conversations where users can interrupt and switch between tasks seamlessly.\n\n- Precise control over agent responses and behaviors through explicit programming controls.\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>High-Level Declarative Specification: Allows developers to easily define variables and actions for conversations through a spreadsheet-like format, without needing to manually code complex dialogue trees or manage LLM prompts.</p> </li> <li> <p>Integrated Knowledge and Task Handling: Uniquely combines the ability to handle both structured database queries and API calls in a single conversation flow, letting users seamlessly mix questions with task completion.</p> </li> <li> <p>Reliable State Tracking: Maintains conversation context through a formal dialogue state representation, reducing hallucinations and repetitive questioning common in pure LLM approaches.</p> </li> <li> <p>Programmable Agent Policies: Provides fine-grained control over agent behavior through explicit policy definitions, while still maintaining natural conversation flow and handling unexpected user inputs.</p> </li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Install the package (see installation for detailed instructions)</li> <li>Define your agent in a python file</li> <li>Run your agent using the GenieWorksheets command-line interface or through a web interface</li> </ul>"},{"location":"#comparative-analysis","title":"Comparative Analysis","text":"Feature Pure LLMs Dialog Trees GenieWorksheets Handles unexpected queries Reliable output Knowledge integration Natural conversations Control over responses Complex logic support Low hallucination risk Handles interruptions Programmable behaviors Dynamic field dependencies Development speed"},{"location":"#research-paper","title":"Research Paper","text":"<p>GenieWorksheets was introduced in our paper \"Coding Reliable LLM-based Integrated Task and Knowledge Agents with GenieWorksheets\". The paper details the design principles, implementation, and evaluation of the framework.</p>"},{"location":"#citation","title":"Citation","text":"<p>If you use GenieWorksheets in your research, please cite our paper:</p> <pre><code>@article{genieworksheets,\n  title={Coding Reliable LLM-based Integrated Task and Knowledge Agents with GenieWorksheets},\n  author={Joshi, Harshit and Liu, Shicheng and Chen, James and Weigle, Robert and Lam, Monica S},\n  journal={arXiv preprint arXiv:2407.05674},\n  year={2024}\n}\n</code></pre>"},{"location":"agent_policy/","title":"\ud83e\udd16 Understanding Agent Policy in Genie Framework","text":"<p>Quick Summary</p> <p>Agent Policy is the brain \ud83e\udde0 of the Genie framework that makes smart decisions about how to respond to users. Think of it as a very organized manager that always knows what to do next!</p>"},{"location":"agent_policy/#what-is-agent-policy","title":"\ud83c\udfaf What is Agent Policy?","text":"<p>Agent Policy is a core component of the Genie framework that determines how the conversational agent should respond to user inputs. Unlike traditional LLM approaches that rely on the model to directly generate responses, Genie uses a symbolic module to compute agent responses in a more controlled and reliable way.</p> <p>Key Difference</p> <p>Traditional LLMs: \"Let me generate whatever feels right\" \ud83c\udfb2</p> <p>Genie Agent Policy: \"Let me follow these specific rules step by step\" \u2705</p>"},{"location":"agent_policy/#why-use-a-symbolic-agent-policy","title":"\ud83e\udd14 Why Use a Symbolic Agent Policy?","text":"<p>There are two main reasons:</p> <ol> <li> <p>Deterministic Responses \ud83c\udfaf</p> <ul> <li>By providing specific agent acts, the LLM generates responses that are governed by the policy</li> <li>No more random or unpredictable responses!</li> </ul> </li> <li> <p>Better Instruction Following \ud83d\udcdd</p> <ul> <li>LLMs often struggle with following complex developer-defined policies</li> <li>A symbolic module helps ensure all instructions are properly followed</li> </ul> </li> </ol>"},{"location":"agent_policy/#how-agent-policy-works","title":"\u2699\ufe0f How Agent Policy Works","text":"<p>Input/Output Flow</p> <p>Inputs \ud83d\udce5 - Previous dialogue state - Updated dialogue state from the parser - Worksheet specification</p> <p>Outputs \ud83d\udce4 - New dialogue state - Set of agent acts to be performed</p>"},{"location":"agent_policy/#core-steps-of-agent-policy","title":"\ud83d\udd04 Core Steps of Agent Policy","text":"<pre><code>graph TD\n    A[Start] --&gt; B[Handle KB Queries]\n    B --&gt; C[Process Field Assignments]\n    C --&gt; D[Execute Complete Tasks]\n    D --&gt; E[Request Missing Information]\n    E --&gt; F[End]</code></pre> <ol> <li> <p>Handle Knowledge Base (KB) Queries \ud83d\udd0d     <pre><code>if new_kb_record:\n    if missing_required_parameters:\n        ask_user()\n    else:\n        execute_query()\n        report_results()\n</code></pre></p> </li> <li> <p>Process Field Assignments \u270d\ufe0f     <pre><code>for field in new_assignments:\n    if needs_confirmation:\n        ask_user_to_confirm()\n    else:\n        execute_actions()\n        update_state()\n</code></pre></p> </li> <li> <p>Execute Complete Tasks \u2705     <pre><code>for task in complete_tasks:\n    if not executed:\n        execute_worksheet_actions()\n        update_state()\n        add_agent_acts()\n</code></pre></p> </li> <li> <p>Request Missing Information \u2753     <pre><code>for field in required_fields:\n    if is_empty(field):\n        ask_user(field)\n        break\n</code></pre></p> </li> </ol>"},{"location":"agent_policy/#types-of-agent-acts","title":"\ud83c\udfad Types of Agent Acts","text":"<p>The Five Core Acts</p> <ol> <li> <p>Report \ud83d\udcca      <pre><code>Report(query, answer)\n</code></pre></p> <ul> <li>Reports query results to user</li> <li>Example: \"Here are the restaurants I found...\"</li> <li>Used for sharing KB query results</li> </ul> </li> <li> <p>Confirm \u2714\ufe0f      <pre><code>AskForFieldConfirmation(worksheet, field, value)\n</code></pre></p> <ul> <li>Verifies field values with user</li> <li>Example: \"Just to confirm, you want to book for 7 PM?\"</li> <li>Ensures data accuracy</li> </ul> </li> <li> <p>Say \ud83d\udcac      <pre><code>Say(utterance)\n</code></pre></p> <ul> <li>Delivers direct messages</li> <li>Example: \"I'll help you book a restaurant.\"</li> <li>Used for general communication</li> </ul> </li> <li> <p>Propose \ud83d\udca1      <pre><code>ProposeWorksheet(worksheet, parameters)\n</code></pre></p> <ul> <li>Suggests new tasks/actions</li> <li>Example: \"Would you like to make a reservation?\"</li> <li>Includes initial parameter values</li> </ul> </li> <li> <p>Ask \u2753      <pre><code>AskField(worksheet, field, field_description)\n</code></pre></p> <ul> <li>Requests specific information</li> <li>Example: \"What date would you like to book for?\"</li> <li>Includes field description</li> </ul> </li> </ol>"},{"location":"agent_policy/#agent-acts-in-action","title":"\ud83c\udfaf Agent Acts in Action","text":"<p>Restaurant Booking Example</p> <pre><code># Initial Search\n[\n    Report(\n        query=\"looking for restaurants in SF\",\n        answer=[\"Nice Place\", \"Good Food\"]\n    )\n]\n\n# Proposing Booking\n[\n    ProposeWorksheet(\n        worksheet=\"BookRestaurant\",\n        parameters={\"restaurant\": \"Nice Place\"}\n    )\n]\n\n# Gathering Details\n[\n    AskField(\n        worksheet=\"booking\",\n        field=\"date\",\n        description=\"Preferred booking date\"\n    )\n]\n\n# Confirming Details\n[\n    AskForFieldConfirmation(\n        worksheet=\"booking\",\n        field=\"time\",\n        value=\"19:00\"\n    )\n]\n</code></pre>"},{"location":"agent_policy/#common-act-sequences","title":"\ud83d\udd04 Common Act Sequences","text":"<p>Typical Flows</p> <ol> <li> <p>Search &amp; Book Flow \ud83d\udcdd     <pre><code># 1. Report search results\nReport(query, results)\n# 2. Propose booking\nProposeWorksheet(\"BookRestaurant\", {...})\n# 3. Ask for details\nAskField(\"booking\", \"date\")\n# 4. Confirm final details\nAskForFieldConfirmation(\"booking\", \"all\")\n</code></pre></p> </li> <li> <p>Information Query Flow \ud83d\udd0d     <pre><code># 1. Report answer\nReport(query, answer)\n# 2. Ask if more info needed\nSay(\"Would you like to know anything else?\")\n</code></pre></p> </li> <li> <p>Modification Flow \u270f\ufe0f     <pre><code># 1. Confirm current value\nAskForFieldConfirmation(worksheet, field)\n# 2. Ask for new value\nAskField(worksheet, field)\n# 3. Confirm change\nReport(\"update_status\", result)\n</code></pre></p> </li> </ol>"},{"location":"agent_policy/#act-parameters","title":"\u2699\ufe0f Act Parameters","text":"<p>Parameter Details</p> <ol> <li> <p>Worksheet \ud83d\udccb</p> <ul> <li>The form/task being handled</li> <li>Examples: BookRestaurant, CourseEnroll</li> <li>Must be a valid worksheet type</li> </ul> </li> <li> <p>Field \ud83c\udff7\ufe0f</p> <ul> <li>Specific data point needed</li> <li>Examples: date, time, guests</li> <li>Must exist in worksheet</li> </ul> </li> <li> <p>Description \ud83d\udcdd</p> <ul> <li>User-friendly field explanation</li> <li>Helps generate clear questions</li> <li>Should be descriptive</li> </ul> </li> <li> <p>Value \ud83d\udca1</p> <ul> <li>Current or proposed value</li> <li>Used in confirmations</li> <li>Must match field type</li> </ul> </li> </ol>"},{"location":"agent_policy/#response-generation","title":"\ud83c\udfa8 Response Generation","text":"<p>Response Guidelines</p> <ol> <li> <p>Formatting \ud83d\udcdd</p> <ul> <li>Be polite and friendly</li> <li>Use conversation context</li> <li>Keep responses natural</li> </ul> </li> <li> <p>Priority \u26a1     <pre><code>if agent_acts:\n    # Always perform listed actions first\n    execute_acts_in_order()\nelse:\n    # Then handle direct responses\n    respond_to_user()\n</code></pre></p> </li> <li> <p>Context \ud83d\udd04</p> <ul> <li>Reference previous states</li> <li>Maintain conversation flow</li> <li>Use appropriate formality</li> </ul> </li> </ol> <p>Remember</p> <p>Agent acts are the building blocks of conversation - they help create structured, reliable, and natural interactions! \ud83c\udf1f</p>"},{"location":"agent_policy/#example-flow","title":"\ud83c\udfac Example Flow","text":"<p>Restaurant Booking Scenario</p> <pre><code>User: \"I want to book a romantic restaurant in London\" \ud83c\udf7d\ufe0f\n\nAgent Policy Process:\n1. \ud83d\udd0d Creates KB record to search restaurants\n2. \u2728 Checks required parameters (date, time needed)\n3. \u2753 Asks user: \"What date would you like to book for?\"\n4. \u23f0 After getting date, asks for time\n5. \ud83c\udf89 Once all parameters are present:\n   - Executes restaurant search\n   - Reports matching restaurants\n   - Proposes booking task with found restaurant\n</code></pre>"},{"location":"agent_policy/#benefits-of-genies-agent-policy","title":"\ud83c\udf1f Benefits of Genie's Agent Policy","text":"<p>Key Advantages</p> <ol> <li>Reliable Context Management \ud83e\udde0<ul> <li>Never forgets important conversation details</li> </ul> </li> <li>Controlled Flow \ud83c\udfae<ul> <li>Ensures all required information is collected</li> </ul> </li> <li>Predictable Behavior \ud83c\udfaf<ul> <li>Follows developer-defined rules consistently</li> </ul> </li> <li>Mixed Initiative Handling \ud83e\udd1d<ul> <li>Handles both user and system initiatives effectively</li> </ul> </li> </ol>"},{"location":"agent_policy/#performance-impact","title":"\ud83d\udcca Performance Impact","text":"<p>Real User Study Results</p> <p>Genie's agent policy achieved impressive results:</p> Metric Score vs GPT-4 Execution Accuracy 86.5% +21.1% Dialog Act Accuracy 89.2% +20.1% Goal Completion Rate 82.8% +61.0%"},{"location":"agent_policy/#best-practices","title":"\ud83d\ude80 Best Practices","text":"<p>Common Pitfalls to Avoid</p> <ul> <li>Don't skip confirmation steps for critical actions</li> <li>Always handle missing required fields</li> <li>Keep track of conversation state</li> <li>Handle user interruptions gracefully</li> </ul>"},{"location":"agent_policy/#debugging-tips","title":"\ud83d\udd0d Debugging Tips","text":"<p>Troubleshooting Guide</p> <ol> <li>Check dialogue state consistency</li> <li>Verify all required fields are being tracked</li> <li>Monitor agent act sequences</li> <li>Review KB query results</li> <li>Validate field assignments</li> </ol>"},{"location":"agent_policy/#learning-resources","title":"\ud83c\udf93 Learning Resources","text":"<p>Further Reading</p> <ul> <li>Genie Framework Documentation</li> <li>Research Paper</li> <li>Example Implementations</li> </ul> <p>Remember</p> <p>The power of Genie's Agent Policy lies in its ability to maintain structure while being flexible enough to handle natural conversations! \ud83c\udf1f </p>"},{"location":"course_enrollment/","title":"Course Enrollment Assistant","text":"<p>Overview</p> <p>The Course Enrollment Assistant is a sophisticated dialogue agent that helps students with course selection and enrollment. It demonstrates how to build a complex task-oriented agent that integrates multiple data sources and handles nested workflows.</p>"},{"location":"course_enrollment/#knowledge-base","title":"Knowledge Base","text":"<p>The system uses four main tables:</p>"},{"location":"course_enrollment/#1-courses-table","title":"1. Courses Table","text":"<p>Contains course information including:</p> <ul> <li>Basic details (ID, title, units)</li> <li>Requirements (general, foundations, breadth)</li> <li>Prerequisites</li> <li>Course descriptions</li> </ul>"},{"location":"course_enrollment/#2-offerings-table","title":"2. Offerings Table","text":"<p>Contains course scheduling information:</p> <ul> <li>Days and times</li> <li>Instructors</li> <li>Seasons (quarters)</li> </ul>"},{"location":"course_enrollment/#3-ratings-table","title":"3. Ratings Table","text":"<p>Contains course feedback:</p> <ul> <li>Student ratings and reviews</li> <li>Historical data by term</li> <li>Instructor performance</li> </ul>"},{"location":"course_enrollment/#4-programs-table","title":"4. Programs Table","text":"<p>Contains degree program information:</p> <ul> <li>Program levels (BS, MS, PhD)</li> <li>Specializations</li> <li>Requirements</li> </ul>"},{"location":"course_enrollment/#implementation-guide","title":"Implementation Guide","text":""},{"location":"course_enrollment/#knowledge-base-setup","title":"Knowledge Base Setup","text":"<pre><code>suql_knowledge = SUQLKnowledgeBase(\n    tables_with_primary_keys={\n        \"courses\": \"course_id\",\n        \"ratings\": \"rating_id\",\n        \"offerings\": \"course_id\",\n        \"programs\": \"program_id\",\n    },\n    database_name=\"course_assistant\"\n)\n</code></pre>"},{"location":"course_enrollment/#api-functions","title":"API Functions","text":"<p>The system includes three main API functions:</p> <pre><code>def course_detail_to_individual_params(course_detail)\ndef courses_to_take_oval(**kwargs)\ndef is_course_full(course_id, **kwargs)\n</code></pre>"},{"location":"course_enrollment/#worksheet-structure","title":"Worksheet Structure","text":"<p>The course enrollment worksheet typically includes:</p> <pre><code># Main Course Search Worksheet\nWS Name: CourseSearch\nWS Kind: Task\nFields:\n  - Name: search_query\n    Kind: input\n    Type: string\n    Required: true\n    Description: \"What kind of course are you looking for?\"\n\n# Course Enrollment Worksheet\nWS Name: CourseEnroll\nWS Kind: Task\nFields:\n  - Name: course_id\n    Kind: input\n    Type: int\n    Required: true\n    Description: \"Course ID to enroll in\"\n\n  - Name: confirm_enrollment\n    Kind: input\n    Type: boolean\n    Required: true\n    Description: \"Confirm enrollment in the course\"\n</code></pre>"},{"location":"course_enrollment/#usage-guide","title":"Usage Guide","text":""},{"location":"course_enrollment/#common-use-cases","title":"Common Use Cases","text":"<p>Course Search</p> <ul> <li>Students can search for courses using natural language queries</li> <li>Example: \"Find me programming courses\" or \"Show me AI courses with good ratings\"</li> <li>The system uses SUQL to query across structured and unstructured data</li> </ul> <p>Course Information</p> <ul> <li>Students can ask about course details, prerequisites, and requirements</li> <li>Example: \"What are the prerequisites for CS229?\"</li> <li>Combines data from multiple tables to provide comprehensive information</li> </ul> <p>Course Enrollment</p> <ul> <li>Students can enroll in courses after confirming details</li> <li>System checks course availability using <code>is_course_full</code></li> <li>Requires confirmation before finalizing enrollment</li> </ul>"},{"location":"course_enrollment/#best-practices","title":"Best Practices","text":"<p>Knowledge Integration</p> <ul> <li>Use the SUQL knowledge base for hybrid queries across structured and unstructured data</li> <li>Leverage the React parser for complex query understanding</li> </ul> <p>Workflow Management</p> <ul> <li>Handle nested workflows (search \u2192 details \u2192 enrollment)</li> <li>Always confirm important actions before execution</li> <li>Maintain context across the conversation</li> </ul> <p>Error Handling</p> <ul> <li>Check course availability before enrollment</li> <li>Validate prerequisites</li> <li>Handle cases where courses are full or unavailable</li> </ul>"},{"location":"course_enrollment/#example-conversation-flow","title":"Example Conversation Flow","text":"<pre><code>User: \"Find me programming courses\"\nAgent: [Queries courses table with programming-related filters]\n      [Returns list of courses]\n\nUser: \"Tell me more about CS106B\"\nAgent: [Queries multiple tables for comprehensive information]\n      [Returns course details, ratings, and current offerings]\n\nUser: \"I'd like to enroll in this course\"\nAgent: [Checks prerequisites and availability]\n      [Asks for confirmation]\n      [Processes enrollment if confirmed]\n</code></pre> <p>Summary</p> <p>This guide provides a foundation for understanding how the Course Enrollment Assistant is structured using Genie Worksheets. The system demonstrates the power of combining structured data queries, natural language understanding, and workflow management in a single conversational agent.</p>"},{"location":"dialogue_state/","title":"\ud83e\udde0 Understanding Dialogue State in Genie","text":"<p>Quick Summary</p> <p>Dialogue state is like the agent's memory bank \ud83e\udde0 - it's how Genie remembers everything important about your conversation without getting overwhelmed! Think of it as a super-organized note-taker that never misses a detail.</p>"},{"location":"dialogue_state/#what-is-dialogue-state","title":"\ud83e\udd14 What is Dialogue State?","text":"<p>Dialogue state is how a conversational agent keeps track of what's happening in a conversation. Think of it like the agent's memory - it needs to remember what you've said, what it has said, and what tasks are in progress.</p>"},{"location":"dialogue_state/#the-challenge-with-traditional-methods","title":"\ud83d\udcdd The Challenge with Traditional Methods","text":"<p>Common Problems</p> <p>Traditional methods of managing dialogue state face two big challenges:</p> <ol> <li> <p>Full History Method \ud83d\udcda</p> <ul> <li>Like trying to remember every word of a long conversation</li> <li>Gets overwhelming quickly</li> <li>Important details get lost in the noise</li> </ul> </li> <li> <p>Summarization Method \ud83d\udccb</p> <ul> <li>Like taking quick notes during a meeting</li> <li>Often misses crucial details</li> <li>Can't recover lost information</li> </ul> </li> </ol>"},{"location":"dialogue_state/#how-genie-manages-dialogue-state","title":"\u26a1 How Genie Manages Dialogue State","text":"<p>Genie's Smart Approach</p> <p>Instead of trying to remember everything or creating summaries, Genie uses a structured approach called \"formal dialogue state\" - like having a perfect personal assistant taking organized notes! </p>"},{"location":"dialogue_state/#components-of-genies-dialogue-state","title":"\ud83c\udfd7\ufe0f Components of Genie's Dialogue State","text":"<pre><code>graph TD\n    A[Dialogue State] --&gt; B[Task Records \ud83d\udccb]\n    A --&gt; C[KB Query Records \ud83d\udd0d]\n    B --&gt; D[Task Name]\n    B --&gt; E[Field Values]\n    B --&gt; F[Initiator]\n    C --&gt; G[Databases]\n    C --&gt; H[Questions]\n    C --&gt; I[Queries]\n    C --&gt; J[Results]</code></pre> <p>Each dialogue state has two types of records:</p> <ol> <li> <p>Task Records \ud83d\udccb</p> <ul> <li>Name of the task (e.g., \"booking a restaurant\" \ud83c\udf7d\ufe0f)</li> <li>Values filled in (e.g., people count, date, time \u23f0)</li> <li>Who started the task (user or agent \ud83e\udd16)</li> </ul> </li> <li> <p>KB Query Records \ud83d\udd0d</p> <ul> <li>The databases being queried \ud83d\udcbe</li> <li>The natural language question \u2753</li> <li>The formal query \ud83d\udd0e</li> <li>The results \u2728</li> </ul> </li> </ol>"},{"location":"dialogue_state/#example-of-dialogue-state","title":"\ud83c\udfaf Example of Dialogue State","text":"<p>Course Enrollment Scenario</p> <pre><code># First Turn: User asks about a course\nKB_Query_Record = {\n    \"question\": \"What courses are available for logic?\",\n    \"result\": \"CS 103 is available\"\n}\n\n# Second Turn: User decides to enroll\nTask_Record = {\n    \"task\": \"Course Enrollment\",\n    \"fields\": {\n        \"course_name\": \"CS 103\",\n        \"grade_type\": \"Letter\",\n        \"units\": 4\n    }\n}\n</code></pre>"},{"location":"dialogue_state/#how-genie-uses-dialogue-state","title":"\ud83d\udd04 How Genie Uses Dialogue State","text":"<p>Processing Steps</p> <ol> <li> <p>Understanding \ud83c\udfaf</p> <ul> <li>Semantic parser interprets user input</li> <li>Considers current dialogue state context</li> </ul> </li> <li> <p>Execution \u26a1</p> <ul> <li>Performs necessary database queries</li> <li>Executes requested actions</li> </ul> </li> <li> <p>Decision Making \ud83e\udd14</p> <ul> <li>Agent policy decides next steps</li> <li>Plans what information to request</li> </ul> </li> <li> <p>Response Generation \ud83d\udcac</p> <ul> <li>Creates natural, contextual responses</li> <li>Based on current state and plans</li> </ul> </li> </ol>"},{"location":"dialogue_state/#benefits-of-genies-approach","title":"\ud83c\udf1f Benefits of Genie's Approach","text":"<p>Key Advantages</p> <ol> <li> <p>Better Memory \ud83e\udde0</p> <ul> <li>Organized, structured information</li> <li>No important details lost</li> </ul> </li> <li> <p>Accurate Responses \ud83c\udfaf</p> <ul> <li>No made-up information</li> <li>No redundant questions</li> </ul> </li> <li> <p>Flexible Conversations \ud83d\udd04</p> <ul> <li>Switch between tasks easily</li> <li>Handle multiple topics at once</li> </ul> </li> <li> <p>Developer Control \ud83d\udee0\ufe0f</p> <ul> <li>Easy to program behavior</li> <li>Clear state management</li> </ul> </li> </ol>"},{"location":"dialogue_state/#real-world-examples","title":"\ud83c\udfac Real-World Examples","text":""},{"location":"dialogue_state/#1-restaurant-booking","title":"1. Restaurant Booking \ud83c\udf7d\ufe0f","text":"<p>Restaurant Flow</p> <pre><code># User: \"I want a family friendly restaurant in SF\"\nstate = {\n    \"kb_query\": {\n        \"type\": \"restaurant_search\",\n        \"filters\": {\n            \"location\": \"San Francisco\",\n            \"features\": [\"family friendly\"]\n        }\n    },\n    \"task\": {\n        \"type\": \"booking\",\n        \"status\": \"searching\"\n    }\n}\n</code></pre>"},{"location":"dialogue_state/#2-course-enrollment","title":"2. Course Enrollment \ud83d\udcda","text":"<p>Course Flow</p> <pre><code># User: \"What's the rating for CS 221?\"\nstate = {\n    \"kb_query\": {\n        \"course\": \"CS 221\",\n        \"query_type\": \"ratings\",\n        \"result\": \"4.16 average\"\n    },\n    \"task\": {\n        \"type\": \"enrollment\",\n        \"status\": \"info_gathering\"\n    }\n}\n</code></pre>"},{"location":"dialogue_state/#debugging-tips","title":"\ud83d\udd0d Debugging Tips","text":"<p>State Debugging Guide</p> <ol> <li>Check state consistency after each turn</li> <li>Verify field updates are being tracked</li> <li>Monitor KB query results</li> <li>Validate task transitions</li> <li>Review state history for context</li> </ol>"},{"location":"dialogue_state/#best-practices","title":"\ud83c\udf93 Best Practices","text":"<p>State Management Tips</p> <ul> <li>Keep states clean and organized</li> <li>Update fields promptly</li> <li>Maintain clear relationships</li> <li>Document state transitions</li> <li>Handle edge cases gracefully</li> </ul>"},{"location":"dialogue_state/#prompt-representation","title":"\ud83c\udfad Prompt Representation","text":"<p>Dialogue State in Prompts</p> <p>The dialogue state is carefully represented in prompts to help models understand and process conversations effectively.</p>"},{"location":"dialogue_state/#state-format-in-prompts","title":"\ud83d\udd04 State Format in Prompts","text":"<pre><code># Basic State Structure\nState:\n```\nuser_info = UserInfo(user_task='Book Restaurant')\nanswer = answer(\"looking for a nice restaurant in SF\")\nrestaurant = [Restaurant(\n    name=\"Nice Place\",\n    location=\"San Francisco\",\n    rating=4.5\n)]\nbook_restaurant = BookRestaurant(\n    restaurant=restaurant[0],\n    date=\"2024-04-22\"\n)\n```\n</code></pre>"},{"location":"dialogue_state/#key-components-in-prompts","title":"\ud83d\udcdd Key Components in Prompts","text":"<p>Prompt Components</p> <ol> <li> <p>State Declaration \ud83c\udff7\ufe0f     <pre><code>State:\n</code></pre></p> <ul> <li>Clearly marks the beginning of state information</li> <li>Helps models identify state context</li> </ul> </li> <li> <p>Variable Assignments \ud83d\udccc     <pre><code>user_info = UserInfo(...)\nanswer = answer(...)\n</code></pre></p> <ul> <li>Direct assignments for state tracking</li> <li>Clear variable naming conventions</li> </ul> </li> <li> <p>Nested Objects \ud83c\udfaf     <pre><code>restaurant = [Restaurant(\n    name=\"...\",\n    location=\"...\",\n    rating=...\n)]\n</code></pre></p> <ul> <li>Structured data representation</li> <li>Easy to parse and update</li> </ul> </li> </ol>"},{"location":"dialogue_state/#prompt-guidelines","title":"\ud83d\udee0\ufe0f Prompt Guidelines","text":"<p>Best Practices</p> <ol> <li> <p>State Updates \ud83d\udd04     <pre><code># Updating existing state\nbook_restaurant.time = \"19:00\"\n\n# Creating new state\nnew_restaurant = Restaurant(...)\n</code></pre></p> </li> <li> <p>Query Handling \ud83d\udd0d     <pre><code># Knowledge queries\nanswer = answer(\"what are the ratings?\")\n\n# State queries\ncurrent_booking = book_restaurant.details\n</code></pre></p> </li> <li> <p>Confirmation States \u2705     <pre><code># Confirmation handling\nbook_restaurant.confirm = True\nbook_restaurant.special_requests = \"window seat\"\n</code></pre></p> </li> </ol>"},{"location":"dialogue_state/#example-prompt-flows","title":"\ud83c\udfaf Example Prompt Flows","text":"<p>Restaurant Booking Flow</p> <pre><code># Initial Query\nState:\nanswer = answer(\"find Italian restaurants\")\n\n# After Restaurant Selection\nState:\nrestaurant = [Restaurant(...)]\nbook_restaurant = BookRestaurant(\n    restaurant=restaurant[0]\n)\n\n# After Details Added\nState:\nbook_restaurant.time = \"19:00\"\nbook_restaurant.date = \"2024-04-22\"\nbook_restaurant.guests = 4\n</code></pre>"},{"location":"dialogue_state/#integration-with-agent-actions","title":"\ud83d\udd17 Integration with Agent Actions","text":"<p>Action Integration</p> <pre><code># State with Agent Actions\nState:\nbook_restaurant = BookRestaurant(...)\n\nAgent Action:\n[\n    \"AskField(book_restaurant, time)\",\n    \"ConfirmBooking(book_restaurant)\"\n]\n</code></pre> <p>Remember</p> <p>The prompt representation of dialogue state is the bridge between natural language and structured data - making it clear, consistent, and easy to process! \ud83c\udf1f</p>"},{"location":"examples/","title":"List of Examples","text":"<p>We have a list of examples that you can use to get started with Genie Worksheets.</p> <ul> <li>Restaurant Reservation: Making a restaurant reservation requires finding a suitable restaurant and providing booking information to complete a transaction. We use the real-life dataset containing restaurants from Yelp.com.</li> <li>Ticket Submission: University portal contains various tasks categorized under different sections and subsections, posing a navigational challenge for students seeking to locate the appropriate link. Additionally, they often contain a vast corpus of free-text data, which students must peruse before submitting a ticket. We evaluate agents' capability to handle nested webpages with predicates and subsequent actions.</li> <li>Course Enrollment: Combines hybrid data sources to search for course details and fill out complicated nested forms. The assistants allow students to ask questions about course requirements, student reviews, and ratings while filling out their enrollment forms. We collect a real-life dataset containing courses from the Computer Science program, with 4 tables (courses, offerings, ratings, and programs).</li> </ul>"},{"location":"getting_started/","title":"Quickstart Guide","text":"<p>To create a conversational agent that guides conversations with a user to achieve a certain goal and answers  users question, you need to provide Genie with: - Worksheet: A high-level specification for guiding the conversation. Contains the tasks the agent can perform and  knowledge sources available to the agent. - Configuration: An entry python file that defines configuration for the agent.</p>"},{"location":"getting_started/#creating-a-worksheet","title":"Creating a Worksheet","text":"<p>Our worksheet design is inspired by the versatility of webforms. Modern websites contain multiple fields which can be optional, tabs for selection of task, and pop-up windows that  depend on previous user responses.  There are two kinds of worksheets: </p> <ul> <li>task worksheet: To guide the conversation and achieve goals</li> <li>knowledge base worksheet: To answer users questions and assist them in making decisions.</li> </ul>"},{"location":"getting_started/#task-worksheet","title":"Task Worksheet","text":"<p>Example</p> <p>Users perform different tasks based on their requirements. A student who is having trouble enrolling in a class  would need to fill out a form containing details about the course they want to enroll in, the error message they are seeing, and any other additional comments and tasks like Leave of Absence are irrelevant to them. We need to make relevant worksheets available.</p>"},{"location":"getting_started/#worksheet-attributes","title":"Worksheet Attributes","text":"<p>A task worksheet has the following attributes for a Task worksheet:</p> <ul> <li>WS Predicate: indicates when a task worksheet should be activated based on values of other fields</li> <li>WS Name: the name of the worksheet. Used by semantic parser.</li> <li>WS Kind: Should be set to \"Task\". Defines that this is a Task type worksheet.</li> <li>WS Actions: Genie provides flexibility to the agent by executing arbitrary Python code to call external APIs,  change assigned values, or explicitly respond to the user with a given string using built-in actions like say.  The actions are triggered when all the required parameters for a task are assigned and are defined under WS Actions.</li> </ul> <p>WS Action examples Call external API to fetch information or post</p> <p>Example for WS Action</p> <p>Perform actions once the user has provided all the required information: If you want to book a restaurant, the agent will call the <code>book_restaurant</code> function. <pre><code>book_restaurant(\n    self.restaurant_name, \n    self.date, \n    self.num_people, \n    self.time, \n    self.special_instructions\n)\n</code></pre></p> <p>Example for Field Action</p> <p>Perform task based on value of a field: Once the user provides the value for <code>confirm</code> field, the agent will say \"Thank you\". <pre><code>if self.confirm:\n    say(\"Thank you\")\n</code></pre></p>"},{"location":"getting_started/#field-attributes","title":"Field Attributes","text":"<p>Each task worksheet contains a set of fields. Each field contains the following attributes:</p> <ul> <li>Predicate: indicates when a field should be activated based on values of other fields</li> <li>Kind: three types of fields can be used: <ul> <li>input: field values that are editable by the user</li> <li>internal: field values that can only be edited by the agent</li> <li>output: set according to the output of executing an API or knowledge base call</li> </ul> </li> <li>Types: Genie allows standard types for each field [TODO: We only use type of guide the semantic parsing, think of them as type hints]: <ul> <li>str: string type</li> <li>bool: boolean type</li> <li>int: integer type</li> <li>float: float type</li> <li>Enum: enumeration type. The values are set in Enum Values cells.</li> <li>list: array of atomic types [TODO: Not implemented yet]</li> <li>confirm: special type of boolean type, that prompts the user to confirm all the field values before performing  WS action.</li> </ul> </li> <li>Name: Name of the field. Used by semantic parser.</li> <li>Enum Values: a set of Enum Values if the type of the field is <code>Enum</code></li> <li>Description: provides a natural language description of the field.</li> <li>Don't Ask: a boolean that records the information if the user offers it, but the agent will not ask for it.     If Don't Ask is false, the agent will ask for the field if it is not assigned, but user can refuse to answer if it     is not Required.</li> <li>Required: if the field value is mandatory.</li> <li>Confirmation: asks for confirmation for the field value if set to TRUE.</li> <li>Actions: similar to WS Action, is used to execute python code to fetch, modify or post information.</li> </ul>"},{"location":"getting_started/#knowledge-access-worksheet","title":"Knowledge Access Worksheet","text":"<p>Genie Worksheet treats knowledge access as a first-class object.</p> <p>Example for knowledge access</p> <p>Real-life queries often involve both structured and unstructured accesses. For instance, queries \u201cWhat\u2019s the best-rated restaurant with a romantic atmosphere\u201d require access to both the  structured \u201cratings\u201d column and the free text \u201creviews\u201d column. </p> <p>To handle hybrid knowledge bases, Genie adopts the SUQL query language, an SQL extension that integrates search of unstructured data (Liu et al., 2024d). Genie can be used with other knowledge access systems as well.</p> <p>For each knowledge base to be included, the developer must create a worksheet with the following attributes:</p> <ul> <li>WS Name: the name of the worksheet. Used by semantic parser.</li> <li>WS Kind: Should be set to \"KB\". Defines that this is a Knowledge Base type worksheet.</li> </ul> <p>The attributes for fields should be filled in as following:</p> <ul> <li>Kind: should always be set as <code>internal</code> since the user cannot make changes to theses fields.      Should also write <code>primary</code> if the field is a primary key as: <code>internal; primary</code></li> </ul>"},{"location":"getting_started/#creating-agents","title":"Creating Agents","text":"<p>For creating the agent, we need to load configurations, and add prompts.</p> <ol> <li> <p>First load the model configuration for different components of Genie Agent.</p> <pre><code>from yaml import safe_load\n\nwith open(\"model_config.yaml\", \"r\") as f:\n    model_config = safe_load(f)\n</code></pre> </li> <li> <p>Define your Knowledge Sources. Right now Genie only supports SUQL knowledge base but in theory, Genie should work with all the knowledge bases. SUQL uses PostgreSQL. You should first create a database in PostgreSQL.</p> <pre><code>from worksheets.knowledge import SUQLKnowledgeBase\n\nsuql_knowledge = SUQLKnowledgeBase(\n    llm_model_name=\"gpt-4o\", # model name, append `azure/` or `together/` for azure and together models.\n    tables_with_primary_keys={\n        \"restaurants\": \"_id\", # table name and primary key\n    },\n    database_name=\"restaurants\", # database name\n    embedding_server_address=\"http://127.0.0.1:8509\",  # embedding server address for free text type of KB Worksheet\n    source_file_mapping={\n        \"course_assistant_general_info.txt\": os.path.join(\n            current_dir, \"course_assistant_general_info.txt\"\n        ) # mapping of free-text files with the path\n    },\n    db_host=\"127.0.0.1\", # database host (defaults)\n    db_port=\"5432\", # database port (defaults)\n    postprocessing_fn=None,  # optional postprocessing function for SUQL query\n    result_postprocessing_fn=None,  # optional result postprocessing function should return a dictionary\n)\n</code></pre> <ul> <li>Postprocessing function is used to modify the SUQL query before it is executed. For example, using <code>suql.agent.postprocess_suql</code> to hardcode the limit of the query to 3 and converting the location to longitude and latitude.</li> <li>Result postprocessing function is used to clean up the result of the knowledge base call and return a dictionary. For example, if the knowledge base returns a list of restaurants, with 100s of columns, a function can be used to filter the required columns and return a dictionary.</li> </ul> </li> <li> <p>Define your Knowledge Parser. Genie supports two types of semnatic parser for knowledge bases. React Multi-Agent  Parser and a Simple LLM Parser.</p> Features React Agent Simple LLM Parser Speed Slower Faster Accuracy Better Accuracy Worse Needs Examples No Yes <p>Defining a React Multi Agent Parser</p> <pre><code>from worksheets.knowledge import SUQLReActParser\n\nsuql_react_parser = SUQLReActParser(\n    llm_model_name=\"azure/gpt-4o\",  # model name\n    example_path=os.path.join(current_dir, \"examples.txt\"),  # path to examples\n    instruction_path=os.path.join(current_dir, \"instructions.txt\"),  # path to domain-specific instructions\n    table_schema_path=os.path.join(current_dir, \"table_schema.txt\"),  # path to table schema\n    knowledge=suql_knowledge,  # previously defined knowledge source\n)\n</code></pre> <p>Defining a Simple LLM Parser</p> <pre><code>from worksheets.knowledge import SUQLParser\n\nsuql_parser = SUQLParser(\n    llm_model_name=\"azure/gpt-4o\",\n    prompt_selector=None,  # optional function that helps in selecting the right prompt\n    knowledge=suql_knowledge,\n)\n</code></pre> </li> <li> <p>Bringing everything together</p> <pre><code>from worksheets.agent import Agent\n\nrestaurant_bot = Agent(\n    botname=\"YelpBot\",  # Name of your agent\n    description=\"You an assistant at Yelp and help users with all their queries related to booking a restaurant. You can search for restaurants, ask me anything about the restaurant and book a table.\",\n    prompt_dir=prompt_dir,  # directory for prompts\n    starting_prompt=\"\"\"Hello! I'm YelpBot. I'm here to help you find and book restaurants in four bay area cities **San Francisco, Palo Alto, Sunnyvale, and Cupertino**. What would you like to do?\"\"\",\n    args={},  # additional arguments\n    api=[book_restaurant_yelp],  # optional API functions\n    knowledge_base=suql_knowledge,  # previously defined knowledge source\n    knowledge_parser=suql_parser,  # previously defined knowledge parser\n).load_from_gsheet(gsheet_id=\"ADD YOUR SPREADSHEET ID HERE\",)\n</code></pre> <p>The Genie Agent uses two prompts:</p> <ul> <li>Semantic Parsing Prompt: This is used to generate worksheet representation of the user's query. The prompt directory should contain the <code>semantic_parser.prompt</code> file.</li> <li>Response Generator Prompt: This is used to generate the response of the agent based on the worksheet representation and generated agent acts. The prompt directory should contain the <code>response_generator.prompt</code> file.</li> </ul> <p>Checkout how to create prompts in the prompt section.</p> </li> <li> <p>Finally use the <code>converation_loop</code> funcion to run the agent</p> <pre><code>from asyncio import run\nfrom worksheets.interface_utils import conversation_loop\n\nasyncio.run(conversation_loop(restaurant_bot, output_state_path=\"yelp_bot.json\"))\n</code></pre> <p>Example agents are present in <code>experiments/agents/</code> directory. You can use them as a reference to create your own  agents.</p> </li> </ol>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"\ud83d\udee0\ufe0f Prerequisites","text":"<p>We recommend using uv as the package installer for GenieWorksheets. UV is a fast, reliable Python package installer and resolver.</p> <p>Why UV?</p> <p>UV offers significantly faster installation times and more reliable dependency resolution compared to pip. It's especially helpful when working with complex Python projects.</p>"},{"location":"installation/#installation-steps","title":"\ud83d\udce6 Installation Steps","text":"<ol> <li> <p>First, install UV by following the UV installation guide</p> </li> <li> <p>Clone the GenieWorksheets repository: </p> <pre><code>git clone https://github.com/stanford-oval/worksheets.git\n</code></pre> </li> <li> <p>Navigate to the project directory:</p> <pre><code>cd worksheets\n</code></pre> </li> <li> <p>Install the dependencies:</p> <pre><code>uv venv\n</code></pre> </li> <li> <p>Activate the virtual environment:</p> <pre><code>source .venv/bin/activate\n</code></pre> </li> <li> <p>Sync the dependencies:</p> <pre><code>uv sync\n</code></pre> </li> </ol>"},{"location":"installation/#issues","title":"Issues?","text":"<p>If you encounter any issues, please refer to the Troubleshooting guide.</p> <p>Or, if you're stuck, please open an issue and we'll do our best to help you out.</p>"},{"location":"prompt/","title":"Creating Prompts","text":"<p>Genie uses two types of prompts for each agent:</p> <ol> <li>Semantic Parser Prompt: Used to generate worksheet representation of the user's query</li> <li>Response Generator Prompt: Used to generate the agent's response based on the worksheet representation and agent acts</li> </ol>"},{"location":"prompt/#prompt-structure","title":"Prompt Structure","text":"<p>Each prompt file follows this general structure:</p> <pre><code>&lt;|startofinstruction|&gt;\n[General Instructions and Guidelines]\n\nToday's date is {{ date }} and the day is {{ day }}.\n\n[Available APIs and Tools]\n\n[Guidelines for Using APIs]\n\n[Examples]\n&lt;|endofinstruction|&gt;\n\n&lt;|startofinput|&gt;\n[Template for Input]\n&lt;|endofinput|&gt;\n</code></pre> <p><code>&lt;|startofinstruction|&gt;</code> and <code>&lt;|endofinstruction|&gt;</code> are used to mark the start and end of the system prompt.</p> <p><code>&lt;|startofinput|&gt;</code> and <code>&lt;|endofinput|&gt;</code> are used to mark the start and end of the user input.</p>"},{"location":"prompt/#common-elements","title":"Common Elements","text":""},{"location":"prompt/#date-and-day-variables","title":"Date and Day Variables","text":"<p>Both prompts include template variables for date and time: <pre><code>Today's date is {{ date }} and the day is {{ day }}.\n</code></pre></p>"},{"location":"prompt/#api-definitions","title":"API Definitions","text":"<p>APIs are defined using template variables: <pre><code>These are the APIs available to you:\n{{ apis }}\n</code></pre> APIs are the tasks in your worksheet. Convert the tasks into python functions, with each field being a parameter.</p>"},{"location":"prompt/#semantic-parser-prompt","title":"Semantic Parser Prompt","text":"<p>The semantic parser prompt is responsible for converting user utterances into API calls and worksheet updates.</p>"},{"location":"prompt/#key-components","title":"Key Components","text":"<ol> <li> <p>Purpose Statement <pre><code>You are a semantic parser. Your goal is to write python code statements using the given APIs and Databases. Plan your response first, then write the code.\n</code></pre></p> </li> <li> <p>Available Tools</p> <ul> <li>Define the APIs and databases the parser can use</li> <li>Specify what the <code>answer(query: str)</code> function that can be used to query the knowledge base.</li> </ul> </li> <li> <p>Guidelines Guidelines should include:</p> <ul> <li>Field handling instructions</li> <li>Special cases (like chit-chat handling)</li> <li>Domain specific guidelines or instructions on how to use the APIs</li> </ul> </li> </ol> <p>General guidelines for all semantic parser prompts:</p> <pre><code>Follow these guidelines:\n- To update any field of the APIs, use: `api_name.field_name = value`\n- When asking questions, use: `answer(query:str)`\n- Fill API fields with user-provided information only\n- Don't assume values; leave empty if not provided\n- For chit-chat/greetings, write: # Chit-chat, greeting or thanking\n</code></pre>"},{"location":"prompt/#examples-section","title":"Examples Section","text":"<p>Examples are crucial for the semantic parser, it helps the parser understand the user's query and generate the right worksheet representation.</p> <p>Example structure (for semantic parser)</p> <p>Each example should follow this structure:</p> <pre><code>Example: [Short description of the scenario]\nState:\n```\n[Current state of the conversation]\n```\nAgent Action:\n```\n[List of actions the agent is taking]\n```\n\nLast-turn Conversation:\nAgent: [Previous agent message]\nUser: [User message]\n\nUser Target:\n```\n[Expected code output]\n```\n</code></pre> <p>Key aspects of examples:</p> <ol> <li> <p>State: Shows the current conversation state including:</p> <ul> <li>Active worksheets</li> <li>Field values</li> <li>Previous query results</li> </ul> </li> <li> <p>Agent Action: Shows what actions the agent is taking, such as:</p> <ul> <li>Asking for field values</li> <li>Requesting confirmation</li> <li>Reporting query results</li> </ul> </li> <li> <p>Last-turn Conversation: Shows the context of the interaction</p> </li> <li> <p>User Target: Shows the expected code output</p> </li> </ol>"},{"location":"prompt/#response-generator-prompt","title":"Response Generator Prompt","text":"<p>The response generator prompt converts agent actions and state into natural language responses.</p>"},{"location":"prompt/#key-components_1","title":"Key Components","text":"<ol> <li> <p>Purpose Statement <pre><code>You are talking to a [user type] about [domain]. You will be given a list of agent actions and you have to use them to respond to the user.\n</code></pre></p> </li> <li> <p>Available Actions Define all possible actions the agent can take: <pre><code>These are the actions that you can perform:\n- AskField(worksheet, field, field_description)\n- AskForConfirmation(worksheet)\n- Report(query, answer)\n- ProposeWorksheet(worksheet, parameters)\n- AskForFieldConfirmation(worksheet, field, value)\n</code></pre></p> </li> <li> <p>Guidelines Include rules for:</p> </li> <li> <p>How to perform each action type</p> </li> <li>Response formatting</li> <li>Error handling</li> <li>Special cases</li> </ol>"},{"location":"prompt/#examples-section_1","title":"Examples Section","text":"<p>Response generator examples should demonstrate:</p> <ol> <li>How to handle different action types</li> <li>How to format responses</li> <li>How to combine multiple actions</li> <li>How to handle edge cases</li> </ol> <p>Example structure (for response generator)</p> <p><code>` Example: [Description of the scenario] State:</code> [Current conversation state] <code>Agent Action:</code> [Actions to perform] ```</p> <p>Previous Turns: Agent: [Previous agent message] User: [User message]</p> <p>Latest Agent Response: [Example of correct agent response] ```</p>"},{"location":"prompt/#best-practices-for-creating-examples","title":"Best Practices for Creating Examples","text":"<ol> <li>Coverage</li> <li>Include examples for all common scenarios</li> <li>Cover edge cases and error conditions</li> <li> <p>Show both simple and complex interactions</p> </li> <li> <p>Progression</p> </li> <li>Start with basic examples</li> <li>Build up to more complex scenarios</li> <li> <p>Include examples without state for initial interactions</p> </li> <li> <p>Clarity</p> </li> <li>Use descriptive names for example scenarios</li> <li>Include comments explaining key aspects</li> <li> <p>Show both input and expected output</p> </li> <li> <p>Variety</p> </li> <li>Include examples for different API calls</li> <li>Show different field types and values</li> <li> <p>Demonstrate error handling</p> </li> <li> <p>Completeness</p> </li> <li>Show complete conversation context</li> <li>Include all relevant state information</li> <li>Demonstrate proper handling of all action types</li> </ol>"},{"location":"prompt/#template-variables","title":"Template Variables","text":"<p>Your prompt files can use these template variables:</p> <ul> <li><code>{{ date }}</code>: Current date</li> <li><code>{{ day }}</code>: Current day</li> <li><code>{{ apis }}</code>: Available APIs</li> <li><code>{{ state }}</code>: Current conversation state</li> <li><code>{{ agent_acts }}</code>: Current agent actions</li> <li><code>{{ agent_utterance }}</code>: Previous agent message</li> <li><code>{{ user_utterance }}</code>: Current user message</li> <li><code>{{ parsing }}</code>: Parsing results (if applicable)</li> </ul>"},{"location":"api/agent/","title":"Agent","text":""},{"location":"api/agent/#src.worksheets.agent","title":"src.worksheets.agent","text":""},{"location":"api/agent/#src.worksheets.agent-classes","title":"Classes","text":""},{"location":"api/agent/#src.worksheets.agent.Agent","title":"Agent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Agent setting for GenieWorksheets</p> Source code in <code>src/worksheets/agent.py</code> <pre><code>class Agent(BaseModel):\n    \"\"\"Agent setting for GenieWorksheets\"\"\"\n\n    # name of the agent\n    botname: str\n\n    # description of the agent. This is used for generating response\n    description: str\n\n    # directory where the prompts are stored\n    prompt_dir: str\n\n    # starting prompt for the agent to ask the user\n    starting_prompt: str\n\n    # arguments to pass to the agent for configuration\n    args: dict\n\n    # list of functions that are available to the agent for execution\n    api: list\n\n    # knowledge configuration for the agent to run queries and respond to the user\n    knowledge_base: SUQLKnowledgeBase\n\n    # semantic parser for knowledge queries\n    knowledge_parser: BaseSUQLParser\n\n    def load_from_gsheet(self, gsheet_id: str):\n        \"\"\"Load the agent configuration from the google sheet.\n\n        Args:\n            gsheet_id (str): The ID of the Google Sheet.\n\n        Returns:\n            GenieRuntime: An instance of GenieRuntime configured with the loaded data.\n        \"\"\"\n\n        # Load Genie worksheets, databases, and types from the Google Sheet\n        genie_worsheets, genie_dbs, genie_types = gsheet_to_genie(gsheet_id)\n\n        # Create a SUQL runner if knowledge_base is provided. Suql runner is used by the\n        # GenieRuntime to run queries against the knowledge base.\n        if self.knowledge_base:\n\n            def suql_runner(query, *args, **kwargs):\n                return self.knowledge_base.run(query, *args, **kwargs)\n\n        else:\n            suql_runner = None\n\n        # Create an instance of GenieRuntime with the loaded configuration\n        bot = GenieRuntime(\n            name=self.botname,\n            prompt_dir=self.prompt_dir,\n            starting_prompt=self.starting_prompt,\n            description=self.description,\n            args=self.args,\n            api=self.api,\n            suql_runner=suql_runner,\n            suql_parser=self.knowledge_parser,\n        )\n\n        # Add worksheets, databases, and types to the GenieRuntime instance\n        for worksheet in genie_worsheets:\n            bot.add_worksheet(worksheet)\n\n        for db in genie_dbs:\n            bot.add_db_model(db)\n\n        for genie_type in genie_types:\n            bot.add_worksheet(genie_type)\n\n        return bot\n</code></pre>"},{"location":"api/agent/#src.worksheets.agent.Agent-attributes","title":"Attributes","text":""},{"location":"api/agent/#src.worksheets.agent.Agent.botname","title":"botname  <code>instance-attribute</code>","text":"<pre><code>botname: str\n</code></pre>"},{"location":"api/agent/#src.worksheets.agent.Agent.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"api/agent/#src.worksheets.agent.Agent.prompt_dir","title":"prompt_dir  <code>instance-attribute</code>","text":"<pre><code>prompt_dir: str\n</code></pre>"},{"location":"api/agent/#src.worksheets.agent.Agent.starting_prompt","title":"starting_prompt  <code>instance-attribute</code>","text":"<pre><code>starting_prompt: str\n</code></pre>"},{"location":"api/agent/#src.worksheets.agent.Agent.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args: dict\n</code></pre>"},{"location":"api/agent/#src.worksheets.agent.Agent.api","title":"api  <code>instance-attribute</code>","text":"<pre><code>api: list\n</code></pre>"},{"location":"api/agent/#src.worksheets.agent.Agent.knowledge_base","title":"knowledge_base  <code>instance-attribute</code>","text":"<pre><code>knowledge_base: SUQLKnowledgeBase\n</code></pre>"},{"location":"api/agent/#src.worksheets.agent.Agent.knowledge_parser","title":"knowledge_parser  <code>instance-attribute</code>","text":"<pre><code>knowledge_parser: BaseSUQLParser\n</code></pre>"},{"location":"api/agent/#src.worksheets.agent.Agent-functions","title":"Functions","text":""},{"location":"api/agent/#src.worksheets.agent.Agent.load_from_gsheet","title":"load_from_gsheet","text":"<pre><code>load_from_gsheet(gsheet_id: str)\n</code></pre> <p>Load the agent configuration from the google sheet.</p> <p>Parameters:</p> Name Type Description Default <code>gsheet_id</code> <code>str</code> <p>The ID of the Google Sheet.</p> required <p>Returns:</p> Name Type Description <code>GenieRuntime</code> <p>An instance of GenieRuntime configured with the loaded data.</p> Source code in <code>src/worksheets/agent.py</code> <pre><code>def load_from_gsheet(self, gsheet_id: str):\n    \"\"\"Load the agent configuration from the google sheet.\n\n    Args:\n        gsheet_id (str): The ID of the Google Sheet.\n\n    Returns:\n        GenieRuntime: An instance of GenieRuntime configured with the loaded data.\n    \"\"\"\n\n    # Load Genie worksheets, databases, and types from the Google Sheet\n    genie_worsheets, genie_dbs, genie_types = gsheet_to_genie(gsheet_id)\n\n    # Create a SUQL runner if knowledge_base is provided. Suql runner is used by the\n    # GenieRuntime to run queries against the knowledge base.\n    if self.knowledge_base:\n\n        def suql_runner(query, *args, **kwargs):\n            return self.knowledge_base.run(query, *args, **kwargs)\n\n    else:\n        suql_runner = None\n\n    # Create an instance of GenieRuntime with the loaded configuration\n    bot = GenieRuntime(\n        name=self.botname,\n        prompt_dir=self.prompt_dir,\n        starting_prompt=self.starting_prompt,\n        description=self.description,\n        args=self.args,\n        api=self.api,\n        suql_runner=suql_runner,\n        suql_parser=self.knowledge_parser,\n    )\n\n    # Add worksheets, databases, and types to the GenieRuntime instance\n    for worksheet in genie_worsheets:\n        bot.add_worksheet(worksheet)\n\n    for db in genie_dbs:\n        bot.add_db_model(db)\n\n    for genie_type in genie_types:\n        bot.add_worksheet(genie_type)\n\n    return bot\n</code></pre>"},{"location":"api/environment/","title":"Environment","text":""},{"location":"api/environment/#src.worksheets.environment","title":"src.worksheets.environment","text":"<p>Core environment module for Genie worksheets and runtime management.</p> <p>This module provides the foundational classes and utilities for managing Genie worksheets, including type handling, context management, and runtime execution. It implements the core functionality for worksheet validation, action execution, and state management.</p>"},{"location":"api/environment/#src.worksheets.environment-classes","title":"Classes","text":""},{"location":"api/environment/#src.worksheets.environment.GenieValue","title":"GenieValue","text":"<p>A class to represent a value in Genie.</p> <p>This class wraps primitive values (string, int, float, etc.) with additional functionality like confirmation status tracking.</p> <p>Attributes:</p> Name Type Description <code>value</code> <p>The wrapped primitive value.</p> <code>confirmed</code> <code>bool</code> <p>Whether this value has been confirmed by the user.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class GenieValue:\n    \"\"\"A class to represent a value in Genie.\n\n    This class wraps primitive values (string, int, float, etc.) with additional\n    functionality like confirmation status tracking.\n\n    Attributes:\n        value: The wrapped primitive value.\n        confirmed (bool): Whether this value has been confirmed by the user.\n    \"\"\"\n\n    def __init__(self, value):\n        \"\"\"Initialize a GenieValue.\n\n        Args:\n            value: The primitive value to wrap.\n        \"\"\"\n        self.value = value\n        self.confirmed = False\n\n    def __repr__(self):\n        return f\"{self.value}\"\n\n    def __eq__(self, other):\n        if isinstance(other, GenieValue):\n            if self.value == other.value:\n                return True\n\n        return self.value == other\n\n    def confirm(self, confirmed: bool = True):\n        \"\"\"Mark the value as confirmed.\n\n        Args:\n            confirmed (bool, optional): Whether to mark as confirmed. Defaults to True.\n\n        Returns:\n            GenieValue: The confirmed value instance.\n        \"\"\"\n        self.confirmed = confirmed\n        return self\n\n    def __str__(self):\n        return self.value\n\n    def __hash__(self):\n        return hash(self.value)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieValue-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.GenieValue.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value = value\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieValue.confirmed","title":"confirmed  <code>instance-attribute</code>","text":"<pre><code>confirmed = False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieValue-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.GenieValue.__init__","title":"__init__","text":"<pre><code>__init__(value)\n</code></pre> <p>Initialize a GenieValue.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <p>The primitive value to wrap.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(self, value):\n    \"\"\"Initialize a GenieValue.\n\n    Args:\n        value: The primitive value to wrap.\n    \"\"\"\n    self.value = value\n    self.confirmed = False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieValue.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __repr__(self):\n    return f\"{self.value}\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieValue.__eq__","title":"__eq__","text":"<pre><code>__eq__(other)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __eq__(self, other):\n    if isinstance(other, GenieValue):\n        if self.value == other.value:\n            return True\n\n    return self.value == other\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieValue.confirm","title":"confirm","text":"<pre><code>confirm(confirmed: bool = True)\n</code></pre> <p>Mark the value as confirmed.</p> <p>Parameters:</p> Name Type Description Default <code>confirmed</code> <code>bool</code> <p>Whether to mark as confirmed. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>GenieValue</code> <p>The confirmed value instance.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def confirm(self, confirmed: bool = True):\n    \"\"\"Mark the value as confirmed.\n\n    Args:\n        confirmed (bool, optional): Whether to mark as confirmed. Defaults to True.\n\n    Returns:\n        GenieValue: The confirmed value instance.\n    \"\"\"\n    self.confirmed = confirmed\n    return self\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieValue.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __str__(self):\n    return self.value\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieValue.__hash__","title":"__hash__","text":"<pre><code>__hash__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __hash__(self):\n    return hash(self.value)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieResult","title":"GenieResult","text":"<p>               Bases: <code>GenieValue</code></p> <p>A class to represent results from executions.</p> <p>This class extends GenieValue to store results from Answer executions or other actions, maintaining references to parent objects.</p> <p>Attributes:</p> Name Type Description <code>value</code> <p>The result value.</p> <code>parent</code> <p>The parent object that produced this result.</p> <code>parent_var_name</code> <p>The variable name of the parent in the context.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class GenieResult(GenieValue):\n    \"\"\"A class to represent results from executions.\n\n    This class extends GenieValue to store results from Answer executions or\n    other actions, maintaining references to parent objects.\n\n    Attributes:\n        value: The result value.\n        parent: The parent object that produced this result.\n        parent_var_name: The variable name of the parent in the context.\n    \"\"\"\n\n    def __init__(self, value, parent, parent_var_name):\n        \"\"\"Initialize a GenieResult.\n\n        Args:\n            value: The result value.\n            parent: The parent object that produced this result.\n            parent_var_name: The variable name of the parent in the context.\n        \"\"\"\n        super().__init__(value)\n        self.parent = parent\n        self.parent_var_name = parent_var_name\n\n    def __getitem__(self, item):\n        return self.value[item]\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieResult-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.GenieResult.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value = value\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieResult.confirmed","title":"confirmed  <code>instance-attribute</code>","text":"<pre><code>confirmed = False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieResult.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent = parent\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieResult.parent_var_name","title":"parent_var_name  <code>instance-attribute</code>","text":"<pre><code>parent_var_name = parent_var_name\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieResult-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.GenieResult.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __repr__(self):\n    return f\"{self.value}\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieResult.__eq__","title":"__eq__","text":"<pre><code>__eq__(other)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __eq__(self, other):\n    if isinstance(other, GenieValue):\n        if self.value == other.value:\n            return True\n\n    return self.value == other\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieResult.confirm","title":"confirm","text":"<pre><code>confirm(confirmed: bool = True)\n</code></pre> <p>Mark the value as confirmed.</p> <p>Parameters:</p> Name Type Description Default <code>confirmed</code> <code>bool</code> <p>Whether to mark as confirmed. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>GenieValue</code> <p>The confirmed value instance.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def confirm(self, confirmed: bool = True):\n    \"\"\"Mark the value as confirmed.\n\n    Args:\n        confirmed (bool, optional): Whether to mark as confirmed. Defaults to True.\n\n    Returns:\n        GenieValue: The confirmed value instance.\n    \"\"\"\n    self.confirmed = confirmed\n    return self\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieResult.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __str__(self):\n    return self.value\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieResult.__hash__","title":"__hash__","text":"<pre><code>__hash__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __hash__(self):\n    return hash(self.value)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieResult.__init__","title":"__init__","text":"<pre><code>__init__(value, parent, parent_var_name)\n</code></pre> <p>Initialize a GenieResult.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <p>The result value.</p> required <code>parent</code> <p>The parent object that produced this result.</p> required <code>parent_var_name</code> <p>The variable name of the parent in the context.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(self, value, parent, parent_var_name):\n    \"\"\"Initialize a GenieResult.\n\n    Args:\n        value: The result value.\n        parent: The parent object that produced this result.\n        parent_var_name: The variable name of the parent in the context.\n    \"\"\"\n    super().__init__(value)\n    self.parent = parent\n    self.parent_var_name = parent_var_name\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieResult.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(item)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __getitem__(self, item):\n    return self.value[item]\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieREPR","title":"GenieREPR","text":"<p>               Bases: <code>type</code></p> <p>A metaclass to customize string representation of Genie classes.</p> <p>This metaclass provides custom string representation for classes that use it, maintaining ordered attributes and generating schema representations.</p> <p>Attributes:</p> Name Type Description <code>_ordered_attributes</code> <p>List of ordered attribute names for the class.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class GenieREPR(type):\n    \"\"\"A metaclass to customize string representation of Genie classes.\n\n    This metaclass provides custom string representation for classes that use it,\n    maintaining ordered attributes and generating schema representations.\n\n    Attributes:\n        _ordered_attributes: List of ordered attribute names for the class.\n    \"\"\"\n\n    def __new__(cls, name, bases, dct):\n        new_class = super().__new__(cls, name, bases, dct)\n        # Store the ordered attributes, these are used for asking questions in the order they are defined\n        new_class._ordered_attributes = [k for k in dct if not k.startswith(\"__\")]\n        return new_class\n\n    def __repr__(cls):\n        parameters = []\n        for field in get_genie_fields_from_ws(cls):\n            parameters.append(field.schema(value=False))\n\n        return f\"{cls.__name__}({', '.join([param for param in parameters])})\"\n\n    def get_semantic_parser_schema(cls):\n        parameters = []\n        if hasattr(cls, \"predicate\") and (cls.predicate == \"\" or cls.predicate is True):\n            for field in get_genie_fields_from_ws(cls):\n                if not field.internal:\n                    parameters.append(field.schema(value=False))\n\n        return f\"{cls.__name__}({', '.join([repr(param) for param in parameters])})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieREPR-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.GenieREPR.__new__","title":"__new__","text":"<pre><code>__new__(name, bases, dct)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __new__(cls, name, bases, dct):\n    new_class = super().__new__(cls, name, bases, dct)\n    # Store the ordered attributes, these are used for asking questions in the order they are defined\n    new_class._ordered_attributes = [k for k in dct if not k.startswith(\"__\")]\n    return new_class\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieREPR.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __repr__(cls):\n    parameters = []\n    for field in get_genie_fields_from_ws(cls):\n        parameters.append(field.schema(value=False))\n\n    return f\"{cls.__name__}({', '.join([param for param in parameters])})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieREPR.get_semantic_parser_schema","title":"get_semantic_parser_schema","text":"<pre><code>get_semantic_parser_schema()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def get_semantic_parser_schema(cls):\n    parameters = []\n    if hasattr(cls, \"predicate\") and (cls.predicate == \"\" or cls.predicate is True):\n        for field in get_genie_fields_from_ws(cls):\n            if not field.internal:\n                parameters.append(field.schema(value=False))\n\n    return f\"{cls.__name__}({', '.join([repr(param) for param in parameters])})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField","title":"GenieField","text":"<p>A class representing a field in a Genie worksheet.</p> <p>This class handles field definitions, validation, and value management for worksheet fields. It supports various field types, validation rules, and action triggers.</p> <p>Attributes:</p> Name Type Description <code>slottype</code> <code>str</code> <p>The type of the field.</p> <code>name</code> <code>str</code> <p>The field name.</p> <code>question</code> <code>str</code> <p>Question to ask when field needs filling.</p> <code>description</code> <code>str</code> <p>Field description for LLM understanding.</p> <code>predicate</code> <code>str</code> <p>Condition for field relevance.</p> <code>ask</code> <code>bool</code> <p>Whether to ask user for this field.</p> <code>optional</code> <code>bool</code> <p>Whether field is optional.</p> <code>actions</code> <p>Actions to perform when field is filled.</p> <code>requires_confirmation</code> <code>bool</code> <p>Whether field needs confirmation.</p> <code>internal</code> <code>bool</code> <p>Whether field is system-managed.</p> <code>primary_key</code> <code>bool</code> <p>Whether field is a primary key.</p> <code>validation</code> <code>str</code> <p>Validation criteria.</p> <code>parent</code> <p>Parent worksheet.</p> <code>bot</code> <p>Associated bot instance.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class GenieField:\n    \"\"\"A class representing a field in a Genie worksheet.\n\n    This class handles field definitions, validation, and value management for\n    worksheet fields. It supports various field types, validation rules, and\n    action triggers.\n\n    Attributes:\n        slottype (str): The type of the field.\n        name (str): The field name.\n        question (str): Question to ask when field needs filling.\n        description (str): Field description for LLM understanding.\n        predicate (str): Condition for field relevance.\n        ask (bool): Whether to ask user for this field.\n        optional (bool): Whether field is optional.\n        actions: Actions to perform when field is filled.\n        requires_confirmation (bool): Whether field needs confirmation.\n        internal (bool): Whether field is system-managed.\n        primary_key (bool): Whether field is a primary key.\n        validation (str): Validation criteria.\n        parent: Parent worksheet.\n        bot: Associated bot instance.\n    \"\"\"\n\n    def __init__(\n        self,\n        # The type of the slot, e.g., str, int, etc.\n        slottype: str,\n        # The name of the field (variable name)\n        name: str,\n        # The question to ask the user if the field is not filled\n        question: str = \"\",\n        # A description of the field. This is provided to the LLM for better understanding.\n        description: str = \"\",\n        # A predicate to determine if the field should be filled\n        predicate: str = \"\",\n        # Whether to ask the user for this field\n        ask: bool = True,\n        # Whether this field is optional\n        optional: bool = False,\n        # Any actions to perform when this field is filled\n        actions=None,\n        # The initial value of the field\n        value=None,\n        # Whether this field requires confirmation\n        requires_confirmation: bool = False,\n        # Whether this field is internal (not shown to the user and filled by the system)\n        internal: bool = False,\n        # Whether this field is a primary key. Used for database Worksheets.\n        primary_key: bool = False,\n        # Whether this field has been confirmed by the user\n        confirmed: bool = False,\n        # Any validation criteria for this field\n        validation: str | None = None,\n        # The parent worksheet\n        parent=None,\n        # The bot instance (GenieRuntime)\n        bot=None,\n        # Whether an action has been performed for this field\n        action_performed=False,\n        **kwargs,\n    ):\n        self.predicate = predicate\n        self.slottype = slottype\n        self.name = name\n        self.question = question\n        self.ask = ask\n        self.optional = optional\n        if self.ask is False:\n            self.optional = True\n        self.actions = actions\n        self.requires_confirmation = requires_confirmation\n        self.internal = internal\n        self.description = description\n        self.primary_key = primary_key\n        self.validation = validation\n        self.parent = parent\n        self.bot = bot\n\n        self.action_performed = action_performed\n        self._value = self.init_value(value)\n        self._confirmed = confirmed\n\n    def __deepcopy__(self, memo):\n        return GenieField(\n            slottype=deepcopy(self.slottype, memo),\n            name=deepcopy(self.name, memo),\n            question=deepcopy(self.question, memo),\n            description=deepcopy(self.description, memo),\n            predicate=deepcopy(self.predicate, memo),\n            ask=deepcopy(self.ask, memo),\n            optional=deepcopy(self.optional, memo),\n            actions=deepcopy(self.actions, memo),\n            value=deepcopy(self.value, memo),\n            requires_confirmation=deepcopy(self.requires_confirmation, memo),\n            internal=deepcopy(self.internal, memo),\n            primary_key=deepcopy(self.primary_key, memo),\n            confirmed=deepcopy(self.confirmed, memo),\n            validation=deepcopy(self.validation, memo),\n            action_performed=deepcopy(self.action_performed, memo),\n            parent=self.parent,\n            bot=self.bot,\n        )\n\n    def perform_action(self, bot: GenieRuntime, local_context: GenieContext):\n        \"\"\"Perform the action associated with this field if it hasn't been performed yet.\n\n        Args:\n            bot (GenieRuntime): The bot instance.\n            local_context (GenieContext): The local context for the action.\n\n        Returns:\n            list: A list of actions performed.\n        \"\"\"\n        if self.action_performed:\n            return []\n        logger.info(f\"Peforming action for {self.name}: {self.actions.action}\")\n        acts = []\n\n        # If there are no actions, return an empty list\n        if self.actions is None or len(self.actions) == 0:\n            return acts\n\n        # Perform the action\n        acts = self.actions.perform(self, bot, local_context)\n        self.action_performed = True\n\n        return acts\n\n    def __repr__(self) -&gt; str:\n        return self.schema(value=True)\n\n    def schema(self, value=True):\n        \"\"\"Generate a schema representation of the field.\n\n        Args:\n            value (bool, optional): Whether to include the value in the schema. Defaults to True.\n\n        Returns:\n            str: The schema representation.\n        \"\"\"\n        # Getting the type of sources_type as a string\n        if isinstance(self.slottype, str) and self.slottype == \"confirm\":\n            slottype = \"bool\"\n        elif self.slottype.__name__ in [\"List\", \"Dict\"]:\n            slottype = self.slottype.__name__ + \"[\"\n            if isinstance(self.slottype.__args__[0], str):\n                slottype += self.slottype.__args__[0]\n            else:\n                slottype += self.slottype.__args__[0].__name__\n            slottype += \"]\"\n        # Special case for enums\n        elif inspect.isclass(self.slottype) and issubclass(self.slottype, Enum):\n            options = \", \".join([repr(e.name) for e in self.slottype])\n            slottype = \"Enum[\" + options + \"]\"\n        else:\n            slottype = self.slottype.__name__\n\n        if value:\n            if self.value is None:\n                val = \"None\"\n            elif self.value == \"\":\n                val = '\"\"'\n            else:\n                val = self.value\n            return f\"{self.name}: {slottype} = {repr(val)}\"\n        else:\n            return f\"{self.name}: {slottype}\"\n\n    def schema_without_type(self, no_none=False):\n        \"\"\"Generate a schema representation of the field without type information.\n\n        Args:\n            no_none (bool, optional): Whether to exclude None values. Defaults to False.\n\n        Returns:\n            str: The schema representation without type.\n        \"\"\"\n        if self.value is None:\n            val = None\n        elif self.value == \"\":\n            val = '\"\"'\n        else:\n            if isinstance(self.value, str):\n                val = f\"{repr(self.value)}\"\n            else:\n                val = self.value\n\n        if no_none and val == \"None\":\n            return\n\n        return f\"{self.name} = {repr(val)}\"\n\n    @property\n    def confirmed(self):\n        if hasattr(self, \"_value\") and isinstance(self._value, GenieValue):\n            return self._value.confirmed\n        return self._confirmed\n\n    @confirmed.setter\n    def confirmed(self, confirmed: bool):\n        self._confirmed = confirmed\n\n    @property\n    def value(self):\n        if isinstance(self._value, GenieValue):\n            return self._value.value\n        return self._value\n\n    @value.setter\n    def value(self, value):\n        self.action_performed = False\n        self._value = self.init_value(value)\n\n    def init_value(self, value: Any):\n        \"\"\"Initialize a field value with proper validation and wrapping.\n\n        Args:\n            value (Any): The value to initialize.\n\n        Returns:\n            GenieValue: The initialized value, or None if validation fails.\n        \"\"\"\n\n        def previous_action_contains_confirm():\n            \"\"\"Only allow confirmation if the previous action was a confirmation action.\"\"\"\n            if self.bot.dlg_history is not None and len(self.bot.dlg_history):\n                if self.bot.dlg_history[-1].system_action is not None:\n                    for act in self.bot.dlg_history[-1].system_action.actions:\n                        if isinstance(act, AskAgentAct):\n                            if act.field.slottype == \"confirm\":\n                                return True\n            return False\n\n        # TODO: If the value is set by the user for internal field, then do not assign.\n        # if done by the system, then assign.\n        if value == \"\" or value is None:\n            value = None\n        else:\n            if self.slottype == \"confirm\":\n                prev_confirm = previous_action_contains_confirm()\n                if not prev_confirm:\n                    return\n\n            valid = True\n            if self.validation:\n                # Use LLM to check if the value is valid based on the validation rule\n                matches_criteria, reason = validation_check(\n                    self.name, value, self.validation\n                )\n                if not matches_criteria:\n                    # If the validation fails, use the original value, log the error and set valid to False\n                    if isinstance(value, GenieValue):\n                        value = value.value\n                    self.parent.bot.context.agent_acts.add(\n                        ReportAgentAct(\n                            query=f\"{self.name}={value}\",\n                            message=f\"Invalid value for {self.name}: {value} - {reason}\",\n                        )\n                    )\n                    valid = False\n\n            if valid:\n                # If the value is valid, create a GenieValue instance\n                if isinstance(value, GenieValue):\n                    return value\n                else:\n                    return GenieValue(value)\n\n    def __eq__(self, other):\n        # For equality check, we compare the name and value of the fields\n        if isinstance(other, GenieField):\n            if self.name == other.name and self.value == other.value:\n                return True\n        return False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.GenieField.predicate","title":"predicate  <code>instance-attribute</code>","text":"<pre><code>predicate = predicate\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.slottype","title":"slottype  <code>instance-attribute</code>","text":"<pre><code>slottype = slottype\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.question","title":"question  <code>instance-attribute</code>","text":"<pre><code>question = question\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.ask","title":"ask  <code>instance-attribute</code>","text":"<pre><code>ask = ask\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.optional","title":"optional  <code>instance-attribute</code>","text":"<pre><code>optional = optional\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.actions","title":"actions  <code>instance-attribute</code>","text":"<pre><code>actions = actions\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.requires_confirmation","title":"requires_confirmation  <code>instance-attribute</code>","text":"<pre><code>requires_confirmation = requires_confirmation\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.internal","title":"internal  <code>instance-attribute</code>","text":"<pre><code>internal = internal\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description = description\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.primary_key","title":"primary_key  <code>instance-attribute</code>","text":"<pre><code>primary_key = primary_key\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.validation","title":"validation  <code>instance-attribute</code>","text":"<pre><code>validation = validation\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.parent","title":"parent  <code>instance-attribute</code>","text":"<pre><code>parent = parent\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.bot","title":"bot  <code>instance-attribute</code>","text":"<pre><code>bot = bot\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.action_performed","title":"action_performed  <code>instance-attribute</code>","text":"<pre><code>action_performed = action_performed\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField._value","title":"_value  <code>instance-attribute</code>","text":"<pre><code>_value = init_value(value)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField._confirmed","title":"_confirmed  <code>instance-attribute</code>","text":"<pre><code>_confirmed = confirmed\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.confirmed","title":"confirmed  <code>property</code> <code>writable</code>","text":"<pre><code>confirmed\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.value","title":"value  <code>property</code> <code>writable</code>","text":"<pre><code>value\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.GenieField.__init__","title":"__init__","text":"<pre><code>__init__(slottype: str, name: str, question: str = '', description: str = '', predicate: str = '', ask: bool = True, optional: bool = False, actions=None, value=None, requires_confirmation: bool = False, internal: bool = False, primary_key: bool = False, confirmed: bool = False, validation: str | None = None, parent=None, bot=None, action_performed=False, **kwargs)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(\n    self,\n    # The type of the slot, e.g., str, int, etc.\n    slottype: str,\n    # The name of the field (variable name)\n    name: str,\n    # The question to ask the user if the field is not filled\n    question: str = \"\",\n    # A description of the field. This is provided to the LLM for better understanding.\n    description: str = \"\",\n    # A predicate to determine if the field should be filled\n    predicate: str = \"\",\n    # Whether to ask the user for this field\n    ask: bool = True,\n    # Whether this field is optional\n    optional: bool = False,\n    # Any actions to perform when this field is filled\n    actions=None,\n    # The initial value of the field\n    value=None,\n    # Whether this field requires confirmation\n    requires_confirmation: bool = False,\n    # Whether this field is internal (not shown to the user and filled by the system)\n    internal: bool = False,\n    # Whether this field is a primary key. Used for database Worksheets.\n    primary_key: bool = False,\n    # Whether this field has been confirmed by the user\n    confirmed: bool = False,\n    # Any validation criteria for this field\n    validation: str | None = None,\n    # The parent worksheet\n    parent=None,\n    # The bot instance (GenieRuntime)\n    bot=None,\n    # Whether an action has been performed for this field\n    action_performed=False,\n    **kwargs,\n):\n    self.predicate = predicate\n    self.slottype = slottype\n    self.name = name\n    self.question = question\n    self.ask = ask\n    self.optional = optional\n    if self.ask is False:\n        self.optional = True\n    self.actions = actions\n    self.requires_confirmation = requires_confirmation\n    self.internal = internal\n    self.description = description\n    self.primary_key = primary_key\n    self.validation = validation\n    self.parent = parent\n    self.bot = bot\n\n    self.action_performed = action_performed\n    self._value = self.init_value(value)\n    self._confirmed = confirmed\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.__deepcopy__","title":"__deepcopy__","text":"<pre><code>__deepcopy__(memo)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __deepcopy__(self, memo):\n    return GenieField(\n        slottype=deepcopy(self.slottype, memo),\n        name=deepcopy(self.name, memo),\n        question=deepcopy(self.question, memo),\n        description=deepcopy(self.description, memo),\n        predicate=deepcopy(self.predicate, memo),\n        ask=deepcopy(self.ask, memo),\n        optional=deepcopy(self.optional, memo),\n        actions=deepcopy(self.actions, memo),\n        value=deepcopy(self.value, memo),\n        requires_confirmation=deepcopy(self.requires_confirmation, memo),\n        internal=deepcopy(self.internal, memo),\n        primary_key=deepcopy(self.primary_key, memo),\n        confirmed=deepcopy(self.confirmed, memo),\n        validation=deepcopy(self.validation, memo),\n        action_performed=deepcopy(self.action_performed, memo),\n        parent=self.parent,\n        bot=self.bot,\n    )\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.perform_action","title":"perform_action","text":"<pre><code>perform_action(bot: GenieRuntime, local_context: GenieContext)\n</code></pre> <p>Perform the action associated with this field if it hasn't been performed yet.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>local_context</code> <code>GenieContext</code> <p>The local context for the action.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of actions performed.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def perform_action(self, bot: GenieRuntime, local_context: GenieContext):\n    \"\"\"Perform the action associated with this field if it hasn't been performed yet.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        local_context (GenieContext): The local context for the action.\n\n    Returns:\n        list: A list of actions performed.\n    \"\"\"\n    if self.action_performed:\n        return []\n    logger.info(f\"Peforming action for {self.name}: {self.actions.action}\")\n    acts = []\n\n    # If there are no actions, return an empty list\n    if self.actions is None or len(self.actions) == 0:\n        return acts\n\n    # Perform the action\n    acts = self.actions.perform(self, bot, local_context)\n    self.action_performed = True\n\n    return acts\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return self.schema(value=True)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.schema","title":"schema","text":"<pre><code>schema(value=True)\n</code></pre> <p>Generate a schema representation of the field.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool</code> <p>Whether to include the value in the schema. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The schema representation.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def schema(self, value=True):\n    \"\"\"Generate a schema representation of the field.\n\n    Args:\n        value (bool, optional): Whether to include the value in the schema. Defaults to True.\n\n    Returns:\n        str: The schema representation.\n    \"\"\"\n    # Getting the type of sources_type as a string\n    if isinstance(self.slottype, str) and self.slottype == \"confirm\":\n        slottype = \"bool\"\n    elif self.slottype.__name__ in [\"List\", \"Dict\"]:\n        slottype = self.slottype.__name__ + \"[\"\n        if isinstance(self.slottype.__args__[0], str):\n            slottype += self.slottype.__args__[0]\n        else:\n            slottype += self.slottype.__args__[0].__name__\n        slottype += \"]\"\n    # Special case for enums\n    elif inspect.isclass(self.slottype) and issubclass(self.slottype, Enum):\n        options = \", \".join([repr(e.name) for e in self.slottype])\n        slottype = \"Enum[\" + options + \"]\"\n    else:\n        slottype = self.slottype.__name__\n\n    if value:\n        if self.value is None:\n            val = \"None\"\n        elif self.value == \"\":\n            val = '\"\"'\n        else:\n            val = self.value\n        return f\"{self.name}: {slottype} = {repr(val)}\"\n    else:\n        return f\"{self.name}: {slottype}\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.schema_without_type","title":"schema_without_type","text":"<pre><code>schema_without_type(no_none=False)\n</code></pre> <p>Generate a schema representation of the field without type information.</p> <p>Parameters:</p> Name Type Description Default <code>no_none</code> <code>bool</code> <p>Whether to exclude None values. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The schema representation without type.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def schema_without_type(self, no_none=False):\n    \"\"\"Generate a schema representation of the field without type information.\n\n    Args:\n        no_none (bool, optional): Whether to exclude None values. Defaults to False.\n\n    Returns:\n        str: The schema representation without type.\n    \"\"\"\n    if self.value is None:\n        val = None\n    elif self.value == \"\":\n        val = '\"\"'\n    else:\n        if isinstance(self.value, str):\n            val = f\"{repr(self.value)}\"\n        else:\n            val = self.value\n\n    if no_none and val == \"None\":\n        return\n\n    return f\"{self.name} = {repr(val)}\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.init_value","title":"init_value","text":"<pre><code>init_value(value: Any)\n</code></pre> <p>Initialize a field value with proper validation and wrapping.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to initialize.</p> required <p>Returns:</p> Name Type Description <code>GenieValue</code> <p>The initialized value, or None if validation fails.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def init_value(self, value: Any):\n    \"\"\"Initialize a field value with proper validation and wrapping.\n\n    Args:\n        value (Any): The value to initialize.\n\n    Returns:\n        GenieValue: The initialized value, or None if validation fails.\n    \"\"\"\n\n    def previous_action_contains_confirm():\n        \"\"\"Only allow confirmation if the previous action was a confirmation action.\"\"\"\n        if self.bot.dlg_history is not None and len(self.bot.dlg_history):\n            if self.bot.dlg_history[-1].system_action is not None:\n                for act in self.bot.dlg_history[-1].system_action.actions:\n                    if isinstance(act, AskAgentAct):\n                        if act.field.slottype == \"confirm\":\n                            return True\n        return False\n\n    # TODO: If the value is set by the user for internal field, then do not assign.\n    # if done by the system, then assign.\n    if value == \"\" or value is None:\n        value = None\n    else:\n        if self.slottype == \"confirm\":\n            prev_confirm = previous_action_contains_confirm()\n            if not prev_confirm:\n                return\n\n        valid = True\n        if self.validation:\n            # Use LLM to check if the value is valid based on the validation rule\n            matches_criteria, reason = validation_check(\n                self.name, value, self.validation\n            )\n            if not matches_criteria:\n                # If the validation fails, use the original value, log the error and set valid to False\n                if isinstance(value, GenieValue):\n                    value = value.value\n                self.parent.bot.context.agent_acts.add(\n                    ReportAgentAct(\n                        query=f\"{self.name}={value}\",\n                        message=f\"Invalid value for {self.name}: {value} - {reason}\",\n                    )\n                )\n                valid = False\n\n        if valid:\n            # If the value is valid, create a GenieValue instance\n            if isinstance(value, GenieValue):\n                return value\n            else:\n                return GenieValue(value)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieField.__eq__","title":"__eq__","text":"<pre><code>__eq__(other)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __eq__(self, other):\n    # For equality check, we compare the name and value of the fields\n    if isinstance(other, GenieField):\n        if self.name == other.name and self.value == other.value:\n            return True\n    return False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet","title":"GenieWorksheet","text":"<p>Base class for Genie worksheets.</p> <p>This class provides the foundation for defining worksheets with fields, actions, and state management. It handles initialization, field management, and action execution.</p> <p>Attributes:</p> Name Type Description <code>action_performed</code> <code>bool</code> <p>Whether worksheet actions have been executed.</p> <code>result</code> <p>The result of worksheet execution.</p> <code>random_id</code> <code>int</code> <p>Unique identifier for the worksheet instance.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class GenieWorksheet(metaclass=GenieREPR):\n    \"\"\"Base class for Genie worksheets.\n\n    This class provides the foundation for defining worksheets with fields,\n    actions, and state management. It handles initialization, field management,\n    and action execution.\n\n    Attributes:\n        action_performed (bool): Whether worksheet actions have been executed.\n        result: The result of worksheet execution.\n        random_id (int): Unique identifier for the worksheet instance.\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        self.action_performed = False\n        self.result = None\n        self.random_id = 0\n\n        # Since the user doesn't initialize the fields, we need to do it for them\n        # first, we go over all the GenieFields in the class\n        # then, we create a params dict with all the fields in the GenieField\n        # finally, we check if the user has passed in a value for any GenieField\n        # if they have, we set the value of the GenieField to the value passed in\n        # and then we set the attribute of the class to the GenieField\n        for attr_name, attr_value in self.__class__.__dict__.items():\n            if isinstance(attr_value, GenieField):\n                params = {\n                    field: getattr(attr_value, field)\n                    for field in dir(attr_value)\n                    if not field.startswith(\"__\")\n                }\n                # if the user has passed in a value for the GenieField, set it\n                # eg. Book(booking_id=125)\n                # then the user has passed in a value for booking_id\n                # attr_name is all the GenieFields in the class\n                # kwargs is all the values the user has passed in (like booking_id=125)\n                if attr_name in kwargs:\n                    params[\"value\"] = kwargs[attr_name]\n                    if params[\"value\"] == \"\":\n                        params[\"value\"] = None\n\n                if \"optional\" in params:\n                    if not params[\"optional\"] and params[\"value\"] == \"NA\":\n                        params[\"value\"] = None\n\n                setattr(self, attr_name, GenieField(**params))\n\n    def perform_action(self, bot: GenieRuntime, local_context: GenieContext):\n        \"\"\"Perform the action associated with this worksheet if it hasn't been performed yet.\n\n        Args:\n            bot (GenieRuntime): The bot instance.\n            local_context (GenieContext): The local context for the action.\n\n        Returns:\n            list: A list of actions performed.\n        \"\"\"\n\n        if self.action_performed:\n            return []\n        acts = []\n\n        if self.actions is None or len(self.actions) == 0:\n            return acts\n\n        acts = self.actions.perform(self, bot, local_context)\n        self.action_performed = True\n\n        return acts\n\n    def is_complete(self, bot: GenieRuntime, context: GenieContext) -&gt; bool:\n        \"\"\"Check if the worksheet is complete by evaluating all fields.\n\n        Args:\n            bot (GenieRuntime): The bot instance.\n            context (GenieContext): The context for evaluation.\n\n        Returns:\n            bool: True if the worksheet is complete, False otherwise.\n        \"\"\"\n\n        for field in get_genie_fields_from_ws(self):\n            if eval_predicates(field.predicate, self, bot, context):\n                if isinstance(field.value, GenieWorksheet):\n                    if not field.value.is_complete(bot, context):\n                        return False\n                if (field.value is None or field.value == \"\") and not field.optional:\n                    return False\n\n                if field.requires_confirmation and not field.confirmed:\n                    return False\n        return True\n\n    def __repr__(self):\n        parameters = []\n        for field in get_genie_fields_from_ws(self):\n            if isinstance(field, GenieField):\n                parameters.append(field)\n\n        return f\"{self.__class__.__name__}({', '.join([repr(param) for param in parameters])})\"\n\n    def schema_without_type(self, context: GenieContext) -&gt; str:\n        \"\"\"Generate a schema representation of the worksheet without type information.\n\n        Args:\n            context (GenieContext): The context for the worksheet.\n\n        Returns:\n            str: The schema representation without type.\n        \"\"\"\n        parameters = []\n        for field in get_genie_fields_from_ws(self):\n            if field.value is None:\n                continue\n            if isinstance(field.value, str):\n                if field.value == \"\":\n                    continue\n                if field.confirmed:\n                    parameters.append(f\"{field.name} = confirmed({repr(field.value)})\")\n                else:\n                    parameters.append(f\"{field.name} = {repr(field.value)}\")\n            elif isinstance(field._value, GenieResult):\n                if isinstance(field.value, list):\n                    parent_var_name = None\n                    indices = []\n\n                    result_strings = []\n                    for val in field.value:\n                        if isinstance(val, GenieType):\n                            var_name, idx = find_list_variable(val, context)\n                            if var_name is None and idx is None:\n                                result_strings.append(val)\n                            else:\n                                if (\n                                    parent_var_name is not None\n                                    and parent_var_name != var_name\n                                ):\n                                    logger.error(\n                                        \"Cannot handle multiple list variables in the same answer\"\n                                    )\n                                parent_var_name = var_name  # Ignoring any potential multiple list variables\n\n                                indices.append(idx)\n                        else:\n                            result_strings.append(val)\n\n                    if parent_var_name:\n                        indices_str = []\n                        for idx in indices:\n                            indices_str.append(f\"{parent_var_name}[{idx}]\")\n\n                        result_strings = \"[\" + \", \".join(indices_str) + \"]\"\n                if len(result_strings):\n                    parameters.append(f\"{field.name} = {str(result_strings)}\")\n                else:\n                    # TODO: Instead of getting the var_name from paren, we should search and find the same type of answer from the context\n                    parameters.append(f\"{field.name} = {repr(field.value)}\")\n            elif isinstance(field.value, GenieType):\n                # This should be straight forward, same as the one above\n                var_name, idx = find_list_variable(field.value, context)\n                if var_name is None and idx is None:\n                    if field.confirmed:\n                        parameters.append(\n                            f\"{field.name} = confirmed({repr(field.value)})\"\n                        )\n                    else:\n                        parameters.append(f\"{field.name} = {repr(field.value)}\")\n                else:\n                    if field.confirmed:\n                        parameters.append(\n                            f\"{field.name} = confirmed({var_name}[{idx}])\"\n                        )\n                    else:\n                        parameters.append(f\"{field.name} = {var_name}[{idx}]\")\n            else:\n                var_name = get_variable_name(field.value, context)\n\n                if isinstance(var_name, str):\n                    if field.confirmed:\n                        parameters.append(f\"{field.name} = confirmed({repr(var_name)})\")\n                    else:\n                        parameters.append(f\"{field.name} = {var_name}\")\n                else:\n                    val = field.schema_without_type(no_none=True)\n                    if val:\n                        parameters.append(val)\n\n        return f\"{self.__class__.__name__}({', '.join([str(param) for param in parameters])})\"\n\n    def execute(self, bot: GenieRuntime, local_context: GenieContext):\n        \"\"\"Execute the actions associated with this worksheet.\n\n        Args:\n            bot (GenieRuntime): The bot instance.\n            local_context (GenieContext): The local context for execution.\n        \"\"\"\n        parameters = []\n        for f in get_genie_fields_from_ws(self):\n            parameters.append(f.name + \"= \" + \"self.\" + f.name)\n\n        code = self.backend_api + \"(\" + \", \".join(parameters) + \")\"\n        var_name = get_variable_name(self, local_context)\n        self.result = GenieResult(\n            execute_query(code, self, bot, local_context), self, var_name\n        )\n        self.bot.context.agent_acts.add(\n            ReportAgentAct(code, self.result, None, var_name + \".result\")\n        )\n        self.action_performed = True\n        # local_context.context[\n        #     f\"{generate_var_name(self.__class__.__name__)}_result\"\n        # ] = self.result\n\n    # This might give me some troubles since we are already using .value at certain places.\n    # def __getattr__(self, name):\n    #     for field in get_genie_fields_from_ws(self):\n    #         if field.name == name:\n    #             return field.value\n\n    @classmethod\n    def new(cls, initialize_from_dict: dict):\n        return cls(**initialize_from_dict)\n\n    def __setattr__(self, name, value):\n        if hasattr(self, name):\n            attr = getattr(self, name)\n            if isinstance(attr, GenieField):\n                self.action_performed = False\n\n                # if the worksheet has a confirm type field which is set to true\n                # upon update, we need to set it to false\n                for field in get_genie_fields_from_ws(self):\n                    if field.slottype == \"confirm\" and field.value is True:\n                        field.value = False\n\n                if isinstance(value, GenieField) and value.name == name:\n                    value.parent = self\n                    super().__setattr__(name, value)\n                    return\n\n                if isinstance(value, GenieValue):\n                    attr.value = value\n                else:\n                    attr.value = GenieValue(value)\n                return\n        super().__setattr__(name, value)\n\n    def ask(self):\n        \"\"\"This is a hack for when the user asks the system to ask a question from a different worksheet.\n\n        We increment the random_id to make sure that the ws is updated and the system with ask the question naturally\n        \"\"\"\n        logger.info(f\"Ask: {self}\")\n        self.random_id += 1\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet.action_performed","title":"action_performed  <code>instance-attribute</code>","text":"<pre><code>action_performed = False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet.result","title":"result  <code>instance-attribute</code>","text":"<pre><code>result = None\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet.random_id","title":"random_id  <code>instance-attribute</code>","text":"<pre><code>random_id = 0\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet.__init__","title":"__init__","text":"<pre><code>__init__(**kwargs)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(self, **kwargs):\n    self.action_performed = False\n    self.result = None\n    self.random_id = 0\n\n    # Since the user doesn't initialize the fields, we need to do it for them\n    # first, we go over all the GenieFields in the class\n    # then, we create a params dict with all the fields in the GenieField\n    # finally, we check if the user has passed in a value for any GenieField\n    # if they have, we set the value of the GenieField to the value passed in\n    # and then we set the attribute of the class to the GenieField\n    for attr_name, attr_value in self.__class__.__dict__.items():\n        if isinstance(attr_value, GenieField):\n            params = {\n                field: getattr(attr_value, field)\n                for field in dir(attr_value)\n                if not field.startswith(\"__\")\n            }\n            # if the user has passed in a value for the GenieField, set it\n            # eg. Book(booking_id=125)\n            # then the user has passed in a value for booking_id\n            # attr_name is all the GenieFields in the class\n            # kwargs is all the values the user has passed in (like booking_id=125)\n            if attr_name in kwargs:\n                params[\"value\"] = kwargs[attr_name]\n                if params[\"value\"] == \"\":\n                    params[\"value\"] = None\n\n            if \"optional\" in params:\n                if not params[\"optional\"] and params[\"value\"] == \"NA\":\n                    params[\"value\"] = None\n\n            setattr(self, attr_name, GenieField(**params))\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet.perform_action","title":"perform_action","text":"<pre><code>perform_action(bot: GenieRuntime, local_context: GenieContext)\n</code></pre> <p>Perform the action associated with this worksheet if it hasn't been performed yet.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>local_context</code> <code>GenieContext</code> <p>The local context for the action.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of actions performed.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def perform_action(self, bot: GenieRuntime, local_context: GenieContext):\n    \"\"\"Perform the action associated with this worksheet if it hasn't been performed yet.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        local_context (GenieContext): The local context for the action.\n\n    Returns:\n        list: A list of actions performed.\n    \"\"\"\n\n    if self.action_performed:\n        return []\n    acts = []\n\n    if self.actions is None or len(self.actions) == 0:\n        return acts\n\n    acts = self.actions.perform(self, bot, local_context)\n    self.action_performed = True\n\n    return acts\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet.is_complete","title":"is_complete","text":"<pre><code>is_complete(bot: GenieRuntime, context: GenieContext) -&gt; bool\n</code></pre> <p>Check if the worksheet is complete by evaluating all fields.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>context</code> <code>GenieContext</code> <p>The context for evaluation.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the worksheet is complete, False otherwise.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def is_complete(self, bot: GenieRuntime, context: GenieContext) -&gt; bool:\n    \"\"\"Check if the worksheet is complete by evaluating all fields.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        context (GenieContext): The context for evaluation.\n\n    Returns:\n        bool: True if the worksheet is complete, False otherwise.\n    \"\"\"\n\n    for field in get_genie_fields_from_ws(self):\n        if eval_predicates(field.predicate, self, bot, context):\n            if isinstance(field.value, GenieWorksheet):\n                if not field.value.is_complete(bot, context):\n                    return False\n            if (field.value is None or field.value == \"\") and not field.optional:\n                return False\n\n            if field.requires_confirmation and not field.confirmed:\n                return False\n    return True\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __repr__(self):\n    parameters = []\n    for field in get_genie_fields_from_ws(self):\n        if isinstance(field, GenieField):\n            parameters.append(field)\n\n    return f\"{self.__class__.__name__}({', '.join([repr(param) for param in parameters])})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet.schema_without_type","title":"schema_without_type","text":"<pre><code>schema_without_type(context: GenieContext) -&gt; str\n</code></pre> <p>Generate a schema representation of the worksheet without type information.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>GenieContext</code> <p>The context for the worksheet.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The schema representation without type.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def schema_without_type(self, context: GenieContext) -&gt; str:\n    \"\"\"Generate a schema representation of the worksheet without type information.\n\n    Args:\n        context (GenieContext): The context for the worksheet.\n\n    Returns:\n        str: The schema representation without type.\n    \"\"\"\n    parameters = []\n    for field in get_genie_fields_from_ws(self):\n        if field.value is None:\n            continue\n        if isinstance(field.value, str):\n            if field.value == \"\":\n                continue\n            if field.confirmed:\n                parameters.append(f\"{field.name} = confirmed({repr(field.value)})\")\n            else:\n                parameters.append(f\"{field.name} = {repr(field.value)}\")\n        elif isinstance(field._value, GenieResult):\n            if isinstance(field.value, list):\n                parent_var_name = None\n                indices = []\n\n                result_strings = []\n                for val in field.value:\n                    if isinstance(val, GenieType):\n                        var_name, idx = find_list_variable(val, context)\n                        if var_name is None and idx is None:\n                            result_strings.append(val)\n                        else:\n                            if (\n                                parent_var_name is not None\n                                and parent_var_name != var_name\n                            ):\n                                logger.error(\n                                    \"Cannot handle multiple list variables in the same answer\"\n                                )\n                            parent_var_name = var_name  # Ignoring any potential multiple list variables\n\n                            indices.append(idx)\n                    else:\n                        result_strings.append(val)\n\n                if parent_var_name:\n                    indices_str = []\n                    for idx in indices:\n                        indices_str.append(f\"{parent_var_name}[{idx}]\")\n\n                    result_strings = \"[\" + \", \".join(indices_str) + \"]\"\n            if len(result_strings):\n                parameters.append(f\"{field.name} = {str(result_strings)}\")\n            else:\n                # TODO: Instead of getting the var_name from paren, we should search and find the same type of answer from the context\n                parameters.append(f\"{field.name} = {repr(field.value)}\")\n        elif isinstance(field.value, GenieType):\n            # This should be straight forward, same as the one above\n            var_name, idx = find_list_variable(field.value, context)\n            if var_name is None and idx is None:\n                if field.confirmed:\n                    parameters.append(\n                        f\"{field.name} = confirmed({repr(field.value)})\"\n                    )\n                else:\n                    parameters.append(f\"{field.name} = {repr(field.value)}\")\n            else:\n                if field.confirmed:\n                    parameters.append(\n                        f\"{field.name} = confirmed({var_name}[{idx}])\"\n                    )\n                else:\n                    parameters.append(f\"{field.name} = {var_name}[{idx}]\")\n        else:\n            var_name = get_variable_name(field.value, context)\n\n            if isinstance(var_name, str):\n                if field.confirmed:\n                    parameters.append(f\"{field.name} = confirmed({repr(var_name)})\")\n                else:\n                    parameters.append(f\"{field.name} = {var_name}\")\n            else:\n                val = field.schema_without_type(no_none=True)\n                if val:\n                    parameters.append(val)\n\n    return f\"{self.__class__.__name__}({', '.join([str(param) for param in parameters])})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet.execute","title":"execute","text":"<pre><code>execute(bot: GenieRuntime, local_context: GenieContext)\n</code></pre> <p>Execute the actions associated with this worksheet.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>local_context</code> <code>GenieContext</code> <p>The local context for execution.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def execute(self, bot: GenieRuntime, local_context: GenieContext):\n    \"\"\"Execute the actions associated with this worksheet.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        local_context (GenieContext): The local context for execution.\n    \"\"\"\n    parameters = []\n    for f in get_genie_fields_from_ws(self):\n        parameters.append(f.name + \"= \" + \"self.\" + f.name)\n\n    code = self.backend_api + \"(\" + \", \".join(parameters) + \")\"\n    var_name = get_variable_name(self, local_context)\n    self.result = GenieResult(\n        execute_query(code, self, bot, local_context), self, var_name\n    )\n    self.bot.context.agent_acts.add(\n        ReportAgentAct(code, self.result, None, var_name + \".result\")\n    )\n    self.action_performed = True\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(initialize_from_dict: dict)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>@classmethod\ndef new(cls, initialize_from_dict: dict):\n    return cls(**initialize_from_dict)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet.__setattr__","title":"__setattr__","text":"<pre><code>__setattr__(name, value)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __setattr__(self, name, value):\n    if hasattr(self, name):\n        attr = getattr(self, name)\n        if isinstance(attr, GenieField):\n            self.action_performed = False\n\n            # if the worksheet has a confirm type field which is set to true\n            # upon update, we need to set it to false\n            for field in get_genie_fields_from_ws(self):\n                if field.slottype == \"confirm\" and field.value is True:\n                    field.value = False\n\n            if isinstance(value, GenieField) and value.name == name:\n                value.parent = self\n                super().__setattr__(name, value)\n                return\n\n            if isinstance(value, GenieValue):\n                attr.value = value\n            else:\n                attr.value = GenieValue(value)\n            return\n    super().__setattr__(name, value)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieWorksheet.ask","title":"ask","text":"<pre><code>ask()\n</code></pre> <p>This is a hack for when the user asks the system to ask a question from a different worksheet.</p> <p>We increment the random_id to make sure that the ws is updated and the system with ask the question naturally</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def ask(self):\n    \"\"\"This is a hack for when the user asks the system to ask a question from a different worksheet.\n\n    We increment the random_id to make sure that the ws is updated and the system with ask the question naturally\n    \"\"\"\n    logger.info(f\"Ask: {self}\")\n    self.random_id += 1\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType","title":"GenieType","text":"<p>               Bases: <code>GenieWorksheet</code></p> <p>Base class for Genie type definitions.</p> <p>This class extends GenieWorksheet to provide type-specific functionality and validation. It's used to define custom types in the Genie system.</p> <p>Attributes:</p> Name Type Description <code>_parent</code> <p>Parent object reference.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class GenieType(GenieWorksheet):\n    \"\"\"Base class for Genie type definitions.\n\n    This class extends GenieWorksheet to provide type-specific functionality\n    and validation. It's used to define custom types in the Genie system.\n\n    Attributes:\n        _parent: Parent object reference.\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._parent = None\n\n    def is_complete(self, *args, **kwargs):\n        for field in get_genie_fields_from_ws(self):\n            if field.primary_key and field.value is not None:\n                return True\n\n        return False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.GenieType.action_performed","title":"action_performed  <code>instance-attribute</code>","text":"<pre><code>action_performed = False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType.result","title":"result  <code>instance-attribute</code>","text":"<pre><code>result = None\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType.random_id","title":"random_id  <code>instance-attribute</code>","text":"<pre><code>random_id = 0\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType._parent","title":"_parent  <code>instance-attribute</code>","text":"<pre><code>_parent = None\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.GenieType.perform_action","title":"perform_action","text":"<pre><code>perform_action(bot: GenieRuntime, local_context: GenieContext)\n</code></pre> <p>Perform the action associated with this worksheet if it hasn't been performed yet.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>local_context</code> <code>GenieContext</code> <p>The local context for the action.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of actions performed.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def perform_action(self, bot: GenieRuntime, local_context: GenieContext):\n    \"\"\"Perform the action associated with this worksheet if it hasn't been performed yet.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        local_context (GenieContext): The local context for the action.\n\n    Returns:\n        list: A list of actions performed.\n    \"\"\"\n\n    if self.action_performed:\n        return []\n    acts = []\n\n    if self.actions is None or len(self.actions) == 0:\n        return acts\n\n    acts = self.actions.perform(self, bot, local_context)\n    self.action_performed = True\n\n    return acts\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __repr__(self):\n    parameters = []\n    for field in get_genie_fields_from_ws(self):\n        if isinstance(field, GenieField):\n            parameters.append(field)\n\n    return f\"{self.__class__.__name__}({', '.join([repr(param) for param in parameters])})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType.schema_without_type","title":"schema_without_type","text":"<pre><code>schema_without_type(context: GenieContext) -&gt; str\n</code></pre> <p>Generate a schema representation of the worksheet without type information.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>GenieContext</code> <p>The context for the worksheet.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The schema representation without type.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def schema_without_type(self, context: GenieContext) -&gt; str:\n    \"\"\"Generate a schema representation of the worksheet without type information.\n\n    Args:\n        context (GenieContext): The context for the worksheet.\n\n    Returns:\n        str: The schema representation without type.\n    \"\"\"\n    parameters = []\n    for field in get_genie_fields_from_ws(self):\n        if field.value is None:\n            continue\n        if isinstance(field.value, str):\n            if field.value == \"\":\n                continue\n            if field.confirmed:\n                parameters.append(f\"{field.name} = confirmed({repr(field.value)})\")\n            else:\n                parameters.append(f\"{field.name} = {repr(field.value)}\")\n        elif isinstance(field._value, GenieResult):\n            if isinstance(field.value, list):\n                parent_var_name = None\n                indices = []\n\n                result_strings = []\n                for val in field.value:\n                    if isinstance(val, GenieType):\n                        var_name, idx = find_list_variable(val, context)\n                        if var_name is None and idx is None:\n                            result_strings.append(val)\n                        else:\n                            if (\n                                parent_var_name is not None\n                                and parent_var_name != var_name\n                            ):\n                                logger.error(\n                                    \"Cannot handle multiple list variables in the same answer\"\n                                )\n                            parent_var_name = var_name  # Ignoring any potential multiple list variables\n\n                            indices.append(idx)\n                    else:\n                        result_strings.append(val)\n\n                if parent_var_name:\n                    indices_str = []\n                    for idx in indices:\n                        indices_str.append(f\"{parent_var_name}[{idx}]\")\n\n                    result_strings = \"[\" + \", \".join(indices_str) + \"]\"\n            if len(result_strings):\n                parameters.append(f\"{field.name} = {str(result_strings)}\")\n            else:\n                # TODO: Instead of getting the var_name from paren, we should search and find the same type of answer from the context\n                parameters.append(f\"{field.name} = {repr(field.value)}\")\n        elif isinstance(field.value, GenieType):\n            # This should be straight forward, same as the one above\n            var_name, idx = find_list_variable(field.value, context)\n            if var_name is None and idx is None:\n                if field.confirmed:\n                    parameters.append(\n                        f\"{field.name} = confirmed({repr(field.value)})\"\n                    )\n                else:\n                    parameters.append(f\"{field.name} = {repr(field.value)}\")\n            else:\n                if field.confirmed:\n                    parameters.append(\n                        f\"{field.name} = confirmed({var_name}[{idx}])\"\n                    )\n                else:\n                    parameters.append(f\"{field.name} = {var_name}[{idx}]\")\n        else:\n            var_name = get_variable_name(field.value, context)\n\n            if isinstance(var_name, str):\n                if field.confirmed:\n                    parameters.append(f\"{field.name} = confirmed({repr(var_name)})\")\n                else:\n                    parameters.append(f\"{field.name} = {var_name}\")\n            else:\n                val = field.schema_without_type(no_none=True)\n                if val:\n                    parameters.append(val)\n\n    return f\"{self.__class__.__name__}({', '.join([str(param) for param in parameters])})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType.execute","title":"execute","text":"<pre><code>execute(bot: GenieRuntime, local_context: GenieContext)\n</code></pre> <p>Execute the actions associated with this worksheet.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>local_context</code> <code>GenieContext</code> <p>The local context for execution.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def execute(self, bot: GenieRuntime, local_context: GenieContext):\n    \"\"\"Execute the actions associated with this worksheet.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        local_context (GenieContext): The local context for execution.\n    \"\"\"\n    parameters = []\n    for f in get_genie_fields_from_ws(self):\n        parameters.append(f.name + \"= \" + \"self.\" + f.name)\n\n    code = self.backend_api + \"(\" + \", \".join(parameters) + \")\"\n    var_name = get_variable_name(self, local_context)\n    self.result = GenieResult(\n        execute_query(code, self, bot, local_context), self, var_name\n    )\n    self.bot.context.agent_acts.add(\n        ReportAgentAct(code, self.result, None, var_name + \".result\")\n    )\n    self.action_performed = True\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(initialize_from_dict: dict)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>@classmethod\ndef new(cls, initialize_from_dict: dict):\n    return cls(**initialize_from_dict)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType.__setattr__","title":"__setattr__","text":"<pre><code>__setattr__(name, value)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __setattr__(self, name, value):\n    if hasattr(self, name):\n        attr = getattr(self, name)\n        if isinstance(attr, GenieField):\n            self.action_performed = False\n\n            # if the worksheet has a confirm type field which is set to true\n            # upon update, we need to set it to false\n            for field in get_genie_fields_from_ws(self):\n                if field.slottype == \"confirm\" and field.value is True:\n                    field.value = False\n\n            if isinstance(value, GenieField) and value.name == name:\n                value.parent = self\n                super().__setattr__(name, value)\n                return\n\n            if isinstance(value, GenieValue):\n                attr.value = value\n            else:\n                attr.value = GenieValue(value)\n            return\n    super().__setattr__(name, value)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType.ask","title":"ask","text":"<pre><code>ask()\n</code></pre> <p>This is a hack for when the user asks the system to ask a question from a different worksheet.</p> <p>We increment the random_id to make sure that the ws is updated and the system with ask the question naturally</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def ask(self):\n    \"\"\"This is a hack for when the user asks the system to ask a question from a different worksheet.\n\n    We increment the random_id to make sure that the ws is updated and the system with ask the question naturally\n    \"\"\"\n    logger.info(f\"Ask: {self}\")\n    self.random_id += 1\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType.__init__","title":"__init__","text":"<pre><code>__init__(**kwargs)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(self, **kwargs):\n    super().__init__(**kwargs)\n    self._parent = None\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieType.is_complete","title":"is_complete","text":"<pre><code>is_complete(*args, **kwargs)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def is_complete(self, *args, **kwargs):\n    for field in get_genie_fields_from_ws(self):\n        if field.primary_key and field.value is not None:\n            return True\n\n    return False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieDB","title":"GenieDB","text":"<p>               Bases: <code>GenieWorksheet</code></p> <p>Base class for Genie database models.</p> <p>This class extends GenieWorksheet to provide database-specific functionality and schema management.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class GenieDB(GenieWorksheet):\n    \"\"\"Base class for Genie database models.\n\n    This class extends GenieWorksheet to provide database-specific functionality\n    and schema management.\n    \"\"\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieDB-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.GenieDB.action_performed","title":"action_performed  <code>instance-attribute</code>","text":"<pre><code>action_performed = False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieDB.result","title":"result  <code>instance-attribute</code>","text":"<pre><code>result = None\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieDB.random_id","title":"random_id  <code>instance-attribute</code>","text":"<pre><code>random_id = 0\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieDB-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.GenieDB.__init__","title":"__init__","text":"<pre><code>__init__(**kwargs)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(self, **kwargs):\n    self.action_performed = False\n    self.result = None\n    self.random_id = 0\n\n    # Since the user doesn't initialize the fields, we need to do it for them\n    # first, we go over all the GenieFields in the class\n    # then, we create a params dict with all the fields in the GenieField\n    # finally, we check if the user has passed in a value for any GenieField\n    # if they have, we set the value of the GenieField to the value passed in\n    # and then we set the attribute of the class to the GenieField\n    for attr_name, attr_value in self.__class__.__dict__.items():\n        if isinstance(attr_value, GenieField):\n            params = {\n                field: getattr(attr_value, field)\n                for field in dir(attr_value)\n                if not field.startswith(\"__\")\n            }\n            # if the user has passed in a value for the GenieField, set it\n            # eg. Book(booking_id=125)\n            # then the user has passed in a value for booking_id\n            # attr_name is all the GenieFields in the class\n            # kwargs is all the values the user has passed in (like booking_id=125)\n            if attr_name in kwargs:\n                params[\"value\"] = kwargs[attr_name]\n                if params[\"value\"] == \"\":\n                    params[\"value\"] = None\n\n            if \"optional\" in params:\n                if not params[\"optional\"] and params[\"value\"] == \"NA\":\n                    params[\"value\"] = None\n\n            setattr(self, attr_name, GenieField(**params))\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieDB.perform_action","title":"perform_action","text":"<pre><code>perform_action(bot: GenieRuntime, local_context: GenieContext)\n</code></pre> <p>Perform the action associated with this worksheet if it hasn't been performed yet.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>local_context</code> <code>GenieContext</code> <p>The local context for the action.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of actions performed.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def perform_action(self, bot: GenieRuntime, local_context: GenieContext):\n    \"\"\"Perform the action associated with this worksheet if it hasn't been performed yet.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        local_context (GenieContext): The local context for the action.\n\n    Returns:\n        list: A list of actions performed.\n    \"\"\"\n\n    if self.action_performed:\n        return []\n    acts = []\n\n    if self.actions is None or len(self.actions) == 0:\n        return acts\n\n    acts = self.actions.perform(self, bot, local_context)\n    self.action_performed = True\n\n    return acts\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieDB.is_complete","title":"is_complete","text":"<pre><code>is_complete(bot: GenieRuntime, context: GenieContext) -&gt; bool\n</code></pre> <p>Check if the worksheet is complete by evaluating all fields.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>context</code> <code>GenieContext</code> <p>The context for evaluation.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the worksheet is complete, False otherwise.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def is_complete(self, bot: GenieRuntime, context: GenieContext) -&gt; bool:\n    \"\"\"Check if the worksheet is complete by evaluating all fields.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        context (GenieContext): The context for evaluation.\n\n    Returns:\n        bool: True if the worksheet is complete, False otherwise.\n    \"\"\"\n\n    for field in get_genie_fields_from_ws(self):\n        if eval_predicates(field.predicate, self, bot, context):\n            if isinstance(field.value, GenieWorksheet):\n                if not field.value.is_complete(bot, context):\n                    return False\n            if (field.value is None or field.value == \"\") and not field.optional:\n                return False\n\n            if field.requires_confirmation and not field.confirmed:\n                return False\n    return True\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieDB.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __repr__(self):\n    parameters = []\n    for field in get_genie_fields_from_ws(self):\n        if isinstance(field, GenieField):\n            parameters.append(field)\n\n    return f\"{self.__class__.__name__}({', '.join([repr(param) for param in parameters])})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieDB.schema_without_type","title":"schema_without_type","text":"<pre><code>schema_without_type(context: GenieContext) -&gt; str\n</code></pre> <p>Generate a schema representation of the worksheet without type information.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>GenieContext</code> <p>The context for the worksheet.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The schema representation without type.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def schema_without_type(self, context: GenieContext) -&gt; str:\n    \"\"\"Generate a schema representation of the worksheet without type information.\n\n    Args:\n        context (GenieContext): The context for the worksheet.\n\n    Returns:\n        str: The schema representation without type.\n    \"\"\"\n    parameters = []\n    for field in get_genie_fields_from_ws(self):\n        if field.value is None:\n            continue\n        if isinstance(field.value, str):\n            if field.value == \"\":\n                continue\n            if field.confirmed:\n                parameters.append(f\"{field.name} = confirmed({repr(field.value)})\")\n            else:\n                parameters.append(f\"{field.name} = {repr(field.value)}\")\n        elif isinstance(field._value, GenieResult):\n            if isinstance(field.value, list):\n                parent_var_name = None\n                indices = []\n\n                result_strings = []\n                for val in field.value:\n                    if isinstance(val, GenieType):\n                        var_name, idx = find_list_variable(val, context)\n                        if var_name is None and idx is None:\n                            result_strings.append(val)\n                        else:\n                            if (\n                                parent_var_name is not None\n                                and parent_var_name != var_name\n                            ):\n                                logger.error(\n                                    \"Cannot handle multiple list variables in the same answer\"\n                                )\n                            parent_var_name = var_name  # Ignoring any potential multiple list variables\n\n                            indices.append(idx)\n                    else:\n                        result_strings.append(val)\n\n                if parent_var_name:\n                    indices_str = []\n                    for idx in indices:\n                        indices_str.append(f\"{parent_var_name}[{idx}]\")\n\n                    result_strings = \"[\" + \", \".join(indices_str) + \"]\"\n            if len(result_strings):\n                parameters.append(f\"{field.name} = {str(result_strings)}\")\n            else:\n                # TODO: Instead of getting the var_name from paren, we should search and find the same type of answer from the context\n                parameters.append(f\"{field.name} = {repr(field.value)}\")\n        elif isinstance(field.value, GenieType):\n            # This should be straight forward, same as the one above\n            var_name, idx = find_list_variable(field.value, context)\n            if var_name is None and idx is None:\n                if field.confirmed:\n                    parameters.append(\n                        f\"{field.name} = confirmed({repr(field.value)})\"\n                    )\n                else:\n                    parameters.append(f\"{field.name} = {repr(field.value)}\")\n            else:\n                if field.confirmed:\n                    parameters.append(\n                        f\"{field.name} = confirmed({var_name}[{idx}])\"\n                    )\n                else:\n                    parameters.append(f\"{field.name} = {var_name}[{idx}]\")\n        else:\n            var_name = get_variable_name(field.value, context)\n\n            if isinstance(var_name, str):\n                if field.confirmed:\n                    parameters.append(f\"{field.name} = confirmed({repr(var_name)})\")\n                else:\n                    parameters.append(f\"{field.name} = {var_name}\")\n            else:\n                val = field.schema_without_type(no_none=True)\n                if val:\n                    parameters.append(val)\n\n    return f\"{self.__class__.__name__}({', '.join([str(param) for param in parameters])})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieDB.execute","title":"execute","text":"<pre><code>execute(bot: GenieRuntime, local_context: GenieContext)\n</code></pre> <p>Execute the actions associated with this worksheet.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>local_context</code> <code>GenieContext</code> <p>The local context for execution.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def execute(self, bot: GenieRuntime, local_context: GenieContext):\n    \"\"\"Execute the actions associated with this worksheet.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        local_context (GenieContext): The local context for execution.\n    \"\"\"\n    parameters = []\n    for f in get_genie_fields_from_ws(self):\n        parameters.append(f.name + \"= \" + \"self.\" + f.name)\n\n    code = self.backend_api + \"(\" + \", \".join(parameters) + \")\"\n    var_name = get_variable_name(self, local_context)\n    self.result = GenieResult(\n        execute_query(code, self, bot, local_context), self, var_name\n    )\n    self.bot.context.agent_acts.add(\n        ReportAgentAct(code, self.result, None, var_name + \".result\")\n    )\n    self.action_performed = True\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieDB.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(initialize_from_dict: dict)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>@classmethod\ndef new(cls, initialize_from_dict: dict):\n    return cls(**initialize_from_dict)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieDB.__setattr__","title":"__setattr__","text":"<pre><code>__setattr__(name, value)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __setattr__(self, name, value):\n    if hasattr(self, name):\n        attr = getattr(self, name)\n        if isinstance(attr, GenieField):\n            self.action_performed = False\n\n            # if the worksheet has a confirm type field which is set to true\n            # upon update, we need to set it to false\n            for field in get_genie_fields_from_ws(self):\n                if field.slottype == \"confirm\" and field.value is True:\n                    field.value = False\n\n            if isinstance(value, GenieField) and value.name == name:\n                value.parent = self\n                super().__setattr__(name, value)\n                return\n\n            if isinstance(value, GenieValue):\n                attr.value = value\n            else:\n                attr.value = GenieValue(value)\n            return\n    super().__setattr__(name, value)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieDB.ask","title":"ask","text":"<pre><code>ask()\n</code></pre> <p>This is a hack for when the user asks the system to ask a question from a different worksheet.</p> <p>We increment the random_id to make sure that the ws is updated and the system with ask the question naturally</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def ask(self):\n    \"\"\"This is a hack for when the user asks the system to ask a question from a different worksheet.\n\n    We increment the random_id to make sure that the ws is updated and the system with ask the question naturally\n    \"\"\"\n    logger.info(f\"Ask: {self}\")\n    self.random_id += 1\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer","title":"Answer","text":"<p>               Bases: <code>GenieWorksheet</code></p> <p>Class representing an answer in the Genie system.</p> <p>This class handles query execution, result management, and parameter tracking for answers to user queries.</p> <p>Attributes:</p> Name Type Description <code>query</code> <code>GenieField</code> <p>The query to execute.</p> <code>actions</code> <p>Associated actions.</p> <code>result</code> <p>Query execution result.</p> <code>tables</code> <p>Related database tables.</p> <code>potential_outputs</code> <p>Possible output types.</p> <code>nl_query</code> <p>Natural language query.</p> <code>param_names</code> <p>Required parameter names.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class Answer(GenieWorksheet):\n    \"\"\"Class representing an answer in the Genie system.\n\n    This class handles query execution, result management, and parameter tracking\n    for answers to user queries.\n\n    Attributes:\n        query (GenieField): The query to execute.\n        actions: Associated actions.\n        result: Query execution result.\n        tables: Related database tables.\n        potential_outputs: Possible output types.\n        nl_query: Natural language query.\n        param_names: Required parameter names.\n    \"\"\"\n\n    def __init__(self, query, required_params, tables, nl_query):\n        self.query = GenieField(\"str\", \"query\", value=query)\n        self.actions = Action(\"&gt;suql_runner(self.query.value, self.required_columns)\")\n        self.result = None\n        self.tables = tables\n        self.potential_outputs = []\n        self.nl_query = nl_query\n        self.param_names = []\n        self.action_performed = False\n\n        for table in self.tables:\n            self.potential_outputs.extend(self.bot.context.context[table].outputs)\n\n        self.required_columns = [\n            field.name\n            for table in self.tables\n            for field in get_genie_fields_from_ws(self.bot.context.context[table])\n        ]\n\n        # Create required params and add them to ordered attributes\n        _ordered_attributes = [\"query\"]\n        if required_params is not None:\n            for db_name, params in required_params.items():\n                for param in params:\n                    setattr(\n                        self,\n                        f\"{db_name}_{param}\",\n                        GenieField(\"str\", f\"{db_name}.{param}\", value=None),\n                    )\n                    self.param_names.append(f\"{db_name}_{param}\")\n                    _ordered_attributes.append(f\"{db_name}_{param}\")\n\n        self._ordered_attributes = _ordered_attributes\n\n    def execute(self, bot: GenieRuntime, local_context: GenieContext):\n        \"\"\"Execute the actions associated with this answer.\n\n        Args:\n            bot (GenieRuntime): The bot instance.\n            local_context (GenieContext): The local context for the execution.\n        \"\"\"\n        if self.action_performed:\n            return\n        results = execute_query(self.actions.action, self, bot, local_context)\n        self.action_performed = True\n        if results is None:\n            results = []\n\n        # Get more information about the fields\n        ws, field_name, more_field_info_result = self.more_field_info_query(bot)\n        logger.info(f\"More Field Info: {more_field_info_result}\")\n        logger.info(f\"Results: {results}\")\n\n        # Earlier we had a mechanism to check if the user is asking to execute a query or asking for more information\n        # about the field. Hence we have output_idx.\n        # For now we are going to assume that the user is asking for the output of the query\n        output_idx = [1]\n\n        if len(output_idx):\n            output_idx = int(output_idx[0])\n            if output_idx == 1:\n                # Check if the output type is in the results\n                output = self.output_in_result(results)\n                var_name = get_variable_name(self, local_context)\n                self.result = GenieResult(output, self, var_name)\n\n                # Report the agent act\n                self.bot.context.agent_acts.add(\n                    ReportAgentAct(\n                        self.query, self.result, var_name, var_name + \".result\"\n                    )\n                )\n                for i, _output in enumerate(output):\n                    if isinstance(_output, GenieWorksheet):\n                        # add the output to the local context\n                        local_context.set(\n                            f\"{camel_to_snake(_output.__class__.__name__)}\", _output\n                        )\n            elif output_idx == 2:\n                # We don't use this for now but we can use it to ask for more information\n                var_name = get_variable_name(self, local_context)\n                self.result = GenieResult(more_field_info_result, self, var_name)\n                self.bot.context.agent_acts.add(\n                    ReportAgentAct(\n                        f\"AskClarificationQuestion({ws.__class__.__name__}, {field_name.name})\",\n                        self.result,\n                        message_var_name=var_name + \".result\",\n                    )\n                )\n\n        # for i, _output in enumerate(output):\n        #     local_context.context[f\"__{var_name}_result_{i}\"] = _output\n\n    def more_field_info_query(self, bot: GenieRuntime):\n        if bot.dlg_history is None or len(bot.dlg_history) == 0:\n            return None, None, None\n        if bot.dlg_history[-1].system_action is None:\n            return None, None, None\n        acts = bot.dlg_history[-1].system_action.actions\n        for act in acts:\n            if isinstance(act, AskAgentAct):\n                more_field_info = generate_clarification(act.ws, act.field.name)\n                if more_field_info:\n                    return act.ws, act.field, more_field_info\n\n        return None, None, None\n\n    def output_in_result(self, results: list):\n        \"\"\"Check if the output type is in the results.\"\"\"\n        if len(self.potential_outputs):\n            output_results = []\n            for result in results:\n                for output_type in self.potential_outputs:\n                    found_primary_key = False\n                    for field in get_genie_fields_from_ws(output_type):\n                        if field.primary_key and field.name in result:\n                            output_results.append(output_type(**result))\n                            found_primary_key = True\n                            break\n                    if not found_primary_key:\n                        output_results.append(result)\n\n            return output_results\n        return results\n\n    def update(self, query, unfilled_params, tables, query_str):\n        \"\"\"Update the answer with new parameters and tables.\n\n        We are not using this method anymore, but we can keep it for reference.\"\"\"\n        logger.error(f\"Updating Answer: {query}, This has been deprecated\")\n        self.query.value = query\n        for param in self.param_names:\n            del self.__dict__[param]\n            self._ordered_attributes.remove(param)\n        self.param_names = []\n        self.required_columns = [\n            field.name\n            for table in tables\n            for field in get_genie_fields_from_ws(self.bot.context.context[table])\n        ]\n        self.tables = tables\n        self.potential_outputs = []\n        for table in self.tables:\n            self.potential_outputs.extend(self.bot.context.context[table].outputs)\n\n        if unfilled_params is not None:\n            for db_name, params in unfilled_params.items():\n                for param in params:\n                    setattr(\n                        self,\n                        f\"{db_name}_{param}\",\n                        GenieField(\"str\", f\"{db_name}.{param}\", value=None),\n                    )\n                    self.param_names.append(f\"{db_name}_{param}\")\n                    self._ordered_attributes.append(f\"{db_name}_{param}\")\n\n        self.nl_query = query_str\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.Answer.random_id","title":"random_id  <code>instance-attribute</code>","text":"<pre><code>random_id = 0\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.query","title":"query  <code>instance-attribute</code>","text":"<pre><code>query = GenieField('str', 'query', value=query)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.actions","title":"actions  <code>instance-attribute</code>","text":"<pre><code>actions = Action('&gt;suql_runner(self.query.value, self.required_columns)')\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.result","title":"result  <code>instance-attribute</code>","text":"<pre><code>result = None\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.tables","title":"tables  <code>instance-attribute</code>","text":"<pre><code>tables = tables\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.potential_outputs","title":"potential_outputs  <code>instance-attribute</code>","text":"<pre><code>potential_outputs = []\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.nl_query","title":"nl_query  <code>instance-attribute</code>","text":"<pre><code>nl_query = nl_query\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.param_names","title":"param_names  <code>instance-attribute</code>","text":"<pre><code>param_names = []\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.action_performed","title":"action_performed  <code>instance-attribute</code>","text":"<pre><code>action_performed = False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.required_columns","title":"required_columns  <code>instance-attribute</code>","text":"<pre><code>required_columns = [name for table in tables for field in get_genie_fields_from_ws(context[table])]\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer._ordered_attributes","title":"_ordered_attributes  <code>instance-attribute</code>","text":"<pre><code>_ordered_attributes = _ordered_attributes\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.Answer.perform_action","title":"perform_action","text":"<pre><code>perform_action(bot: GenieRuntime, local_context: GenieContext)\n</code></pre> <p>Perform the action associated with this worksheet if it hasn't been performed yet.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>local_context</code> <code>GenieContext</code> <p>The local context for the action.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of actions performed.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def perform_action(self, bot: GenieRuntime, local_context: GenieContext):\n    \"\"\"Perform the action associated with this worksheet if it hasn't been performed yet.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        local_context (GenieContext): The local context for the action.\n\n    Returns:\n        list: A list of actions performed.\n    \"\"\"\n\n    if self.action_performed:\n        return []\n    acts = []\n\n    if self.actions is None or len(self.actions) == 0:\n        return acts\n\n    acts = self.actions.perform(self, bot, local_context)\n    self.action_performed = True\n\n    return acts\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.is_complete","title":"is_complete","text":"<pre><code>is_complete(bot: GenieRuntime, context: GenieContext) -&gt; bool\n</code></pre> <p>Check if the worksheet is complete by evaluating all fields.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>context</code> <code>GenieContext</code> <p>The context for evaluation.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the worksheet is complete, False otherwise.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def is_complete(self, bot: GenieRuntime, context: GenieContext) -&gt; bool:\n    \"\"\"Check if the worksheet is complete by evaluating all fields.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        context (GenieContext): The context for evaluation.\n\n    Returns:\n        bool: True if the worksheet is complete, False otherwise.\n    \"\"\"\n\n    for field in get_genie_fields_from_ws(self):\n        if eval_predicates(field.predicate, self, bot, context):\n            if isinstance(field.value, GenieWorksheet):\n                if not field.value.is_complete(bot, context):\n                    return False\n            if (field.value is None or field.value == \"\") and not field.optional:\n                return False\n\n            if field.requires_confirmation and not field.confirmed:\n                return False\n    return True\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __repr__(self):\n    parameters = []\n    for field in get_genie_fields_from_ws(self):\n        if isinstance(field, GenieField):\n            parameters.append(field)\n\n    return f\"{self.__class__.__name__}({', '.join([repr(param) for param in parameters])})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.schema_without_type","title":"schema_without_type","text":"<pre><code>schema_without_type(context: GenieContext) -&gt; str\n</code></pre> <p>Generate a schema representation of the worksheet without type information.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>GenieContext</code> <p>The context for the worksheet.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The schema representation without type.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def schema_without_type(self, context: GenieContext) -&gt; str:\n    \"\"\"Generate a schema representation of the worksheet without type information.\n\n    Args:\n        context (GenieContext): The context for the worksheet.\n\n    Returns:\n        str: The schema representation without type.\n    \"\"\"\n    parameters = []\n    for field in get_genie_fields_from_ws(self):\n        if field.value is None:\n            continue\n        if isinstance(field.value, str):\n            if field.value == \"\":\n                continue\n            if field.confirmed:\n                parameters.append(f\"{field.name} = confirmed({repr(field.value)})\")\n            else:\n                parameters.append(f\"{field.name} = {repr(field.value)}\")\n        elif isinstance(field._value, GenieResult):\n            if isinstance(field.value, list):\n                parent_var_name = None\n                indices = []\n\n                result_strings = []\n                for val in field.value:\n                    if isinstance(val, GenieType):\n                        var_name, idx = find_list_variable(val, context)\n                        if var_name is None and idx is None:\n                            result_strings.append(val)\n                        else:\n                            if (\n                                parent_var_name is not None\n                                and parent_var_name != var_name\n                            ):\n                                logger.error(\n                                    \"Cannot handle multiple list variables in the same answer\"\n                                )\n                            parent_var_name = var_name  # Ignoring any potential multiple list variables\n\n                            indices.append(idx)\n                    else:\n                        result_strings.append(val)\n\n                if parent_var_name:\n                    indices_str = []\n                    for idx in indices:\n                        indices_str.append(f\"{parent_var_name}[{idx}]\")\n\n                    result_strings = \"[\" + \", \".join(indices_str) + \"]\"\n            if len(result_strings):\n                parameters.append(f\"{field.name} = {str(result_strings)}\")\n            else:\n                # TODO: Instead of getting the var_name from paren, we should search and find the same type of answer from the context\n                parameters.append(f\"{field.name} = {repr(field.value)}\")\n        elif isinstance(field.value, GenieType):\n            # This should be straight forward, same as the one above\n            var_name, idx = find_list_variable(field.value, context)\n            if var_name is None and idx is None:\n                if field.confirmed:\n                    parameters.append(\n                        f\"{field.name} = confirmed({repr(field.value)})\"\n                    )\n                else:\n                    parameters.append(f\"{field.name} = {repr(field.value)}\")\n            else:\n                if field.confirmed:\n                    parameters.append(\n                        f\"{field.name} = confirmed({var_name}[{idx}])\"\n                    )\n                else:\n                    parameters.append(f\"{field.name} = {var_name}[{idx}]\")\n        else:\n            var_name = get_variable_name(field.value, context)\n\n            if isinstance(var_name, str):\n                if field.confirmed:\n                    parameters.append(f\"{field.name} = confirmed({repr(var_name)})\")\n                else:\n                    parameters.append(f\"{field.name} = {var_name}\")\n            else:\n                val = field.schema_without_type(no_none=True)\n                if val:\n                    parameters.append(val)\n\n    return f\"{self.__class__.__name__}({', '.join([str(param) for param in parameters])})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(initialize_from_dict: dict)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>@classmethod\ndef new(cls, initialize_from_dict: dict):\n    return cls(**initialize_from_dict)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.__setattr__","title":"__setattr__","text":"<pre><code>__setattr__(name, value)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __setattr__(self, name, value):\n    if hasattr(self, name):\n        attr = getattr(self, name)\n        if isinstance(attr, GenieField):\n            self.action_performed = False\n\n            # if the worksheet has a confirm type field which is set to true\n            # upon update, we need to set it to false\n            for field in get_genie_fields_from_ws(self):\n                if field.slottype == \"confirm\" and field.value is True:\n                    field.value = False\n\n            if isinstance(value, GenieField) and value.name == name:\n                value.parent = self\n                super().__setattr__(name, value)\n                return\n\n            if isinstance(value, GenieValue):\n                attr.value = value\n            else:\n                attr.value = GenieValue(value)\n            return\n    super().__setattr__(name, value)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.ask","title":"ask","text":"<pre><code>ask()\n</code></pre> <p>This is a hack for when the user asks the system to ask a question from a different worksheet.</p> <p>We increment the random_id to make sure that the ws is updated and the system with ask the question naturally</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def ask(self):\n    \"\"\"This is a hack for when the user asks the system to ask a question from a different worksheet.\n\n    We increment the random_id to make sure that the ws is updated and the system with ask the question naturally\n    \"\"\"\n    logger.info(f\"Ask: {self}\")\n    self.random_id += 1\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.__init__","title":"__init__","text":"<pre><code>__init__(query, required_params, tables, nl_query)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(self, query, required_params, tables, nl_query):\n    self.query = GenieField(\"str\", \"query\", value=query)\n    self.actions = Action(\"&gt;suql_runner(self.query.value, self.required_columns)\")\n    self.result = None\n    self.tables = tables\n    self.potential_outputs = []\n    self.nl_query = nl_query\n    self.param_names = []\n    self.action_performed = False\n\n    for table in self.tables:\n        self.potential_outputs.extend(self.bot.context.context[table].outputs)\n\n    self.required_columns = [\n        field.name\n        for table in self.tables\n        for field in get_genie_fields_from_ws(self.bot.context.context[table])\n    ]\n\n    # Create required params and add them to ordered attributes\n    _ordered_attributes = [\"query\"]\n    if required_params is not None:\n        for db_name, params in required_params.items():\n            for param in params:\n                setattr(\n                    self,\n                    f\"{db_name}_{param}\",\n                    GenieField(\"str\", f\"{db_name}.{param}\", value=None),\n                )\n                self.param_names.append(f\"{db_name}_{param}\")\n                _ordered_attributes.append(f\"{db_name}_{param}\")\n\n    self._ordered_attributes = _ordered_attributes\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.execute","title":"execute","text":"<pre><code>execute(bot: GenieRuntime, local_context: GenieContext)\n</code></pre> <p>Execute the actions associated with this answer.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>local_context</code> <code>GenieContext</code> <p>The local context for the execution.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def execute(self, bot: GenieRuntime, local_context: GenieContext):\n    \"\"\"Execute the actions associated with this answer.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        local_context (GenieContext): The local context for the execution.\n    \"\"\"\n    if self.action_performed:\n        return\n    results = execute_query(self.actions.action, self, bot, local_context)\n    self.action_performed = True\n    if results is None:\n        results = []\n\n    # Get more information about the fields\n    ws, field_name, more_field_info_result = self.more_field_info_query(bot)\n    logger.info(f\"More Field Info: {more_field_info_result}\")\n    logger.info(f\"Results: {results}\")\n\n    # Earlier we had a mechanism to check if the user is asking to execute a query or asking for more information\n    # about the field. Hence we have output_idx.\n    # For now we are going to assume that the user is asking for the output of the query\n    output_idx = [1]\n\n    if len(output_idx):\n        output_idx = int(output_idx[0])\n        if output_idx == 1:\n            # Check if the output type is in the results\n            output = self.output_in_result(results)\n            var_name = get_variable_name(self, local_context)\n            self.result = GenieResult(output, self, var_name)\n\n            # Report the agent act\n            self.bot.context.agent_acts.add(\n                ReportAgentAct(\n                    self.query, self.result, var_name, var_name + \".result\"\n                )\n            )\n            for i, _output in enumerate(output):\n                if isinstance(_output, GenieWorksheet):\n                    # add the output to the local context\n                    local_context.set(\n                        f\"{camel_to_snake(_output.__class__.__name__)}\", _output\n                    )\n        elif output_idx == 2:\n            # We don't use this for now but we can use it to ask for more information\n            var_name = get_variable_name(self, local_context)\n            self.result = GenieResult(more_field_info_result, self, var_name)\n            self.bot.context.agent_acts.add(\n                ReportAgentAct(\n                    f\"AskClarificationQuestion({ws.__class__.__name__}, {field_name.name})\",\n                    self.result,\n                    message_var_name=var_name + \".result\",\n                )\n            )\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.more_field_info_query","title":"more_field_info_query","text":"<pre><code>more_field_info_query(bot: GenieRuntime)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def more_field_info_query(self, bot: GenieRuntime):\n    if bot.dlg_history is None or len(bot.dlg_history) == 0:\n        return None, None, None\n    if bot.dlg_history[-1].system_action is None:\n        return None, None, None\n    acts = bot.dlg_history[-1].system_action.actions\n    for act in acts:\n        if isinstance(act, AskAgentAct):\n            more_field_info = generate_clarification(act.ws, act.field.name)\n            if more_field_info:\n                return act.ws, act.field, more_field_info\n\n    return None, None, None\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.output_in_result","title":"output_in_result","text":"<pre><code>output_in_result(results: list)\n</code></pre> <p>Check if the output type is in the results.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def output_in_result(self, results: list):\n    \"\"\"Check if the output type is in the results.\"\"\"\n    if len(self.potential_outputs):\n        output_results = []\n        for result in results:\n            for output_type in self.potential_outputs:\n                found_primary_key = False\n                for field in get_genie_fields_from_ws(output_type):\n                    if field.primary_key and field.name in result:\n                        output_results.append(output_type(**result))\n                        found_primary_key = True\n                        break\n                if not found_primary_key:\n                    output_results.append(result)\n\n        return output_results\n    return results\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Answer.update","title":"update","text":"<pre><code>update(query, unfilled_params, tables, query_str)\n</code></pre> <p>Update the answer with new parameters and tables.</p> <p>We are not using this method anymore, but we can keep it for reference.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def update(self, query, unfilled_params, tables, query_str):\n    \"\"\"Update the answer with new parameters and tables.\n\n    We are not using this method anymore, but we can keep it for reference.\"\"\"\n    logger.error(f\"Updating Answer: {query}, This has been deprecated\")\n    self.query.value = query\n    for param in self.param_names:\n        del self.__dict__[param]\n        self._ordered_attributes.remove(param)\n    self.param_names = []\n    self.required_columns = [\n        field.name\n        for table in tables\n        for field in get_genie_fields_from_ws(self.bot.context.context[table])\n    ]\n    self.tables = tables\n    self.potential_outputs = []\n    for table in self.tables:\n        self.potential_outputs.extend(self.bot.context.context[table].outputs)\n\n    if unfilled_params is not None:\n        for db_name, params in unfilled_params.items():\n            for param in params:\n                setattr(\n                    self,\n                    f\"{db_name}_{param}\",\n                    GenieField(\"str\", f\"{db_name}.{param}\", value=None),\n                )\n                self.param_names.append(f\"{db_name}_{param}\")\n                self._ordered_attributes.append(f\"{db_name}_{param}\")\n\n    self.nl_query = query_str\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo","title":"MoreFieldInfo","text":"<p>               Bases: <code>GenieWorksheet</code></p> <p>Class for managing additional field information requests.</p> <p>This class handles requests for clarification or additional information about specific fields.</p> <p>Attributes:</p> Name Type Description <code>api_name</code> <code>GenieField</code> <p>Name of the API.</p> <code>parameter_name</code> <code>GenieField</code> <p>Name of the parameter.</p> <code>actions</code> <p>Associated actions.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class MoreFieldInfo(GenieWorksheet):\n    \"\"\"Class for managing additional field information requests.\n\n    This class handles requests for clarification or additional information\n    about specific fields.\n\n    Attributes:\n        api_name (GenieField): Name of the API.\n        parameter_name (GenieField): Name of the parameter.\n        actions: Associated actions.\n    \"\"\"\n\n    def __init__(self, api_name, parameter_name):\n        self.api_name = GenieField(\"str\", \"api_name\", value=api_name)\n        self.parameter_name = GenieField(\"str\", \"parameter_name\", value=parameter_name)\n        self.actions = Action(\n            \"&gt;answer_clarification_question(self.api_name, self.parameter_name)\"\n        )\n        self.action_performed = False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.result","title":"result  <code>instance-attribute</code>","text":"<pre><code>result = None\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.random_id","title":"random_id  <code>instance-attribute</code>","text":"<pre><code>random_id = 0\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.api_name","title":"api_name  <code>instance-attribute</code>","text":"<pre><code>api_name = GenieField('str', 'api_name', value=api_name)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.parameter_name","title":"parameter_name  <code>instance-attribute</code>","text":"<pre><code>parameter_name = GenieField('str', 'parameter_name', value=parameter_name)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.actions","title":"actions  <code>instance-attribute</code>","text":"<pre><code>actions = Action('&gt;answer_clarification_question(self.api_name, self.parameter_name)')\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.action_performed","title":"action_performed  <code>instance-attribute</code>","text":"<pre><code>action_performed = False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.perform_action","title":"perform_action","text":"<pre><code>perform_action(bot: GenieRuntime, local_context: GenieContext)\n</code></pre> <p>Perform the action associated with this worksheet if it hasn't been performed yet.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>local_context</code> <code>GenieContext</code> <p>The local context for the action.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of actions performed.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def perform_action(self, bot: GenieRuntime, local_context: GenieContext):\n    \"\"\"Perform the action associated with this worksheet if it hasn't been performed yet.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        local_context (GenieContext): The local context for the action.\n\n    Returns:\n        list: A list of actions performed.\n    \"\"\"\n\n    if self.action_performed:\n        return []\n    acts = []\n\n    if self.actions is None or len(self.actions) == 0:\n        return acts\n\n    acts = self.actions.perform(self, bot, local_context)\n    self.action_performed = True\n\n    return acts\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.is_complete","title":"is_complete","text":"<pre><code>is_complete(bot: GenieRuntime, context: GenieContext) -&gt; bool\n</code></pre> <p>Check if the worksheet is complete by evaluating all fields.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>context</code> <code>GenieContext</code> <p>The context for evaluation.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the worksheet is complete, False otherwise.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def is_complete(self, bot: GenieRuntime, context: GenieContext) -&gt; bool:\n    \"\"\"Check if the worksheet is complete by evaluating all fields.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        context (GenieContext): The context for evaluation.\n\n    Returns:\n        bool: True if the worksheet is complete, False otherwise.\n    \"\"\"\n\n    for field in get_genie_fields_from_ws(self):\n        if eval_predicates(field.predicate, self, bot, context):\n            if isinstance(field.value, GenieWorksheet):\n                if not field.value.is_complete(bot, context):\n                    return False\n            if (field.value is None or field.value == \"\") and not field.optional:\n                return False\n\n            if field.requires_confirmation and not field.confirmed:\n                return False\n    return True\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __repr__(self):\n    parameters = []\n    for field in get_genie_fields_from_ws(self):\n        if isinstance(field, GenieField):\n            parameters.append(field)\n\n    return f\"{self.__class__.__name__}({', '.join([repr(param) for param in parameters])})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.schema_without_type","title":"schema_without_type","text":"<pre><code>schema_without_type(context: GenieContext) -&gt; str\n</code></pre> <p>Generate a schema representation of the worksheet without type information.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>GenieContext</code> <p>The context for the worksheet.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The schema representation without type.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def schema_without_type(self, context: GenieContext) -&gt; str:\n    \"\"\"Generate a schema representation of the worksheet without type information.\n\n    Args:\n        context (GenieContext): The context for the worksheet.\n\n    Returns:\n        str: The schema representation without type.\n    \"\"\"\n    parameters = []\n    for field in get_genie_fields_from_ws(self):\n        if field.value is None:\n            continue\n        if isinstance(field.value, str):\n            if field.value == \"\":\n                continue\n            if field.confirmed:\n                parameters.append(f\"{field.name} = confirmed({repr(field.value)})\")\n            else:\n                parameters.append(f\"{field.name} = {repr(field.value)}\")\n        elif isinstance(field._value, GenieResult):\n            if isinstance(field.value, list):\n                parent_var_name = None\n                indices = []\n\n                result_strings = []\n                for val in field.value:\n                    if isinstance(val, GenieType):\n                        var_name, idx = find_list_variable(val, context)\n                        if var_name is None and idx is None:\n                            result_strings.append(val)\n                        else:\n                            if (\n                                parent_var_name is not None\n                                and parent_var_name != var_name\n                            ):\n                                logger.error(\n                                    \"Cannot handle multiple list variables in the same answer\"\n                                )\n                            parent_var_name = var_name  # Ignoring any potential multiple list variables\n\n                            indices.append(idx)\n                    else:\n                        result_strings.append(val)\n\n                if parent_var_name:\n                    indices_str = []\n                    for idx in indices:\n                        indices_str.append(f\"{parent_var_name}[{idx}]\")\n\n                    result_strings = \"[\" + \", \".join(indices_str) + \"]\"\n            if len(result_strings):\n                parameters.append(f\"{field.name} = {str(result_strings)}\")\n            else:\n                # TODO: Instead of getting the var_name from paren, we should search and find the same type of answer from the context\n                parameters.append(f\"{field.name} = {repr(field.value)}\")\n        elif isinstance(field.value, GenieType):\n            # This should be straight forward, same as the one above\n            var_name, idx = find_list_variable(field.value, context)\n            if var_name is None and idx is None:\n                if field.confirmed:\n                    parameters.append(\n                        f\"{field.name} = confirmed({repr(field.value)})\"\n                    )\n                else:\n                    parameters.append(f\"{field.name} = {repr(field.value)}\")\n            else:\n                if field.confirmed:\n                    parameters.append(\n                        f\"{field.name} = confirmed({var_name}[{idx}])\"\n                    )\n                else:\n                    parameters.append(f\"{field.name} = {var_name}[{idx}]\")\n        else:\n            var_name = get_variable_name(field.value, context)\n\n            if isinstance(var_name, str):\n                if field.confirmed:\n                    parameters.append(f\"{field.name} = confirmed({repr(var_name)})\")\n                else:\n                    parameters.append(f\"{field.name} = {var_name}\")\n            else:\n                val = field.schema_without_type(no_none=True)\n                if val:\n                    parameters.append(val)\n\n    return f\"{self.__class__.__name__}({', '.join([str(param) for param in parameters])})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.execute","title":"execute","text":"<pre><code>execute(bot: GenieRuntime, local_context: GenieContext)\n</code></pre> <p>Execute the actions associated with this worksheet.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>local_context</code> <code>GenieContext</code> <p>The local context for execution.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def execute(self, bot: GenieRuntime, local_context: GenieContext):\n    \"\"\"Execute the actions associated with this worksheet.\n\n    Args:\n        bot (GenieRuntime): The bot instance.\n        local_context (GenieContext): The local context for execution.\n    \"\"\"\n    parameters = []\n    for f in get_genie_fields_from_ws(self):\n        parameters.append(f.name + \"= \" + \"self.\" + f.name)\n\n    code = self.backend_api + \"(\" + \", \".join(parameters) + \")\"\n    var_name = get_variable_name(self, local_context)\n    self.result = GenieResult(\n        execute_query(code, self, bot, local_context), self, var_name\n    )\n    self.bot.context.agent_acts.add(\n        ReportAgentAct(code, self.result, None, var_name + \".result\")\n    )\n    self.action_performed = True\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(initialize_from_dict: dict)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>@classmethod\ndef new(cls, initialize_from_dict: dict):\n    return cls(**initialize_from_dict)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.__setattr__","title":"__setattr__","text":"<pre><code>__setattr__(name, value)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __setattr__(self, name, value):\n    if hasattr(self, name):\n        attr = getattr(self, name)\n        if isinstance(attr, GenieField):\n            self.action_performed = False\n\n            # if the worksheet has a confirm type field which is set to true\n            # upon update, we need to set it to false\n            for field in get_genie_fields_from_ws(self):\n                if field.slottype == \"confirm\" and field.value is True:\n                    field.value = False\n\n            if isinstance(value, GenieField) and value.name == name:\n                value.parent = self\n                super().__setattr__(name, value)\n                return\n\n            if isinstance(value, GenieValue):\n                attr.value = value\n            else:\n                attr.value = GenieValue(value)\n            return\n    super().__setattr__(name, value)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.ask","title":"ask","text":"<pre><code>ask()\n</code></pre> <p>This is a hack for when the user asks the system to ask a question from a different worksheet.</p> <p>We increment the random_id to make sure that the ws is updated and the system with ask the question naturally</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def ask(self):\n    \"\"\"This is a hack for when the user asks the system to ask a question from a different worksheet.\n\n    We increment the random_id to make sure that the ws is updated and the system with ask the question naturally\n    \"\"\"\n    logger.info(f\"Ask: {self}\")\n    self.random_id += 1\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.MoreFieldInfo.__init__","title":"__init__","text":"<pre><code>__init__(api_name, parameter_name)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(self, api_name, parameter_name):\n    self.api_name = GenieField(\"str\", \"api_name\", value=api_name)\n    self.parameter_name = GenieField(\"str\", \"parameter_name\", value=parameter_name)\n    self.actions = Action(\n        \"&gt;answer_clarification_question(self.api_name, self.parameter_name)\"\n    )\n    self.action_performed = False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Action","title":"Action","text":"<p>Class for managing worksheet actions.</p> <p>This class handles action definition, execution, and result management for worksheet operations.</p> <p>Attributes:</p> Name Type Description <code>action</code> <p>The action to perform.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class Action:\n    \"\"\"Class for managing worksheet actions.\n\n    This class handles action definition, execution, and result management\n    for worksheet operations.\n\n    Attributes:\n        action: The action to perform.\n    \"\"\"\n\n    def __init__(self, action):\n        self.action = action\n\n    def __len__(self):\n        return len(self.action)\n\n    def perform(\n        self, obj: GenieWorksheet, bot: GenieRuntime, local_context: GenieContext\n    ) -&gt; list:\n        \"\"\"Perform the action with the given context.\n\n        Args:\n            obj (GenieWorksheet): The worksheet object.\n            bot (GenieRuntime): The bot instance.\n            local_context (GenieContext): The local context.\n\n        Returns:\n            list: List of actions performed.\n        \"\"\"\n        code = modify_action_code(self.action, obj, bot, local_context)\n        code = sanitize_dev_code(code, bot.get_all_variables())\n\n        # this is right now a hack. We are just going to assign all the statments to a variable\n        # and then return the variable\n        acts = []\n        # here what i need to do is:\n        # 1. rewrite the code such that and inbuilt function appends its result to __return\n        # 2. then return __return\n\n        # We append the results to the __return variable. This is done by the rewriter\n        transformed_code = rewrite_action_code(\n            code,\n            [\"say\", \"propose\", \"answer_clarification_question\"],  # predefined actions\n        )\n        code_ = f\"__return = []\\n{transformed_code}\"\n\n        local_context.context[\"__return\"] = None\n\n        # Execute the action code\n        bot.execute(code_, local_context)\n\n        # Context management\n        if local_context.context[\"__return\"] is not None:\n            acts.extend(local_context.context[\"__return\"])\n        del local_context.context[\"__return\"]\n\n        if \"_obj\" in local_context.context:\n            del local_context.context[\"_obj\"]\n\n        return acts\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Action-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.Action.action","title":"action  <code>instance-attribute</code>","text":"<pre><code>action = action\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Action-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.Action.__init__","title":"__init__","text":"<pre><code>__init__(action)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(self, action):\n    self.action = action\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Action.__len__","title":"__len__","text":"<pre><code>__len__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __len__(self):\n    return len(self.action)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.Action.perform","title":"perform","text":"<pre><code>perform(obj: GenieWorksheet, bot: GenieRuntime, local_context: GenieContext) -&gt; list\n</code></pre> <p>Perform the action with the given context.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>GenieWorksheet</code> <p>The worksheet object.</p> required <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>local_context</code> <code>GenieContext</code> <p>The local context.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>List of actions performed.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def perform(\n    self, obj: GenieWorksheet, bot: GenieRuntime, local_context: GenieContext\n) -&gt; list:\n    \"\"\"Perform the action with the given context.\n\n    Args:\n        obj (GenieWorksheet): The worksheet object.\n        bot (GenieRuntime): The bot instance.\n        local_context (GenieContext): The local context.\n\n    Returns:\n        list: List of actions performed.\n    \"\"\"\n    code = modify_action_code(self.action, obj, bot, local_context)\n    code = sanitize_dev_code(code, bot.get_all_variables())\n\n    # this is right now a hack. We are just going to assign all the statments to a variable\n    # and then return the variable\n    acts = []\n    # here what i need to do is:\n    # 1. rewrite the code such that and inbuilt function appends its result to __return\n    # 2. then return __return\n\n    # We append the results to the __return variable. This is done by the rewriter\n    transformed_code = rewrite_action_code(\n        code,\n        [\"say\", \"propose\", \"answer_clarification_question\"],  # predefined actions\n    )\n    code_ = f\"__return = []\\n{transformed_code}\"\n\n    local_context.context[\"__return\"] = None\n\n    # Execute the action code\n    bot.execute(code_, local_context)\n\n    # Context management\n    if local_context.context[\"__return\"] is not None:\n        acts.extend(local_context.context[\"__return\"])\n    del local_context.context[\"__return\"]\n\n    if \"_obj\" in local_context.context:\n        del local_context.context[\"_obj\"]\n\n    return acts\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime","title":"GenieRuntime","text":"<p>Main runtime environment for Genie system.</p> <p>This class manages the execution environment, including worksheet registration, context management, and action execution.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Runtime instance name.</p> <code>prompt_dir</code> <code>str</code> <p>Directory for prompts.</p> <code>args</code> <p>Additional arguments.</p> <code>genie_worksheets</code> <code>list</code> <p>Registered worksheets.</p> <code>genie_db_models</code> <code>list</code> <p>Registered database models.</p> <code>starting_prompt</code> <code>str</code> <p>Initial system prompt.</p> <code>description</code> <code>str</code> <p>Runtime description.</p> <code>suql_runner</code> <p>SQL query runner.</p> <code>suql_parser</code> <p>SQL query parser.</p> <code>context</code> <code>GenieContext</code> <p>Global context.</p> <code>dlg_history</code> <code>list</code> <p>Dialogue history.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class GenieRuntime:\n    \"\"\"Main runtime environment for Genie system.\n\n    This class manages the execution environment, including worksheet registration,\n    context management, and action execution.\n\n    Attributes:\n        name (str): Runtime instance name.\n        prompt_dir (str): Directory for prompts.\n        args: Additional arguments.\n        genie_worksheets (list): Registered worksheets.\n        genie_db_models (list): Registered database models.\n        starting_prompt (str): Initial system prompt.\n        description (str): Runtime description.\n        suql_runner: SQL query runner.\n        suql_parser: SQL query parser.\n        context (GenieContext): Global context.\n        dlg_history (list): Dialogue history.\n    \"\"\"\n\n    def __init__(\n        self,\n        # The name of the bot\n        name,\n        # The directory where the prompts are stored\n        prompt_dir,\n        # The starting prompt of the bot\n        starting_prompt=None,\n        # A description of the bot\n        description=None,\n        # Any additional arguments\n        args=None,\n        # Define the API to be used\n        api=None,\n        # The SUQL runner (SUQLKnowledgeBase)\n        suql_runner=None,\n        # The SUQL parser (SUQLParser)\n        suql_parser=None,\n    ):\n        self.prompt_dir = prompt_dir\n        self.args = args\n        self.name = name\n        self.genie_worksheets = []\n        self.genie_db_models = []\n        if starting_prompt is None:\n            self.starting_prompt = f\"Hello! I'm the {name}. What would you like to do?\"\n        self.starting_prompt = starting_prompt\n        self.description = description\n        self.suql_runner = suql_runner\n        self.suql_parser = suql_parser\n\n        self._interpreter = GenieInterpreter()\n        self.context = GenieContext()\n        self.local_context_init = GenieContext()\n\n        # add the api to the context\n        if api:\n            if isinstance(api, list):\n                apis = api\n            else:\n                api_funcs = inspect.getmembers(api, inspect.isfunction)\n                apis = [func for name, func in api_funcs if not name.startswith(\"_\")]\n        else:\n            apis = []\n        self.dlg_history = []\n\n        self.order_of_actions = []\n\n        apis.extend([self.suql_runner])\n\n        Answer.bot = self\n\n        # Add the predefined apis and functions\n        apis.extend(\n            [\n                propose,\n                confirm,\n                GenieValue,\n                partial(answer_clarification_question, context=self.context),\n                Answer,\n                MoreFieldInfo,\n                say,\n            ]\n        )\n        for api in apis:\n            self.add_api(api)\n\n    def reset(self):\n        \"\"\"Reset the bot's context and state.\"\"\"\n        self.context.reset_agent_acts()\n        to_delete = []\n        for key, value in self.context.context.items():\n            if isinstance(value, GenieWorksheet):\n                to_delete.append(key)\n\n        for key in to_delete:\n            del self.context.context[key]\n        self.dlg_history = None\n        self.order_of_actions = []\n\n    def add_worksheet(self, ws: type):\n        \"\"\"Add a worksheet to the bot's context.\n\n        Args:\n            ws (type): The worksheet class to add.\n        \"\"\"\n        ws.bot = self\n        for field in get_genie_fields_from_ws(ws):\n            field.parent = ws\n            field.bot = self\n        self.genie_worksheets.append(ws)\n        self.context.set(ws.__name__, ws)\n        # self.context.update(self._grab_all_variables(ws))\n        # self.local_context_init.update(self._grab_all_variables(ws))\n\n    def add_db_model(self, db_model: type):\n        \"\"\"Add a database model to the bot's context.\n\n        Args:\n            db_model (type): The database model class to add.\n        \"\"\"\n        db_model.bot = self\n        for field in get_genie_fields_from_ws(db_model):\n            field.parent = db_model\n            field.bot = self\n        self.genie_db_models.append(db_model)\n        self.context.set(db_model.__name__, db_model)\n        # self.context.update(self._grab_all_variables(db_model))\n        # self.local_context_init.update(self._grab_all_variables(db_model))\n\n    def add_api(self, api: Any):\n        \"\"\"Add an API function to the context.\n\n        Args:\n            api (Any): The API function or object to add.\n        \"\"\"\n        self.context.set(callable_name(api), api)\n\n    def geniews(\n        self,\n        predicates=None,\n        outputs: GenieWorksheet | dict | None = None,\n        backend_api=None,\n        actions=\"\",\n    ):\n        \"\"\"Decorator to define a Genie worksheet.\"\"\"\n\n        def decorator(cls):\n            cls.predicate = predicates\n            cls.outputs = outputs\n            cls.backend_api = backend_api\n            cls.actions = actions\n            self.add_worksheet(cls)\n            return cls\n\n        return decorator\n\n    def genie_sql(\n        self,\n        outputs: GenieWorksheet | dict | None = None,\n        actions=\"\",\n    ):\n        \"\"\"Decorator to define a Genie database model.\"\"\"\n\n        def decorator(cls):\n            if outputs is None:\n                outputs = {}\n            cls.outputs = outputs\n            cls.actions = actions\n            self.add_db_model(cls)\n            return cls\n\n        return decorator\n\n    def execute(\n        self, code: str, local_context: GenieContext | None = None, sp: bool = False\n    ):\n        \"\"\"Execute the given code in the context of the bot.\n\n        Args:\n            code (str): The code to execute.\n            local_context (GenieContext | None, optional): Local context to use. Defaults to None.\n            sp (bool, optional): Whether this is a semantic parser execution. Defaults to False.\n        \"\"\"\n        if local_context:\n            local_context.update(\n                {k: v for k, v in self.local_context_init.context.items()}\n            )\n        else:\n            local_context = GenieContext(\n                {k: v for k, v in self.local_context_init.context.items()}\n            )\n        self._interpreter.execute(\n            code,\n            self.context,\n            local_context,\n            sp=sp,\n        )\n\n        # Add the parents for all the objects in the local context\n        collect_all_parents(local_context)\n\n    def eval(self, code: str, local_context: GenieContext | None = None) -&gt; Any:\n        \"\"\"Evaluate the given code in the context of the bot.\n\n        Args:\n            code (str): The code to evaluate.\n            local_context (GenieContext | None, optional): Local context to use. Defaults to None.\n\n        Returns:\n            Any: The result of the evaluation.\n        \"\"\"\n        if local_context:\n            local_context.update(\n                {k: v for k, v in self.local_context_init.context.items()}\n            )\n        else:\n            local_context = GenieContext(\n                {k: v for k, v in self.local_context_init.context.items()}\n            )\n        return self._interpreter.eval(\n            code,\n            self.context,\n            local_context,\n        )\n\n    def update_from_context(self, context):\n        \"\"\"add new variables to the context\"\"\"\n        self.context.update(context.context)\n\n    def get_available_worksheets(self, context):\n        \"\"\"Get all available worksheets based on their predicates.\"\"\"\n        for ws in self.genie_worksheets:\n            if ws.predicate:\n                if eval_predicates(ws.predicate, None, self, context):\n                    yield ws\n            else:\n                yield ws\n\n    def get_available_dbs(self, context):\n        \"\"\"Get all available database models based on their predicates.\"\"\"\n        for db in self.genie_db_models:\n            if db.predicate:\n                if eval_predicates(db.predicate, None, self, context):\n                    yield db\n            else:\n                yield db\n\n    def get_all_variables(self):\n        \"\"\"Get all fields (variables) from all worksheets.\"\"\"\n        all_variables = []\n        for ws in self.genie_worksheets:\n            for field in get_genie_fields_from_ws(ws):\n                all_variables.append(field.name)\n\n        return all_variables\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.prompt_dir","title":"prompt_dir  <code>instance-attribute</code>","text":"<pre><code>prompt_dir = prompt_dir\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args = args\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.genie_worksheets","title":"genie_worksheets  <code>instance-attribute</code>","text":"<pre><code>genie_worksheets = []\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.genie_db_models","title":"genie_db_models  <code>instance-attribute</code>","text":"<pre><code>genie_db_models = []\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.starting_prompt","title":"starting_prompt  <code>instance-attribute</code>","text":"<pre><code>starting_prompt = starting_prompt\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description = description\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.suql_runner","title":"suql_runner  <code>instance-attribute</code>","text":"<pre><code>suql_runner = suql_runner\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.suql_parser","title":"suql_parser  <code>instance-attribute</code>","text":"<pre><code>suql_parser = suql_parser\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime._interpreter","title":"_interpreter  <code>instance-attribute</code>","text":"<pre><code>_interpreter = GenieInterpreter()\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.context","title":"context  <code>instance-attribute</code>","text":"<pre><code>context = GenieContext()\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.local_context_init","title":"local_context_init  <code>instance-attribute</code>","text":"<pre><code>local_context_init = GenieContext()\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.dlg_history","title":"dlg_history  <code>instance-attribute</code>","text":"<pre><code>dlg_history = []\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.order_of_actions","title":"order_of_actions  <code>instance-attribute</code>","text":"<pre><code>order_of_actions = []\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.__init__","title":"__init__","text":"<pre><code>__init__(name, prompt_dir, starting_prompt=None, description=None, args=None, api=None, suql_runner=None, suql_parser=None)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(\n    self,\n    # The name of the bot\n    name,\n    # The directory where the prompts are stored\n    prompt_dir,\n    # The starting prompt of the bot\n    starting_prompt=None,\n    # A description of the bot\n    description=None,\n    # Any additional arguments\n    args=None,\n    # Define the API to be used\n    api=None,\n    # The SUQL runner (SUQLKnowledgeBase)\n    suql_runner=None,\n    # The SUQL parser (SUQLParser)\n    suql_parser=None,\n):\n    self.prompt_dir = prompt_dir\n    self.args = args\n    self.name = name\n    self.genie_worksheets = []\n    self.genie_db_models = []\n    if starting_prompt is None:\n        self.starting_prompt = f\"Hello! I'm the {name}. What would you like to do?\"\n    self.starting_prompt = starting_prompt\n    self.description = description\n    self.suql_runner = suql_runner\n    self.suql_parser = suql_parser\n\n    self._interpreter = GenieInterpreter()\n    self.context = GenieContext()\n    self.local_context_init = GenieContext()\n\n    # add the api to the context\n    if api:\n        if isinstance(api, list):\n            apis = api\n        else:\n            api_funcs = inspect.getmembers(api, inspect.isfunction)\n            apis = [func for name, func in api_funcs if not name.startswith(\"_\")]\n    else:\n        apis = []\n    self.dlg_history = []\n\n    self.order_of_actions = []\n\n    apis.extend([self.suql_runner])\n\n    Answer.bot = self\n\n    # Add the predefined apis and functions\n    apis.extend(\n        [\n            propose,\n            confirm,\n            GenieValue,\n            partial(answer_clarification_question, context=self.context),\n            Answer,\n            MoreFieldInfo,\n            say,\n        ]\n    )\n    for api in apis:\n        self.add_api(api)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset the bot's context and state.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def reset(self):\n    \"\"\"Reset the bot's context and state.\"\"\"\n    self.context.reset_agent_acts()\n    to_delete = []\n    for key, value in self.context.context.items():\n        if isinstance(value, GenieWorksheet):\n            to_delete.append(key)\n\n    for key in to_delete:\n        del self.context.context[key]\n    self.dlg_history = None\n    self.order_of_actions = []\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.add_worksheet","title":"add_worksheet","text":"<pre><code>add_worksheet(ws: type)\n</code></pre> <p>Add a worksheet to the bot's context.</p> <p>Parameters:</p> Name Type Description Default <code>ws</code> <code>type</code> <p>The worksheet class to add.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def add_worksheet(self, ws: type):\n    \"\"\"Add a worksheet to the bot's context.\n\n    Args:\n        ws (type): The worksheet class to add.\n    \"\"\"\n    ws.bot = self\n    for field in get_genie_fields_from_ws(ws):\n        field.parent = ws\n        field.bot = self\n    self.genie_worksheets.append(ws)\n    self.context.set(ws.__name__, ws)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.add_db_model","title":"add_db_model","text":"<pre><code>add_db_model(db_model: type)\n</code></pre> <p>Add a database model to the bot's context.</p> <p>Parameters:</p> Name Type Description Default <code>db_model</code> <code>type</code> <p>The database model class to add.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def add_db_model(self, db_model: type):\n    \"\"\"Add a database model to the bot's context.\n\n    Args:\n        db_model (type): The database model class to add.\n    \"\"\"\n    db_model.bot = self\n    for field in get_genie_fields_from_ws(db_model):\n        field.parent = db_model\n        field.bot = self\n    self.genie_db_models.append(db_model)\n    self.context.set(db_model.__name__, db_model)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.add_api","title":"add_api","text":"<pre><code>add_api(api: Any)\n</code></pre> <p>Add an API function to the context.</p> <p>Parameters:</p> Name Type Description Default <code>api</code> <code>Any</code> <p>The API function or object to add.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def add_api(self, api: Any):\n    \"\"\"Add an API function to the context.\n\n    Args:\n        api (Any): The API function or object to add.\n    \"\"\"\n    self.context.set(callable_name(api), api)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.geniews","title":"geniews","text":"<pre><code>geniews(predicates=None, outputs: GenieWorksheet | dict | None = None, backend_api=None, actions='')\n</code></pre> <p>Decorator to define a Genie worksheet.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def geniews(\n    self,\n    predicates=None,\n    outputs: GenieWorksheet | dict | None = None,\n    backend_api=None,\n    actions=\"\",\n):\n    \"\"\"Decorator to define a Genie worksheet.\"\"\"\n\n    def decorator(cls):\n        cls.predicate = predicates\n        cls.outputs = outputs\n        cls.backend_api = backend_api\n        cls.actions = actions\n        self.add_worksheet(cls)\n        return cls\n\n    return decorator\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.genie_sql","title":"genie_sql","text":"<pre><code>genie_sql(outputs: GenieWorksheet | dict | None = None, actions='')\n</code></pre> <p>Decorator to define a Genie database model.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def genie_sql(\n    self,\n    outputs: GenieWorksheet | dict | None = None,\n    actions=\"\",\n):\n    \"\"\"Decorator to define a Genie database model.\"\"\"\n\n    def decorator(cls):\n        if outputs is None:\n            outputs = {}\n        cls.outputs = outputs\n        cls.actions = actions\n        self.add_db_model(cls)\n        return cls\n\n    return decorator\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.execute","title":"execute","text":"<pre><code>execute(code: str, local_context: GenieContext | None = None, sp: bool = False)\n</code></pre> <p>Execute the given code in the context of the bot.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The code to execute.</p> required <code>local_context</code> <code>GenieContext | None</code> <p>Local context to use. Defaults to None.</p> <code>None</code> <code>sp</code> <code>bool</code> <p>Whether this is a semantic parser execution. Defaults to False.</p> <code>False</code> Source code in <code>src/worksheets/environment.py</code> <pre><code>def execute(\n    self, code: str, local_context: GenieContext | None = None, sp: bool = False\n):\n    \"\"\"Execute the given code in the context of the bot.\n\n    Args:\n        code (str): The code to execute.\n        local_context (GenieContext | None, optional): Local context to use. Defaults to None.\n        sp (bool, optional): Whether this is a semantic parser execution. Defaults to False.\n    \"\"\"\n    if local_context:\n        local_context.update(\n            {k: v for k, v in self.local_context_init.context.items()}\n        )\n    else:\n        local_context = GenieContext(\n            {k: v for k, v in self.local_context_init.context.items()}\n        )\n    self._interpreter.execute(\n        code,\n        self.context,\n        local_context,\n        sp=sp,\n    )\n\n    # Add the parents for all the objects in the local context\n    collect_all_parents(local_context)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.eval","title":"eval","text":"<pre><code>eval(code: str, local_context: GenieContext | None = None) -&gt; Any\n</code></pre> <p>Evaluate the given code in the context of the bot.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The code to evaluate.</p> required <code>local_context</code> <code>GenieContext | None</code> <p>Local context to use. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The result of the evaluation.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def eval(self, code: str, local_context: GenieContext | None = None) -&gt; Any:\n    \"\"\"Evaluate the given code in the context of the bot.\n\n    Args:\n        code (str): The code to evaluate.\n        local_context (GenieContext | None, optional): Local context to use. Defaults to None.\n\n    Returns:\n        Any: The result of the evaluation.\n    \"\"\"\n    if local_context:\n        local_context.update(\n            {k: v for k, v in self.local_context_init.context.items()}\n        )\n    else:\n        local_context = GenieContext(\n            {k: v for k, v in self.local_context_init.context.items()}\n        )\n    return self._interpreter.eval(\n        code,\n        self.context,\n        local_context,\n    )\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.update_from_context","title":"update_from_context","text":"<pre><code>update_from_context(context)\n</code></pre> <p>add new variables to the context</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def update_from_context(self, context):\n    \"\"\"add new variables to the context\"\"\"\n    self.context.update(context.context)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.get_available_worksheets","title":"get_available_worksheets","text":"<pre><code>get_available_worksheets(context)\n</code></pre> <p>Get all available worksheets based on their predicates.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def get_available_worksheets(self, context):\n    \"\"\"Get all available worksheets based on their predicates.\"\"\"\n    for ws in self.genie_worksheets:\n        if ws.predicate:\n            if eval_predicates(ws.predicate, None, self, context):\n                yield ws\n        else:\n            yield ws\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.get_available_dbs","title":"get_available_dbs","text":"<pre><code>get_available_dbs(context)\n</code></pre> <p>Get all available database models based on their predicates.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def get_available_dbs(self, context):\n    \"\"\"Get all available database models based on their predicates.\"\"\"\n    for db in self.genie_db_models:\n        if db.predicate:\n            if eval_predicates(db.predicate, None, self, context):\n                yield db\n        else:\n            yield db\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieRuntime.get_all_variables","title":"get_all_variables","text":"<pre><code>get_all_variables()\n</code></pre> <p>Get all fields (variables) from all worksheets.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def get_all_variables(self):\n    \"\"\"Get all fields (variables) from all worksheets.\"\"\"\n    all_variables = []\n    for ws in self.genie_worksheets:\n        for field in get_genie_fields_from_ws(ws):\n            all_variables.append(field.name)\n\n    return all_variables\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieInterpreter","title":"GenieInterpreter","text":"<p>Interpreter for executing Genie code.</p> <p>This class provides code execution capabilities within the Genie environment, handling variable resolution and context management.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class GenieInterpreter:\n    \"\"\"Interpreter for executing Genie code.\n\n    This class provides code execution capabilities within the Genie environment,\n    handling variable resolution and context management.\n    \"\"\"\n\n    def execute(self, code, global_context, local_context, sp=False):\n        # There are some issues here. since there are no numbers now,\n        # when we do courses_to_take = CoursesToTake(courses_0_details=course)\n        # since courses_to_take is a field in main worksheet, the code gets modified to:\n        # main.courses_to_take.value = CoursesToTake(courses_0_details=course)\n        # One easy fix could be if you are setting a GenieWorksheet to a field, then\n        # do not modify the code.\n\n        # Another way is to have an, argument which mentions if the execution is from semantic parser\n        # if it is, then do not modify the code.\n\n        if not sp:\n            # If the execution is for action then we replace the undefined variables\n            code = replace_undefined_variables(code, local_context, global_context)\n        try:\n            try:\n                exec(code, global_context.context, local_context.context)\n            except NameError as e:\n                local_context.set(e.name, None)\n                # regex to catch the variable name. If the variable name is \"user_task\" then we want to find \"user_task.value\" as well until we hit a space.\n                # This is just a hack ideally we should traverse the ast or at least use the tokenize module to find the variable name\n                var_name = re.findall(rf\"{e.name}\\.\\w+\", code)\n                if var_name:\n                    code = code.replace(var_name[0], f\"{e.name}\")\n                exec(code, global_context.context, local_context.context)\n                local_context.delete(e.name)\n        except Exception as e:\n            logger.error(f\"Error: {e}\")\n            logger.error(f\"Code: {code}\")\n\n    def eval(self, code, global_context, local_context):\n        # perform rewrite to update any variables that is not in the local context\n        # by using the variable resolver\n        code = replace_undefined_variables(code, local_context, global_context).strip()\n        try:\n            return eval(code, global_context.context, local_context.context)\n        except (NameError, AttributeError):\n            return False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieInterpreter-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.GenieInterpreter.execute","title":"execute","text":"<pre><code>execute(code, global_context, local_context, sp=False)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def execute(self, code, global_context, local_context, sp=False):\n    # There are some issues here. since there are no numbers now,\n    # when we do courses_to_take = CoursesToTake(courses_0_details=course)\n    # since courses_to_take is a field in main worksheet, the code gets modified to:\n    # main.courses_to_take.value = CoursesToTake(courses_0_details=course)\n    # One easy fix could be if you are setting a GenieWorksheet to a field, then\n    # do not modify the code.\n\n    # Another way is to have an, argument which mentions if the execution is from semantic parser\n    # if it is, then do not modify the code.\n\n    if not sp:\n        # If the execution is for action then we replace the undefined variables\n        code = replace_undefined_variables(code, local_context, global_context)\n    try:\n        try:\n            exec(code, global_context.context, local_context.context)\n        except NameError as e:\n            local_context.set(e.name, None)\n            # regex to catch the variable name. If the variable name is \"user_task\" then we want to find \"user_task.value\" as well until we hit a space.\n            # This is just a hack ideally we should traverse the ast or at least use the tokenize module to find the variable name\n            var_name = re.findall(rf\"{e.name}\\.\\w+\", code)\n            if var_name:\n                code = code.replace(var_name[0], f\"{e.name}\")\n            exec(code, global_context.context, local_context.context)\n            local_context.delete(e.name)\n    except Exception as e:\n        logger.error(f\"Error: {e}\")\n        logger.error(f\"Code: {code}\")\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieInterpreter.eval","title":"eval","text":"<pre><code>eval(code, global_context, local_context)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def eval(self, code, global_context, local_context):\n    # perform rewrite to update any variables that is not in the local context\n    # by using the variable resolver\n    code = replace_undefined_variables(code, local_context, global_context).strip()\n    try:\n        return eval(code, global_context.context, local_context.context)\n    except (NameError, AttributeError):\n        return False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieContext","title":"GenieContext","text":"<p>Context manager for Genie runtime.</p> <p>This class manages variable context and agent actions during runtime.</p> <p>Attributes:</p> Name Type Description <code>context</code> <code>dict</code> <p>The context dictionary.</p> <code>agent_acts</code> <p>Current agent actions.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class GenieContext:\n    \"\"\"Context manager for Genie runtime.\n\n    This class manages variable context and agent actions during runtime.\n\n    Attributes:\n        context (dict): The context dictionary.\n        agent_acts: Current agent actions.\n    \"\"\"\n\n    def __init__(self, context: dict = None):\n        if context is None:\n            context = {}\n        self.context = context\n        self.agent_acts = None\n        self.reset_agent_acts()\n\n    def reset_agent_acts(self):\n        self.agent_acts = AgentActs({})\n\n    def update(self, content: dict):\n        \"\"\"Update the context with new content.\n\n        Args:\n            content (dict): Dictionary of content to update with.\n        \"\"\"\n        for key, value in content.items():\n            if key != \"answer\" and key in self.context:\n                if not isinstance(self.context[key], list):\n                    if self.context[key] != value:\n                        self.context[key] = [\n                            self.context[key]\n                        ]  # TODO: make the line below this else: if\n                else:\n                    if isinstance(value, list):\n                        for v in value:\n                            if v not in self.context[key]:\n                                self.context[key].append(v)\n                    else:\n                        self.context[key].append(value)\n            else:\n                self.context[key] = value\n\n    def get(self, key: str) -&gt; Any:\n        \"\"\"Get a value from the context.\n\n        Args:\n            key (str): The key to get.\n\n        Returns:\n            Any: The value associated with the key.\n        \"\"\"\n        return self.context[key]\n\n    def set(self, key: str, value: Any):\n        \"\"\"Set a value in the context.\n\n        Args:\n            key (str): The key to set.\n            value (Any): The value to set.\n        \"\"\"\n        if key != \"answer\" and key in self.context:\n            if not isinstance(self.context[key], list):\n                self.context[key] = [self.context[key]]\n            self.context[key].append(value)\n        else:\n            self.context[key] = value\n\n    def delete(self, key: str):\n        \"\"\"Delete a key from the context.\n\n        Args:\n            key (str): The key to delete.\n        \"\"\"\n        del self.context[key]\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieContext-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.GenieContext.context","title":"context  <code>instance-attribute</code>","text":"<pre><code>context = context\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieContext.agent_acts","title":"agent_acts  <code>instance-attribute</code>","text":"<pre><code>agent_acts = None\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieContext-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.GenieContext.__init__","title":"__init__","text":"<pre><code>__init__(context: dict = None)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(self, context: dict = None):\n    if context is None:\n        context = {}\n    self.context = context\n    self.agent_acts = None\n    self.reset_agent_acts()\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieContext.reset_agent_acts","title":"reset_agent_acts","text":"<pre><code>reset_agent_acts()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def reset_agent_acts(self):\n    self.agent_acts = AgentActs({})\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieContext.update","title":"update","text":"<pre><code>update(content: dict)\n</code></pre> <p>Update the context with new content.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>dict</code> <p>Dictionary of content to update with.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def update(self, content: dict):\n    \"\"\"Update the context with new content.\n\n    Args:\n        content (dict): Dictionary of content to update with.\n    \"\"\"\n    for key, value in content.items():\n        if key != \"answer\" and key in self.context:\n            if not isinstance(self.context[key], list):\n                if self.context[key] != value:\n                    self.context[key] = [\n                        self.context[key]\n                    ]  # TODO: make the line below this else: if\n            else:\n                if isinstance(value, list):\n                    for v in value:\n                        if v not in self.context[key]:\n                            self.context[key].append(v)\n                else:\n                    self.context[key].append(value)\n        else:\n            self.context[key] = value\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieContext.get","title":"get","text":"<pre><code>get(key: str) -&gt; Any\n</code></pre> <p>Get a value from the context.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to get.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The value associated with the key.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def get(self, key: str) -&gt; Any:\n    \"\"\"Get a value from the context.\n\n    Args:\n        key (str): The key to get.\n\n    Returns:\n        Any: The value associated with the key.\n    \"\"\"\n    return self.context[key]\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieContext.set","title":"set","text":"<pre><code>set(key: str, value: Any)\n</code></pre> <p>Set a value in the context.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to set.</p> required <code>value</code> <code>Any</code> <p>The value to set.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def set(self, key: str, value: Any):\n    \"\"\"Set a value in the context.\n\n    Args:\n        key (str): The key to set.\n        value (Any): The value to set.\n    \"\"\"\n    if key != \"answer\" and key in self.context:\n        if not isinstance(self.context[key], list):\n            self.context[key] = [self.context[key]]\n        self.context[key].append(value)\n    else:\n        self.context[key] = value\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.GenieContext.delete","title":"delete","text":"<pre><code>delete(key: str)\n</code></pre> <p>Delete a key from the context.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to delete.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def delete(self, key: str):\n    \"\"\"Delete a key from the context.\n\n    Args:\n        key (str): The key to delete.\n    \"\"\"\n    del self.context[key]\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.TurnContext","title":"TurnContext","text":"<p>Context manager for dialogue turns.</p> <p>This class manages context for individual dialogue turns.</p> <p>Attributes:</p> Name Type Description <code>context</code> <code>list[GenieContext]</code> <p>List of contexts for each turn.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class TurnContext:\n    \"\"\"Context manager for dialogue turns.\n\n    This class manages context for individual dialogue turns.\n\n    Attributes:\n        context (list[GenieContext]): List of contexts for each turn.\n    \"\"\"\n\n    def __init__(self):\n        self.context: list[GenieContext] = []\n\n    def add_turn_context(self, context: GenieContext):\n        \"\"\"Add a new turn context.\n\n        Args:\n            context (GenieContext): The context to add for this turn.\n        \"\"\"\n        self.context.append(deepcopy(context))\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.TurnContext-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.TurnContext.context","title":"context  <code>instance-attribute</code>","text":"<pre><code>context: list[GenieContext] = []\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.TurnContext-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.TurnContext.__init__","title":"__init__","text":"<pre><code>__init__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(self):\n    self.context: list[GenieContext] = []\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.TurnContext.add_turn_context","title":"add_turn_context","text":"<pre><code>add_turn_context(context: GenieContext)\n</code></pre> <p>Add a new turn context.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>GenieContext</code> <p>The context to add for this turn.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def add_turn_context(self, context: GenieContext):\n    \"\"\"Add a new turn context.\n\n    Args:\n        context (GenieContext): The context to add for this turn.\n    \"\"\"\n    self.context.append(deepcopy(context))\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AgentAct","title":"AgentAct","text":"<p>Base class for agent actions.</p> <p>This class serves as the foundation for different types of agent actions in the system.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class AgentAct:\n    \"\"\"Base class for agent actions.\n\n    This class serves as the foundation for different types of agent actions\n    in the system.\n    \"\"\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ReportAgentAct","title":"ReportAgentAct","text":"<p>               Bases: <code>AgentAct</code></p> <p>Action for reporting query results or messages.</p> <p>This class handles reporting of query results and system messages.</p> <p>Attributes:</p> Name Type Description <code>query</code> <code>GenieField</code> <p>The query being reported.</p> <code>message</code> <p>The message or result to report.</p> <code>query_var_name</code> <p>Variable name for the query.</p> <code>message_var_name</code> <p>Variable name for the message.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class ReportAgentAct(AgentAct):\n    \"\"\"Action for reporting query results or messages.\n\n    This class handles reporting of query results and system messages.\n\n    Attributes:\n        query (GenieField): The query being reported.\n        message: The message or result to report.\n        query_var_name: Variable name for the query.\n        message_var_name: Variable name for the message.\n    \"\"\"\n\n    def __init__(\n        self,\n        query: GenieField,\n        message: Any,\n        query_var_name=None,\n        message_var_name=None,\n    ):\n        self.query = query\n        self.message = message\n        self.query_var_name = query_var_name\n        self.message_var_name = message_var_name\n\n    def __repr__(self):\n        if self.query_var_name:\n            query_var_name = self.query_var_name\n        else:\n            query_var_name = self.query\n\n        if self.message_var_name:\n            message_var_name = self.message_var_name\n        else:\n            message_var_name = self.message\n        return f\"Report({query_var_name}, {message_var_name})\"\n\n    def __eq__(self, other):\n        if isinstance(other, ReportAgentAct):\n            if self.query == other.query and self.message == other.message:\n                return True\n        return False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ReportAgentAct-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.ReportAgentAct.query","title":"query  <code>instance-attribute</code>","text":"<pre><code>query = query\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ReportAgentAct.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message = message\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ReportAgentAct.query_var_name","title":"query_var_name  <code>instance-attribute</code>","text":"<pre><code>query_var_name = query_var_name\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ReportAgentAct.message_var_name","title":"message_var_name  <code>instance-attribute</code>","text":"<pre><code>message_var_name = message_var_name\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ReportAgentAct-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.ReportAgentAct.__init__","title":"__init__","text":"<pre><code>__init__(query: GenieField, message: Any, query_var_name=None, message_var_name=None)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(\n    self,\n    query: GenieField,\n    message: Any,\n    query_var_name=None,\n    message_var_name=None,\n):\n    self.query = query\n    self.message = message\n    self.query_var_name = query_var_name\n    self.message_var_name = message_var_name\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ReportAgentAct.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __repr__(self):\n    if self.query_var_name:\n        query_var_name = self.query_var_name\n    else:\n        query_var_name = self.query\n\n    if self.message_var_name:\n        message_var_name = self.message_var_name\n    else:\n        message_var_name = self.message\n    return f\"Report({query_var_name}, {message_var_name})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ReportAgentAct.__eq__","title":"__eq__","text":"<pre><code>__eq__(other)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __eq__(self, other):\n    if isinstance(other, ReportAgentAct):\n        if self.query == other.query and self.message == other.message:\n            return True\n    return False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskAgentAct","title":"AskAgentAct","text":"<p>               Bases: <code>AgentAct</code></p> <p>Action for requesting information from users.</p> <p>This class handles user information requests.</p> <p>Attributes:</p> Name Type Description <code>ws</code> <code>GenieWorksheet</code> <p>The worksheet context.</p> <code>field</code> <code>GenieField</code> <p>The field to ask about.</p> <code>ws_name</code> <p>Worksheet name override.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class AskAgentAct(AgentAct):\n    \"\"\"Action for requesting information from users.\n\n    This class handles user information requests.\n\n    Attributes:\n        ws (GenieWorksheet): The worksheet context.\n        field (GenieField): The field to ask about.\n        ws_name: Worksheet name override.\n    \"\"\"\n\n    def __init__(self, ws: GenieWorksheet, field: GenieField, ws_name=None):\n        self.ws = ws\n        self.field = field\n        self.ws_name = ws_name\n\n    def __repr__(self):\n        description = None\n        if inspect.isclass(self.field.slottype):\n            if issubclass(self.field.slottype, Enum):\n                options = [\n                    x.name for x in list(self.field.slottype.__members__.values())\n                ]\n                options = \", \".join(options)\n                description = self.field.description + f\" Options are: {options}\"\n\n        if description is None and self.field.description is not None:\n            description = self.field.description\n\n        if self.ws_name:\n            return f\"AskField({self.ws_name}, {self.field.name}, {description})\"\n        return (\n            f\"AskField({self.ws.__class__.__name__}, {self.field.name}, {description})\"\n        )\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskAgentAct-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.AskAgentAct.ws","title":"ws  <code>instance-attribute</code>","text":"<pre><code>ws = ws\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskAgentAct.field","title":"field  <code>instance-attribute</code>","text":"<pre><code>field = field\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskAgentAct.ws_name","title":"ws_name  <code>instance-attribute</code>","text":"<pre><code>ws_name = ws_name\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskAgentAct-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.AskAgentAct.__init__","title":"__init__","text":"<pre><code>__init__(ws: GenieWorksheet, field: GenieField, ws_name=None)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(self, ws: GenieWorksheet, field: GenieField, ws_name=None):\n    self.ws = ws\n    self.field = field\n    self.ws_name = ws_name\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskAgentAct.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __repr__(self):\n    description = None\n    if inspect.isclass(self.field.slottype):\n        if issubclass(self.field.slottype, Enum):\n            options = [\n                x.name for x in list(self.field.slottype.__members__.values())\n            ]\n            options = \", \".join(options)\n            description = self.field.description + f\" Options are: {options}\"\n\n    if description is None and self.field.description is not None:\n        description = self.field.description\n\n    if self.ws_name:\n        return f\"AskField({self.ws_name}, {self.field.name}, {description})\"\n    return (\n        f\"AskField({self.ws.__class__.__name__}, {self.field.name}, {description})\"\n    )\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ProposeAgentAct","title":"ProposeAgentAct","text":"<p>               Bases: <code>AgentAct</code></p> <p>Action for proposing worksheet values.</p> <p>This class handles proposals for worksheet field values.</p> <p>Attributes:</p> Name Type Description <code>ws</code> <code>GenieWorksheet</code> <p>The worksheet context.</p> <code>params</code> <code>dict</code> <p>Proposed parameters.</p> <code>ws_name</code> <p>Worksheet name override.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class ProposeAgentAct(AgentAct):\n    \"\"\"Action for proposing worksheet values.\n\n    This class handles proposals for worksheet field values.\n\n    Attributes:\n        ws (GenieWorksheet): The worksheet context.\n        params (dict): Proposed parameters.\n        ws_name: Worksheet name override.\n    \"\"\"\n\n    def __init__(self, ws: GenieWorksheet, params: dict, ws_name=None):\n        self.ws = ws\n        self.params = params\n        self.ws_name = ws_name\n\n    def __repr__(self):\n        if self.ws_name:\n            return f\"ProposeAgentAct({self.ws_name}, {self.params})\"\n        return f\"ProposeAgentAct({self.ws.__class__.__name__}, {self.params})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ProposeAgentAct-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.ProposeAgentAct.ws","title":"ws  <code>instance-attribute</code>","text":"<pre><code>ws = ws\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ProposeAgentAct.params","title":"params  <code>instance-attribute</code>","text":"<pre><code>params = params\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ProposeAgentAct.ws_name","title":"ws_name  <code>instance-attribute</code>","text":"<pre><code>ws_name = ws_name\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ProposeAgentAct-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.ProposeAgentAct.__init__","title":"__init__","text":"<pre><code>__init__(ws: GenieWorksheet, params: dict, ws_name=None)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(self, ws: GenieWorksheet, params: dict, ws_name=None):\n    self.ws = ws\n    self.params = params\n    self.ws_name = ws_name\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.ProposeAgentAct.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __repr__(self):\n    if self.ws_name:\n        return f\"ProposeAgentAct({self.ws_name}, {self.params})\"\n    return f\"ProposeAgentAct({self.ws.__class__.__name__}, {self.params})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskForConfirmationAgentAct","title":"AskForConfirmationAgentAct","text":"<p>               Bases: <code>AgentAct</code></p> <p>Action for requesting user confirmation.</p> <p>This class handles confirmation requests for field values.</p> <p>Attributes:</p> Name Type Description <code>ws</code> <code>GenieWorksheet</code> <p>The worksheet context.</p> <code>field</code> <code>GenieField</code> <p>The field to confirm.</p> <code>ws_name</code> <p>Worksheet name override.</p> <code>field_name</code> <p>Field name override.</p> <code>value</code> <p>Value to confirm.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class AskForConfirmationAgentAct(AgentAct):\n    \"\"\"Action for requesting user confirmation.\n\n    This class handles confirmation requests for field values.\n\n    Attributes:\n        ws (GenieWorksheet): The worksheet context.\n        field (GenieField): The field to confirm.\n        ws_name: Worksheet name override.\n        field_name: Field name override.\n        value: Value to confirm.\n    \"\"\"\n\n    def __init__(\n        self, ws: \"GenieWorksheet\", field: \"GenieField\", ws_name=None, field_name=None\n    ):\n        self.ws = ws\n        self.field = field\n        self.ws_name = ws_name\n        self.field_name = field_name\n        self.value = None\n\n    def __repr__(self):\n        if self.ws_name:\n            ws_name = self.ws_name\n        else:\n            ws_name = self.ws.__class__.__name__\n\n        if self.field_name:\n            field_name = self.field_name\n        else:\n            field_name = self.field.name\n\n        return f\"AskForFieldConfirmation({ws_name}, {field_name})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskForConfirmationAgentAct-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.AskForConfirmationAgentAct.ws","title":"ws  <code>instance-attribute</code>","text":"<pre><code>ws = ws\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskForConfirmationAgentAct.field","title":"field  <code>instance-attribute</code>","text":"<pre><code>field = field\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskForConfirmationAgentAct.ws_name","title":"ws_name  <code>instance-attribute</code>","text":"<pre><code>ws_name = ws_name\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskForConfirmationAgentAct.field_name","title":"field_name  <code>instance-attribute</code>","text":"<pre><code>field_name = field_name\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskForConfirmationAgentAct.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value = None\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskForConfirmationAgentAct-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.AskForConfirmationAgentAct.__init__","title":"__init__","text":"<pre><code>__init__(ws: 'GenieWorksheet', field: 'GenieField', ws_name=None, field_name=None)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(\n    self, ws: \"GenieWorksheet\", field: \"GenieField\", ws_name=None, field_name=None\n):\n    self.ws = ws\n    self.field = field\n    self.ws_name = ws_name\n    self.field_name = field_name\n    self.value = None\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AskForConfirmationAgentAct.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __repr__(self):\n    if self.ws_name:\n        ws_name = self.ws_name\n    else:\n        ws_name = self.ws.__class__.__name__\n\n    if self.field_name:\n        field_name = self.field_name\n    else:\n        field_name = self.field.name\n\n    return f\"AskForFieldConfirmation({ws_name}, {field_name})\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AgentActs","title":"AgentActs","text":"<p>Container for managing multiple agent actions.</p> <p>This class manages collections of agent actions, handling action ordering and compatibility.</p> <p>Attributes:</p> Name Type Description <code>args</code> <p>Arguments for action management.</p> <code>actions</code> <code>list</code> <p>List of agent actions.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>class AgentActs:\n    \"\"\"Container for managing multiple agent actions.\n\n    This class manages collections of agent actions, handling action ordering\n    and compatibility.\n\n    Attributes:\n        args: Arguments for action management.\n        actions (list): List of agent actions.\n    \"\"\"\n\n    def __init__(self, args):\n        self.args = args\n        self.actions = []\n\n    def add(self, action):\n        self._add(action)\n\n    def _add(self, action):\n        if self.should_add(action):\n            self.actions.append(action)\n\n    def should_add(self, incoming_action):\n        \"\"\"There can be multiple ReportActs, and (multiple propose acts or one ask acts or one confirmation act) but only one of each type of act\"\"\"\n        acts_to_action = {}\n        for action in self.actions:\n            if action.__class__.__name__ in acts_to_action:\n                acts_to_action[action.__class__.__name__].append(action)\n            else:\n                acts_to_action[action.__class__.__name__] = [action]\n\n        # Check if the incoming action is a ReportAct, if it is then check if there is already a ReportAct with the same query\n        if incoming_action.__class__.__name__ == \"ReportAgentAct\":\n            for action in acts_to_action.get(\"ReportAgentAct\", []):\n                if (\n                    action.query == incoming_action.query\n                    and action.message == incoming_action.message\n                ):\n                    return False\n            return True\n        # Check if the incoming action is a ProposeAct, if it is then check if there is already a ProposeAct with the same query\n        # or AskAgentAct or AskForConfirmationAct are present\n        elif incoming_action.__class__.__name__ == \"ProposeAgentAct\":\n            if (\n                \"AskAgentAct\" in acts_to_action\n                or \"AskForConfirmationAgentAct\" in acts_to_action\n            ):\n                return False\n            for action in acts_to_action.get(\"ProposeAgentAct\", []):\n                if action.params == incoming_action.params and same_worksheet(\n                    action.ws, incoming_action.ws\n                ):\n                    return False\n            return True\n        # Check if the incoming action is a AskAgentAct, if other AskAgentAct or ProposeAgentAct or AskForConfirmationAgentAct are present\n        elif incoming_action.__class__.__name__ == \"AskAgentAct\":\n            if (\n                \"ProposeAgentAct\" in acts_to_action\n                or \"AskAgentAct\" in acts_to_action\n                or \"AskForConfirmationAgentAct\" in acts_to_action\n            ):\n                return False\n            return True\n        # Check if the incoming action is a AskForConfirmationAct, if other AskAgentAct or ProposeAgentAct or AskForConfirmationAgentAct are present\n        elif incoming_action.__class__.__name__ == \"AskForConfirmationAgentAct\":\n            if (\n                \"ProposeAgentAct\" in acts_to_action\n                or \"AskAgentAct\" in acts_to_action\n                or \"AskForConfirmationAgentAct\" in acts_to_action\n            ):\n                return False\n            return True\n\n        # for action in self.actions:\n        #     if isinstance(action, ReportAgentAct) or isinstance(action, ReportAgentAct):\n        #         if action == incoming_action:\n        #             return True\n        #     else:\n        #         return True\n\n        # return False\n\n    def extend(self, actions):\n        for action in actions:\n            self._add(action)\n\n    def __iter__(self):\n        return iter(self.actions)\n\n    def __next__(self):\n        return next(self.actions)\n\n    def can_have_other_acts(self):\n        acts_to_action = {}\n        for action in self.actions:\n            if action.__class__.__name__ in acts_to_action:\n                acts_to_action[action.__class__.__name__].append(action)\n            else:\n                acts_to_action[action.__class__.__name__] = [action]\n\n        if (\n            \"ProposeAgentAct\" in acts_to_action\n            or \"AskAgentAct\" in acts_to_action\n            or \"AskForConfirmationAgentAct\" in acts_to_action\n        ):\n            return False\n        return True\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AgentActs-attributes","title":"Attributes","text":""},{"location":"api/environment/#src.worksheets.environment.AgentActs.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args = args\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AgentActs.actions","title":"actions  <code>instance-attribute</code>","text":"<pre><code>actions = []\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AgentActs-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.AgentActs.__init__","title":"__init__","text":"<pre><code>__init__(args)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __init__(self, args):\n    self.args = args\n    self.actions = []\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AgentActs.add","title":"add","text":"<pre><code>add(action)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def add(self, action):\n    self._add(action)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AgentActs._add","title":"_add","text":"<pre><code>_add(action)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def _add(self, action):\n    if self.should_add(action):\n        self.actions.append(action)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AgentActs.should_add","title":"should_add","text":"<pre><code>should_add(incoming_action)\n</code></pre> <p>There can be multiple ReportActs, and (multiple propose acts or one ask acts or one confirmation act) but only one of each type of act</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def should_add(self, incoming_action):\n    \"\"\"There can be multiple ReportActs, and (multiple propose acts or one ask acts or one confirmation act) but only one of each type of act\"\"\"\n    acts_to_action = {}\n    for action in self.actions:\n        if action.__class__.__name__ in acts_to_action:\n            acts_to_action[action.__class__.__name__].append(action)\n        else:\n            acts_to_action[action.__class__.__name__] = [action]\n\n    # Check if the incoming action is a ReportAct, if it is then check if there is already a ReportAct with the same query\n    if incoming_action.__class__.__name__ == \"ReportAgentAct\":\n        for action in acts_to_action.get(\"ReportAgentAct\", []):\n            if (\n                action.query == incoming_action.query\n                and action.message == incoming_action.message\n            ):\n                return False\n        return True\n    # Check if the incoming action is a ProposeAct, if it is then check if there is already a ProposeAct with the same query\n    # or AskAgentAct or AskForConfirmationAct are present\n    elif incoming_action.__class__.__name__ == \"ProposeAgentAct\":\n        if (\n            \"AskAgentAct\" in acts_to_action\n            or \"AskForConfirmationAgentAct\" in acts_to_action\n        ):\n            return False\n        for action in acts_to_action.get(\"ProposeAgentAct\", []):\n            if action.params == incoming_action.params and same_worksheet(\n                action.ws, incoming_action.ws\n            ):\n                return False\n        return True\n    # Check if the incoming action is a AskAgentAct, if other AskAgentAct or ProposeAgentAct or AskForConfirmationAgentAct are present\n    elif incoming_action.__class__.__name__ == \"AskAgentAct\":\n        if (\n            \"ProposeAgentAct\" in acts_to_action\n            or \"AskAgentAct\" in acts_to_action\n            or \"AskForConfirmationAgentAct\" in acts_to_action\n        ):\n            return False\n        return True\n    # Check if the incoming action is a AskForConfirmationAct, if other AskAgentAct or ProposeAgentAct or AskForConfirmationAgentAct are present\n    elif incoming_action.__class__.__name__ == \"AskForConfirmationAgentAct\":\n        if (\n            \"ProposeAgentAct\" in acts_to_action\n            or \"AskAgentAct\" in acts_to_action\n            or \"AskForConfirmationAgentAct\" in acts_to_action\n        ):\n            return False\n        return True\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AgentActs.extend","title":"extend","text":"<pre><code>extend(actions)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def extend(self, actions):\n    for action in actions:\n        self._add(action)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AgentActs.__iter__","title":"__iter__","text":"<pre><code>__iter__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __iter__(self):\n    return iter(self.actions)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AgentActs.__next__","title":"__next__","text":"<pre><code>__next__()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def __next__(self):\n    return next(self.actions)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.AgentActs.can_have_other_acts","title":"can_have_other_acts","text":"<pre><code>can_have_other_acts()\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def can_have_other_acts(self):\n    acts_to_action = {}\n    for action in self.actions:\n        if action.__class__.__name__ in acts_to_action:\n            acts_to_action[action.__class__.__name__].append(action)\n        else:\n            acts_to_action[action.__class__.__name__] = [action]\n\n    if (\n        \"ProposeAgentAct\" in acts_to_action\n        or \"AskAgentAct\" in acts_to_action\n        or \"AskForConfirmationAgentAct\" in acts_to_action\n    ):\n        return False\n    return True\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment-functions","title":"Functions","text":""},{"location":"api/environment/#src.worksheets.environment.validation_check","title":"validation_check","text":"<pre><code>validation_check(name, value, validation)\n</code></pre> <p>Validate a value against specified criteria using LLM.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the field being validated.</p> required <code>value</code> <code>Any</code> <p>The value to validate.</p> required <code>validation</code> <code>str</code> <p>The validation criteria.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing: - bool: Whether the value is valid. - str or None: The reason for invalidity, if any.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def validation_check(name, value, validation):\n    \"\"\"Validate a value against specified criteria using LLM.\n\n    Args:\n        name (str): The name of the field being validated.\n        value (Any): The value to validate.\n        validation (str): The validation criteria.\n\n    Returns:\n        tuple: A tuple containing:\n            - bool: Whether the value is valid.\n            - str or None: The reason for invalidity, if any.\n    \"\"\"\n    prompt_path = \"validation_check.prompt\"\n    if isinstance(value, GenieValue):\n        val = str(value.value)\n    else:\n        val = str(value)\n    response = llm_generate(\n        prompt_path,\n        {\n            \"value\": val,\n            \"criteria\": validation,\n            \"name\": name,\n        },\n        model_name=\"gpt-4o-mini\",\n    )\n\n    bs = BeautifulSoup(response, \"html.parser\")\n    reason = bs.find(\"reason\")\n    valid = bs.find(\"valid\")\n\n    if valid:\n        return valid.text.strip().lower() == \"true\", None\n    return False, reason.text if reason else None\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.get_genie_fields_from_ws","title":"get_genie_fields_from_ws","text":"<pre><code>get_genie_fields_from_ws(obj: GenieWorksheet) -&gt; list[GenieField]\n</code></pre> <p>Get all GenieField instances from a GenieWorksheet.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>GenieWorksheet</code> <p>The worksheet to get fields from.</p> required <p>Returns:</p> Type Description <code>list[GenieField]</code> <p>list[GenieField]: List of GenieField instances.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def get_genie_fields_from_ws(obj: GenieWorksheet) -&gt; list[GenieField]:\n    \"\"\"Get all GenieField instances from a GenieWorksheet.\n\n    Args:\n        obj (GenieWorksheet): The worksheet to get fields from.\n\n    Returns:\n        list[GenieField]: List of GenieField instances.\n    \"\"\"\n    fields = []\n    for attr in obj._ordered_attributes:\n        if not attr.startswith(\"_\"):\n            field = getattr(obj, attr)\n            if isinstance(field, GenieField):\n                fields.append(field)\n    return fields\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.execute_query","title":"execute_query","text":"<pre><code>execute_query(code: str, obj: GenieWorksheet, bot: GenieRuntime, local_context: GenieContext) -&gt; Any\n</code></pre> <p>Execute a query in the given context.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The code to execute.</p> required <code>obj</code> <code>GenieWorksheet</code> <p>The worksheet object.</p> required <code>bot</code> <code>GenieRuntime</code> <p>The bot instance.</p> required <code>local_context</code> <code>GenieContext</code> <p>The local context.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The result of the query execution.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def execute_query(\n    code: str, obj: GenieWorksheet, bot: GenieRuntime, local_context: GenieContext\n) -&gt; Any:\n    \"\"\"Execute a query in the given context.\n\n    Args:\n        code (str): The code to execute.\n        obj (GenieWorksheet): The worksheet object.\n        bot (GenieRuntime): The bot instance.\n        local_context (GenieContext): The local context.\n\n    Returns:\n        Any: The result of the query execution.\n    \"\"\"\n    # refactoring the developer written code\n    code = modify_action_code(code, obj, bot, local_context)\n    code_ = f\"__return = {code}\"\n    local_context.context[\"__return\"] = None\n\n    bot.execute(code_, local_context)\n\n    if \"_obj\" in local_context.context:\n        del local_context.context[\"_obj\"]\n\n    result = local_context.context[\"__return\"]\n\n    del local_context.context[\"__return\"]\n    return result\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.modify_action_code","title":"modify_action_code","text":"<pre><code>modify_action_code(code, obj, bot, local_context)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def modify_action_code(code, obj, bot, local_context):\n    # Pattern to match decorators and their arguments\n    api_pattern = r\"@(\\w+)\\((.*?)\\)\"\n    api_matches = re.findall(api_pattern, code)\n\n    inbuilt_pattern = r\"&gt;(\\w+)\\((.*?)\\)\"\n    inbuilt_matches = re.findall(inbuilt_pattern, code)\n\n    def replace_sign(sign, matches, code):\n        for func_name, args in matches:\n            if (\n                func_name not in bot.context.context\n                and func_name not in local_context.context\n            ):\n                continue\n\n            # Replace the decorator with the direct function call in the code\n            code = re.sub(f\"{sign}{func_name}\", func_name, code)\n        return code\n\n    def replace_self(code):\n        # Replace 'self.' with 'custom_obj.' to reference the custom object\n        if isinstance(obj, GenieWorksheet):\n            local_context.context[\"_obj\"] = obj\n        elif isinstance(obj, GenieField):\n            local_context.context[\"_obj\"] = obj.parent\n        modified_args = code.replace(\"self.\", \"_obj\" + \".\")\n        modified_args = re.sub(r\"self$\", \"_obj\", modified_args)\n        modified_args = re.sub(r\"self}\", \"_obj\" + \"}\", modified_args)\n\n        return modified_args\n\n    code = replace_self(code)\n\n    code = replace_sign(\"@\", api_matches, code)\n    code = replace_sign(\"&gt;\", inbuilt_matches, code)\n    return code\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.eval_predicates","title":"eval_predicates","text":"<pre><code>eval_predicates(predicates: list | str, obj: GenieField | GenieWorksheet, bot: GenieRuntime, local_context: GenieContext) -&gt; bool\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def eval_predicates(\n    predicates: list | str,\n    obj: GenieField | GenieWorksheet,\n    bot: GenieRuntime,\n    local_context: GenieContext,\n) -&gt; bool:\n    if predicates is None:\n        return True\n    if len(predicates) == 0:\n        return True\n    if isinstance(predicates, list):\n        for predicate in predicates:\n            if not parse_single_predicate(predicate, obj, bot, local_context):\n                return False\n    else:\n        if not parse_single_predicate(predicates, obj, bot, local_context):\n            return False\n    return True\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.parse_single_predicate","title":"parse_single_predicate","text":"<pre><code>parse_single_predicate(predicate: str, obj, bot, context) -&gt; bool\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def parse_single_predicate(predicate: str, obj, bot, context) -&gt; bool:\n    if isinstance(predicate, bool):\n        return predicate\n    if predicate.upper() == \"TRUE\":\n        return True\n    elif predicate.upper() == \"FALSE\":\n        return False\n    elif predicate == \"\":\n        return True\n\n    code = modify_action_code(predicate, obj, bot, context)\n    code = sanitize_dev_code(code, bot.get_all_variables()).strip()\n\n    res: bool = bot.eval(code, context)\n\n    if \"_obj\" in context.context:\n        del context.context[\"_obj\"]\n    return res\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.rewrite_action_code","title":"rewrite_action_code","text":"<pre><code>rewrite_action_code(code, builtin_funcs)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def rewrite_action_code(code, builtin_funcs):\n    class CallTransformer(ast.NodeTransformer):\n        def __init__(self, builtin_funcs) -&gt; None:\n            super().__init__()\n            self.builtins = builtin_funcs\n\n        def visit_Call(self, node):\n            # Process the node further before possibly wrapping it\n            self.generic_visit(node)\n\n            # Wrap the function call in a result.append if it's not a built-in function\n            # Note: you'll need to determine if a function is built-in based on your criteria\n            if isinstance(node.func, ast.Name) and node.func.id in self.builtins:\n                append_call = ast.Expr(\n                    value=ast.Call(\n                        func=ast.Attribute(\n                            value=ast.Name(id=\"__return\", ctx=ast.Load()),\n                            attr=\"append\",\n                            ctx=ast.Load(),\n                        ),\n                        args=[node],\n                        keywords=[],\n                    )\n                )\n                return append_call\n            return node\n\n    # Parse the code into an AST\n    tree = ast.parse(code)\n\n    # Initialize the transformer and apply it\n    transformer = CallTransformer(builtin_funcs=builtin_funcs)\n    transformer.result_added = False\n    transformed_tree = transformer.visit(tree)\n\n    # Fix missing locations in the AST\n    # Convert the AST back to code\n    new_code = ast.unparse(ast.fix_missing_locations(transformed_tree))\n    return new_code\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.same_field","title":"same_field","text":"<pre><code>same_field(field1: GenieField, field2: GenieField)\n</code></pre> <p>Check if the values and confirmed status are the same for any two GenieField instances.</p> <p>Parameters:</p> Name Type Description Default <code>field1</code> <code>GenieField</code> <p>The first field to compare.</p> required <code>field2</code> <code>GenieField</code> <p>The second field to compare.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the fields are the same, False otherwise.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def same_field(field1: GenieField, field2: GenieField):\n    \"\"\"Check if the values and confirmed status are the same for any two GenieField instances.\n\n    Args:\n        field1 (GenieField): The first field to compare.\n        field2 (GenieField): The second field to compare.\n\n    Returns:\n        bool: True if the fields are the same, False otherwise.\n    \"\"\"\n\n    return field1.value == field2.value and field1.confirmed == field2.confirmed\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.same_worksheet","title":"same_worksheet","text":"<pre><code>same_worksheet(ws1: GenieWorksheet, ws2: GenieWorksheet)\n</code></pre> <p>Check if two GenieWorksheet instances are the same.</p> <p>Parameters:</p> Name Type Description Default <code>ws1</code> <code>GenieWorksheet</code> <p>The first worksheet to compare.</p> required <code>ws2</code> <code>GenieWorksheet</code> <p>The second worksheet to compare.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the worksheets are the same, False otherwise.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def same_worksheet(ws1: GenieWorksheet, ws2: GenieWorksheet):\n    \"\"\"Check if two GenieWorksheet instances are the same.\n\n    Args:\n        ws1 (GenieWorksheet): The first worksheet to compare.\n        ws2 (GenieWorksheet): The second worksheet to compare.\n\n    Returns:\n        bool: True if the worksheets are the same, False otherwise.\n    \"\"\"\n    # If the randomly generated id is different, then the worksheets are different\n    if hasattr(ws1, \"random_id\") and hasattr(ws2, \"random_id\"):\n        if ws1.random_id != ws2.random_id:\n            return False\n\n    # Check if the fields in both worksheets are the same starting from WS1\n    for field in get_genie_fields_from_ws(ws1):\n        for field2 in get_genie_fields_from_ws(ws2):\n            if field.name == field2.name:\n                if type(field.value) is not type(field2.value):\n                    return False\n                if isinstance(field.value, GenieWorksheet) and isinstance(\n                    field2.value, GenieWorksheet\n                ):\n                    # Recursively check if the worksheets are the same\n                    # if the value of the current field is a worksheet\n                    if not same_worksheet(field.value, field2.value):\n                        return False\n                else:\n                    if not same_field(field, field2):\n                        return False\n\n    # Check if the fields in both worksheets are the same starting from WS2\n    for field in get_genie_fields_from_ws(ws2):\n        for field2 in get_genie_fields_from_ws(ws1):\n            if field.name == field2.name:\n                if isinstance(field.value, GenieWorksheet):\n                    if not same_worksheet(field.value, field2.value):\n                        return False\n                else:\n                    if not same_field(field, field2):\n                        return False\n\n    return True\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.count_number_of_vars","title":"count_number_of_vars","text":"<pre><code>count_number_of_vars(context: dict)\n</code></pre> <p>Count the number of variables of the same type in the context.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>dict</code> <p>The context to count variables in.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary with variable names as keys and their counts as values.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def count_number_of_vars(context: dict):\n    \"\"\"Count the number of variables of the same type in the context.\n\n    Args:\n        context (dict): The context to count variables in.\n\n    Returns:\n        dict: A dictionary with variable names as keys and their counts as values.\"\"\"\n    var_counters = {}\n    for key, value in context.items():\n        if isinstance(value, Answer):\n            continue\n        if isinstance(value, GenieWorksheet):\n            var_name = generate_var_name(value.__class__.__name__)\n            if var_name not in var_counters:\n                var_counters[var_name] = -1\n            var_counters[var_name] += 1\n\n    return var_counters\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.genie_deepcopy","title":"genie_deepcopy","text":"<pre><code>genie_deepcopy(context)\n</code></pre> <p>Special deepcopy function for Genie context.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def genie_deepcopy(context):\n    \"\"\"Special deepcopy function for Genie context.\"\"\"\n    new_context = {}\n    for key, value in context.items():\n        if key == \"__builtins__\":\n            continue\n        if isinstance(value, GenieWorksheet):\n            new_context[key] = deepcopy(value)\n        elif isinstance(value, GenieField):\n            new_context[key] = deepcopy(value)\n        else:\n            new_context[key] = value\n    return new_context\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.get_field_variable_name","title":"get_field_variable_name","text":"<pre><code>get_field_variable_name(obj: GenieWorksheet, context: GenieContext)\n</code></pre> <p>Get the variable name of a field in a worksheet.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>GenieWorksheet</code> <p>The worksheet object.</p> required <code>context</code> <code>GenieContext</code> <p>The context to search in.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The variable name of the field.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def get_field_variable_name(obj: GenieWorksheet, context: GenieContext):\n    \"\"\"Get the variable name of a field in a worksheet.\n\n    Args:\n        obj (GenieWorksheet): The worksheet object.\n        context (GenieContext): The context to search in.\n\n    Returns:\n        str: The variable name of the field.\n    \"\"\"\n    for name, value in context.context.items():\n        if not inspect.isclass(value) and isinstance(value, GenieWorksheet):\n            for field in get_genie_fields_from_ws(value):\n                if field == obj:\n                    return name + \".\" + field.name\n\n    return obj\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.collect_all_parents","title":"collect_all_parents","text":"<pre><code>collect_all_parents(context: GenieContext)\n</code></pre> <p>Collect all parent references for GenieField instances in the context.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>GenieContext</code> <p>The context to collect parents from.</p> required Source code in <code>src/worksheets/environment.py</code> <pre><code>def collect_all_parents(context: GenieContext):\n    \"\"\"Collect all parent references for GenieField instances in the context.\n\n    Args:\n        context (GenieContext): The context to collect parents from.\n    \"\"\"\n    for key, value in context.context.items():\n        if isinstance(value, GenieWorksheet):\n            for field in get_genie_fields_from_ws(value):\n                if isinstance(field, GenieField):\n                    field.parent = value\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.find_all_variables_matching_name","title":"find_all_variables_matching_name","text":"<pre><code>find_all_variables_matching_name(field_name: str, context: GenieContext)\n</code></pre> <p>Go through all the variables in the context recursively and return the variables that match the field_name</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def find_all_variables_matching_name(field_name: str, context: GenieContext):\n    \"\"\"Go through all the variables in the context recursively and return the variables that match the field_name\"\"\"\n    variables = []\n\n    def find_matching_variables(obj, field_name, key):\n        for field in get_genie_fields_from_ws(obj):\n            if field.name == field_name:\n                variables.append(key + \".\" + field_name)\n            # if isinstance(field.value, GenieWorksheet):\n            # find_matching_variables(field.value, field_name, key + \".\" + field.name)\n\n    for key, value in context.context.items():\n        if isinstance(value, GenieWorksheet):\n            find_matching_variables(value, field_name, key)\n\n    return variables\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.replace_undefined_variables","title":"replace_undefined_variables","text":"<pre><code>replace_undefined_variables(code: str, local_context: GenieContext, global_context: GenieContext)\n</code></pre> <p>Replace undefined variables in the code with their corresponding values from the context.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def replace_undefined_variables(\n    code: str, local_context: GenieContext, global_context: GenieContext\n):\n    \"\"\"Replace undefined variables in the code with their corresponding values from the context.\"\"\"\n\n    class ReplaceVariables(ast.NodeTransformer):\n        def visit_Name(self, node):\n            if node.id in local_context.context:\n                if isinstance(local_context.context[node.id], GenieField):\n                    if node.id.endswith(\".value\"):\n                        name = node.id\n                    else:\n                        name = node.id + \".value\"\n                    return ast.copy_location(\n                        ast.Name(\n                            id=name,\n                            ctx=node.ctx,\n                        ),\n                        node,\n                    )\n            elif node.id in global_context.context:\n                if isinstance(global_context.context[node.id], GenieField):\n                    if node.id.endswith(\".value\"):\n                        name = node.id\n                    else:\n                        name = node.id + \".value\"\n                    return ast.copy_location(\n                        ast.Name(\n                            id=name,\n                            ctx=node.ctx,\n                        ),\n                        node,\n                    )\n            else:\n                replacement_var = variable_resolver(\n                    node.id, global_context, local_context\n                )\n                if replacement_var:\n                    if replacement_var.endswith(\".value\"):\n                        name = replacement_var\n                    else:\n                        name = replacement_var + \".value\"\n                    return ast.copy_location(\n                        ast.Name(\n                            id=name,\n                            ctx=node.ctx,\n                        ),\n                        node,\n                    )\n            return node\n\n    # Parse the code into an AST\n    tree = ast.parse(code)\n\n    # Modify the AST\n    tree = ReplaceVariables().visit(tree)\n\n    # Convert back to source code\n    code = ast.unparse(tree)\n    code = code.replace(\".value.value\", \".value\")\n    return code\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.variable_resolver","title":"variable_resolver","text":"<pre><code>variable_resolver(var_name, global_context, local_context)\n</code></pre> <p>We need to resolve the variable name since they are stored as . in the context and the user only provides the field name. We also need to keep track of the latest object of a worksheet so that we can resolve the variable name correctly. Source code in <code>src/worksheets/environment.py</code> <pre><code>def variable_resolver(var_name, global_context, local_context):\n    \"\"\"We need to resolve the variable name since they are stored as &lt;obj_name&gt;.&lt;field_name&gt; in the context\n    and the user only provides the field name. We also need to keep track of the latest object of a worksheet\n    so that we can resolve the variable name correctly.\n    \"\"\"\n    if var_name in local_context.context:\n        return var_name\n    elif var_name in global_context.context:\n        return var_name\n    else:\n        candidates = find_all_variables_matching_name(var_name, local_context)\n\n        if len(candidates) == 0:\n            candidates = find_all_variables_matching_name(var_name, global_context)\n\n        if len(candidates) == 1:\n            return candidates[0]\n        elif len(candidates) &gt; 1:\n            logger.info(f\"Could not resolve the variable name {var_name}.\")\n            logger.info(f\"Found multiple candidates: {candidates}\")\n            return candidates[0]\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.select_variable_from_list","title":"select_variable_from_list","text":"<pre><code>select_variable_from_list(variables, value)\n</code></pre> Source code in <code>src/worksheets/environment.py</code> <pre><code>def select_variable_from_list(variables, value):\n    for var in variables:\n        if same_worksheet(var, value):\n            return generate_var_name(value.__class__.__name__)\n\n    return None\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.get_variable_name","title":"get_variable_name","text":"<pre><code>get_variable_name(obj: GenieWorksheet, context: GenieContext)\n</code></pre> <p>Get the variable name of a worksheet in the context.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>GenieWorksheet</code> <p>The worksheet object.</p> required <code>context</code> <code>GenieContext</code> <p>The context to search in.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The variable name of the worksheet.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def get_variable_name(obj: GenieWorksheet, context: GenieContext):\n    \"\"\"Get the variable name of a worksheet in the context.\n\n    Args:\n        obj (GenieWorksheet): The worksheet object.\n        context (GenieContext): The context to search in.\n\n    Returns:\n        str: The variable name of the worksheet.\n    \"\"\"\n    potential_objs = []\n    if isinstance(obj, GenieWorksheet):\n        for name, value in context.context.items():\n            if not inspect.isclass(value) and isinstance(value, GenieWorksheet):\n                if value.__class__.__name__ == obj.__class__.__name__:\n                    potential_objs.append((name, value))\n\n    if len(potential_objs) == 1:\n        return potential_objs[0][0]\n    elif len(potential_objs) &gt; 1:\n        for name, value in potential_objs:\n            fields_value = [(f.name, f.value) for f in get_genie_fields_from_ws(value)]\n            obj_fields_value = [\n                (f.name, f.value) for f in get_genie_fields_from_ws(obj)\n            ]\n\n            if deep_compare_lists(fields_value, obj_fields_value):\n                return name\n\n    return obj\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.propose","title":"propose","text":"<pre><code>propose(worksheet: GenieWorksheet, params: dict) -&gt; ProposeAgentAct\n</code></pre> <p>Create a proposal action.</p> <p>Parameters:</p> Name Type Description Default <code>worksheet</code> <code>GenieWorksheet</code> <p>The worksheet to propose values for.</p> required <code>params</code> <code>dict</code> <p>The parameters to propose.</p> required <p>Returns:</p> Name Type Description <code>ProposeAgentAct</code> <code>ProposeAgentAct</code> <p>The created proposal action.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def propose(worksheet: GenieWorksheet, params: dict) -&gt; ProposeAgentAct:\n    \"\"\"Create a proposal action.\n\n    Args:\n        worksheet (GenieWorksheet): The worksheet to propose values for.\n        params (dict): The parameters to propose.\n\n    Returns:\n        ProposeAgentAct: The created proposal action.\n    \"\"\"\n    return ProposeAgentAct(worksheet(**params), params)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.say","title":"say","text":"<pre><code>say(message: str) -&gt; ReportAgentAct\n</code></pre> <p>Create a message report action.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to report.</p> required <p>Returns:</p> Name Type Description <code>ReportAgentAct</code> <code>ReportAgentAct</code> <p>The created report action.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def say(message: str) -&gt; ReportAgentAct:\n    \"\"\"Create a message report action.\n\n    Args:\n        message (str): The message to report.\n\n    Returns:\n        ReportAgentAct: The created report action.\n    \"\"\"\n    return ReportAgentAct(None, message)\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.generate_clarification","title":"generate_clarification","text":"<pre><code>generate_clarification(worksheet: GenieWorksheet, field: str) -&gt; str\n</code></pre> <p>Generate clarification text for a field.</p> <p>Parameters:</p> Name Type Description Default <code>worksheet</code> <code>GenieWorksheet</code> <p>The worksheet containing the field.</p> required <code>field</code> <code>str</code> <p>The name of the field.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The generated clarification text.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def generate_clarification(worksheet: GenieWorksheet, field: str) -&gt; str:\n    \"\"\"Generate clarification text for a field.\n\n    Args:\n        worksheet (GenieWorksheet): The worksheet containing the field.\n        field (str): The name of the field.\n\n    Returns:\n        str: The generated clarification text.\n    \"\"\"\n    for f in get_genie_fields_from_ws(worksheet):\n        if f.name == field:\n            if inspect.isclass(f.slottype) and issubclass(f.slottype, Enum):\n                options = [x.name for x in list(f.slottype.__members__.values())]\n                options = \", \".join(options)\n                option_desc = f.description + f\" Options are: {options}\"\n                return option_desc\n            return f.description\n\n    return \"\"\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.answer_clarification_question","title":"answer_clarification_question","text":"<pre><code>answer_clarification_question(worksheet: GenieField, field: GenieField, context: GenieContext) -&gt; ReportAgentAct\n</code></pre> <p>Create a clarification answer action.</p> <p>Parameters:</p> Name Type Description Default <code>worksheet</code> <code>GenieField</code> <p>The worksheet field.</p> required <code>field</code> <code>GenieField</code> <p>The field to clarify.</p> required <code>context</code> <code>GenieContext</code> <p>The context.</p> required <p>Returns:</p> Name Type Description <code>ReportAgentAct</code> <code>ReportAgentAct</code> <p>The created clarification report action.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def answer_clarification_question(\n    worksheet: GenieField, field: GenieField, context: GenieContext\n) -&gt; ReportAgentAct:\n    \"\"\"Create a clarification answer action.\n\n    Args:\n        worksheet (GenieField): The worksheet field.\n        field (GenieField): The field to clarify.\n        context (GenieContext): The context.\n\n    Returns:\n        ReportAgentAct: The created clarification report action.\n    \"\"\"\n    ws = context.context[worksheet.value]\n    return ReportAgentAct(\n        f\"AskClarification({worksheet.value}, {field.value})\",\n        generate_clarification(ws, field.value),\n    )\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.confirm","title":"confirm","text":"<pre><code>confirm(value: Any) -&gt; GenieValue\n</code></pre> <p>Create a confirmed value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to confirm.</p> required <p>Returns:</p> Name Type Description <code>GenieValue</code> <code>GenieValue</code> <p>The confirmed value instance.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def confirm(value: Any) -&gt; GenieValue:\n    \"\"\"Create a confirmed value.\n\n    Args:\n        value (Any): The value to confirm.\n\n    Returns:\n        GenieValue: The confirmed value instance.\n    \"\"\"\n    if isinstance(value, GenieValue):\n        return value.confirm()\n    return GenieValue(value).confirm()\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.sanitize_dev_code","title":"sanitize_dev_code","text":"<pre><code>sanitize_dev_code(code: str, all_variables: list[str])\n</code></pre> <p>Sanitize the developer's code to ensure it doesn't contain any undefined variables.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def sanitize_dev_code(code: str, all_variables: list[str]):\n    \"\"\"Sanitize the developer's code to ensure it doesn't contain any undefined variables.\"\"\"\n    lexer = PythonLexer()\n    tokens = lexer.get_tokens(code)\n    new_tokens_list = []\n    for token in tokens:\n        if token[0] == Token.Name and token[1] in all_variables:\n            new_tokens_list.append((Token.Name, token[1] + \".value\"))\n        else:\n            new_tokens_list.append(token)\n\n    new_code = tokenize.untokenize(new_tokens_list)\n    return new_code\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.any_open_empty_ws","title":"any_open_empty_ws","text":"<pre><code>any_open_empty_ws(turn_context: GenieContext, global_context: GenieContext)\n</code></pre> <p>Checks all the worksheets in the context. If there is any worksheet that is available but all the fields are None, then return True else return False</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def any_open_empty_ws(turn_context: GenieContext, global_context: GenieContext):\n    \"\"\"Checks all the worksheets in the context. If there is any worksheet that is available but all the fields are None, then return True\n    else return False\n    \"\"\"\n    for key, value in turn_context.context.items():\n        if isinstance(value, GenieWorksheet):\n            all_none = True\n            for field in get_genie_fields_from_ws(value):\n                if field.value is not None:\n                    all_none = False\n                    break\n\n            if all_none:\n                return True\n\n    for key, value in global_context.context.items():\n        if isinstance(value, GenieWorksheet):\n            all_none = True\n            for field in get_genie_fields_from_ws(value):\n                if field.value is not None:\n                    all_none = False\n                    break\n\n            if all_none:\n                return True\n\n    return False\n</code></pre>"},{"location":"api/environment/#src.worksheets.environment.find_list_variable","title":"find_list_variable","text":"<pre><code>find_list_variable(val, context)\n</code></pre> <p>Find the variable name which is a list and the index of the required value in the context.</p> Source code in <code>src/worksheets/environment.py</code> <pre><code>def find_list_variable(val, context):\n    \"\"\"Find the variable name which is a list and the index of the required value in the context.\"\"\"\n    for key, value in context.context.items():\n        if isinstance(value, list):\n            for idx, v in enumerate(value):\n                if v == val:\n                    return key, str(idx)\n    return None, None\n</code></pre>"},{"location":"api/from_spreadsheet/","title":"From Spreadsheet","text":""},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet","title":"src.worksheets.from_spreadsheet","text":""},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet-attributes","title":"Attributes","text":""},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.gsheet_range_default","title":"gsheet_range_default  <code>module-attribute</code>","text":"<pre><code>gsheet_range_default = 'A1:AD1007'\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.FORM_PREDICATE","title":"FORM_PREDICATE  <code>module-attribute</code>","text":"<pre><code>FORM_PREDICATE = 0\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.FORM_NAME","title":"FORM_NAME  <code>module-attribute</code>","text":"<pre><code>FORM_NAME = 1\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.FIELD_PREDICATE","title":"FIELD_PREDICATE  <code>module-attribute</code>","text":"<pre><code>FIELD_PREDICATE = 2\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.KIND","title":"KIND  <code>module-attribute</code>","text":"<pre><code>KIND = 3\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.FIELD_TYPE","title":"FIELD_TYPE  <code>module-attribute</code>","text":"<pre><code>FIELD_TYPE = 4\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.FIELD_NAME","title":"FIELD_NAME  <code>module-attribute</code>","text":"<pre><code>FIELD_NAME = 5\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.VARIABLE_ENUMS","title":"VARIABLE_ENUMS  <code>module-attribute</code>","text":"<pre><code>VARIABLE_ENUMS = 6\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.FIELD_DESCRIPTION","title":"FIELD_DESCRIPTION  <code>module-attribute</code>","text":"<pre><code>FIELD_DESCRIPTION = 7\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.DONT_ASK","title":"DONT_ASK  <code>module-attribute</code>","text":"<pre><code>DONT_ASK = 8\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.REQUIRED","title":"REQUIRED  <code>module-attribute</code>","text":"<pre><code>REQUIRED = 9\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.FIELD_CONFIRMATION","title":"FIELD_CONFIRMATION  <code>module-attribute</code>","text":"<pre><code>FIELD_CONFIRMATION = 10\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.FIELD_ACTION","title":"FIELD_ACTION  <code>module-attribute</code>","text":"<pre><code>FIELD_ACTION = 11\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.FORM_ACTION","title":"FORM_ACTION  <code>module-attribute</code>","text":"<pre><code>FORM_ACTION = 12\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.FIELD_VALIDATION","title":"FIELD_VALIDATION  <code>module-attribute</code>","text":"<pre><code>FIELD_VALIDATION = 13\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.EMPTY_COL","title":"EMPTY_COL  <code>module-attribute</code>","text":"<pre><code>EMPTY_COL = 14\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.str_to_type","title":"str_to_type  <code>module-attribute</code>","text":"<pre><code>str_to_type = {'str': str, 'int': int, 'float': float, 'bool': bool, 'date': date, 'time': time}\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet-functions","title":"Functions","text":""},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.gsheet_to_classes","title":"gsheet_to_classes","text":"<pre><code>gsheet_to_classes(gsheet_id, gsheet_range=gsheet_range_default)\n</code></pre> <p>Convert Google Sheets data to Genie classes.</p> <p>Parameters:</p> Name Type Description Default <code>gsheet_id</code> <code>str</code> <p>The ID of the Google Sheet.</p> required <code>gsheet_range</code> <code>str</code> <p>The range of cells to retrieve.</p> <code>gsheet_range_default</code> <p>Yields:</p> Type Description <p>Tuple[str, type]: The type of the class and the class itself.</p> Source code in <code>src/worksheets/from_spreadsheet.py</code> <pre><code>def gsheet_to_classes(gsheet_id, gsheet_range=gsheet_range_default):\n    \"\"\"Convert Google Sheets data to Genie classes.\n\n    Args:\n        gsheet_id (str): The ID of the Google Sheet.\n        gsheet_range (str): The range of cells to retrieve.\n\n    Yields:\n        Tuple[str, type]: The type of the class and the class itself.\"\"\"\n    rows = retrieve_gsheet(gsheet_id, gsheet_range)\n    if not rows:\n        raise ValueError(\"No data found.\")\n\n    rows = fill_all_empty(rows, EMPTY_COL + 1)\n\n    # removing headers from the CSV\n    rows = rows[1:]\n\n    # strip all the cells\n    rows = [[cell.strip() for cell in row] for row in rows]\n\n    # collecting all the rows\n    forms = []\n    i = 0\n    while i &lt; len(rows):\n        enums = []\n        if len(rows[i][FORM_NAME]):\n            forms.append(\n                {\n                    \"form\": rows[i],\n                    \"fields\": [],\n                    \"outputs\": [],\n                }\n            )\n        else:\n            if rows[i][FIELD_TYPE] == \"Enum\":\n                enum_idx = i + 1\n                while (\n                    enum_idx &lt; len(rows)\n                    and not len(rows[enum_idx][FIELD_TYPE].strip())\n                    and not len(rows[enum_idx][FIELD_NAME].strip())\n                ):\n                    enums.append(rows[enum_idx][VARIABLE_ENUMS])\n                    enum_idx += 1\n\n            if rows[i][KIND] == \"output\":\n                forms[-1][\"outputs\"].append({\"slottype\": rows[i][FIELD_TYPE]})\n            else:\n                forms[-1][\"fields\"].append(\n                    {\n                        \"slottype\": (\n                            rows[i][FIELD_TYPE]\n                            if rows[i][FIELD_TYPE] != \"Enum\"\n                            else create_enum_class(rows[i][FIELD_NAME], enums)\n                        ),\n                        \"name\": rows[i][FIELD_NAME],\n                        \"description\": rows[i][FIELD_DESCRIPTION],\n                        \"predicate\": rows[i][FIELD_PREDICATE],\n                        \"ask\": not rows[i][DONT_ASK] == \"TRUE\",\n                        \"optional\": not rows[i][REQUIRED] == \"TRUE\",\n                        \"actions\": Action(rows[i][FIELD_ACTION]),\n                        \"value\": None,\n                        \"requires_confirmation\": rows[i][FIELD_CONFIRMATION] == \"TRUE\",\n                        \"internal\": False if rows[i][KIND].lower() == \"input\" else True,\n                        \"primary_key\": (\n                            True if \"primary\" in rows[i][KIND].lower() else False\n                        ),\n                        \"validation\": (\n                            None\n                            if len(rows[i][FIELD_VALIDATION].strip()) == 0\n                            else rows[i][FIELD_VALIDATION]\n                        ),\n                    }\n                )\n        if len(enums):\n            i = enum_idx\n        else:\n            i += 1\n\n    # creating the genie worksheet\n    for form in forms:\n        class_name = form[\"form\"][FORM_NAME].replace(\" \", \"\")\n        form_predicate = form[\"form\"][FORM_PREDICATE]\n        form_action = Action(form[\"form\"][FORM_ACTION])\n        backend_api = form[\"form\"][FIELD_NAME]\n        outputs = form[\"outputs\"]\n        fields = form[\"fields\"]\n        genie_type = form[\"form\"][FIELD_TYPE].lower()\n        yield create_class(\n            class_name,\n            fields,\n            genie_type,\n            form_predicate,\n            form_action,\n            backend_api,\n            outputs,\n        )\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.create_class","title":"create_class","text":"<pre><code>create_class(class_name, fields, genie_type, form_predicate, form_action, backend_api, outputs)\n</code></pre> <p>Create a class dynamically based on the provided parameters.</p> <p>Parameters:</p> Name Type Description Default <code>class_name</code> <code>str</code> <p>The name of the class to create.</p> required <code>fields</code> <code>list</code> <p>A list of field dictionaries.</p> required <code>genie_type</code> <code>str</code> <p>The type of the Genie class (worksheet, db, type).</p> required <code>form_predicate</code> <code>str</code> <p>The predicate for the form.</p> required <code>form_action</code> <code>Action</code> <p>The action associated with the form.</p> required <code>backend_api</code> <code>str</code> <p>The backend API associated with the form.</p> required <code>outputs</code> <code>list</code> <p>A list of output dictionaries.</p> required <p>Returns:</p> Type Description <p>Tuple[str, type]: The type of the class and the class itself.</p> Source code in <code>src/worksheets/from_spreadsheet.py</code> <pre><code>def create_class(\n    class_name,\n    fields,\n    genie_type,\n    form_predicate,\n    form_action,\n    backend_api,\n    outputs,\n):\n    \"\"\"Create a class dynamically based on the provided parameters.\n\n    Args:\n        class_name (str): The name of the class to create.\n        fields (list): A list of field dictionaries.\n        genie_type (str): The type of the Genie class (worksheet, db, type).\n        form_predicate (str): The predicate for the form.\n        form_action (Action): The action associated with the form.\n        backend_api (str): The backend API associated with the form.\n        outputs (list): A list of output dictionaries.\n\n    Returns:\n        Tuple[str, type]: The type of the class and the class itself.\"\"\"\n\n    # Create a dictionary for class attributes\n    class_dict = {}\n    for field_dict in fields:\n        # Here, you would handle custom field types or validations\n        class_dict[field_dict[\"name\"]] = GenieField(**field_dict)\n\n    if genie_type == \"worksheet\":\n        class_dict[\"predicate\"] = form_predicate\n        class_dict[\"outputs\"] = [output[\"slottype\"] for output in outputs]\n        class_dict[\"actions\"] = form_action\n        class_dict[\"backend_api\"] = backend_api\n        return (genie_type, type(class_name, (GenieWorksheet,), class_dict))\n    elif genie_type == \"db\":\n        class_dict[\"outputs\"] = [output[\"slottype\"] for output in outputs]\n        class_dict[\"actions\"] = form_action\n        return (genie_type, type(class_name, (GenieDB,), class_dict))\n    elif genie_type == \"type\":\n        class_dict[\"predicate\"] = form_predicate\n        class_dict[\"actions\"] = form_action\n        return (genie_type, type(class_name, (GenieType,), class_dict))\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.create_enum_class","title":"create_enum_class","text":"<pre><code>create_enum_class(class_name, enums)\n</code></pre> <p>Create an Enum class dynamically</p> <p>Parameters:</p> Name Type Description Default <code>class_name</code> <code>str</code> <p>The name of the Enum class.</p> required <code>enums</code> <code>list</code> <p>A list of enum values.</p> required <p>Returns:</p> Name Type Description <code>Enum</code> <p>The created Enum class.</p> Source code in <code>src/worksheets/from_spreadsheet.py</code> <pre><code>def create_enum_class(class_name, enums):\n    \"\"\"Create an Enum class dynamically\n\n    Args:\n        class_name (str): The name of the Enum class.\n        enums (list): A list of enum values.\n\n    Returns:\n        Enum: The created Enum class.\"\"\"\n\n    enums = [e.strip() for e in enums if len(e.strip())]\n    return Enum(convert_snake_to_camel_case(class_name), enums)\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.convert_snake_to_camel_case","title":"convert_snake_to_camel_case","text":"<pre><code>convert_snake_to_camel_case(snake_str: str)\n</code></pre> <p>Convert a snake_case string to camelCase.</p> <p>Parameters:</p> Name Type Description Default <code>snake_str</code> <code>str</code> <p>The snake_case string to convert.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The converted camelCase string.</p> Source code in <code>src/worksheets/from_spreadsheet.py</code> <pre><code>def convert_snake_to_camel_case(snake_str: str):\n    \"\"\"Convert a snake_case string to camelCase.\n\n    Args:\n        snake_str (str): The snake_case string to convert.\n\n    Returns:\n        str: The converted camelCase string.\n    \"\"\"\n    components = snake_str.split(\"_\")\n    return components[0] + \"\".join(x.title() for x in components[1:])\n</code></pre>"},{"location":"api/from_spreadsheet/#src.worksheets.from_spreadsheet.gsheet_to_genie","title":"gsheet_to_genie","text":"<pre><code>gsheet_to_genie(gsheet_id, gsheet_range=gsheet_range_default)\n</code></pre> <p>Convert Google Sheets data to Genie componenets that are used to create the agent</p> <p>Parameters:</p> Name Type Description Default <code>gsheet_id</code> <code>str</code> <p>The ID of the Google Sheet.</p> required <code>gsheet_range</code> <code>str</code> <p>The range of cells to retrieve.</p> <code>gsheet_range_default</code> <p>Returns:</p> Type Description <p>Tuple[List[GenieWorksheet], List[GenieDB], List[GenieType]]: The lists of Genie components.</p> Source code in <code>src/worksheets/from_spreadsheet.py</code> <pre><code>def gsheet_to_genie(\n    gsheet_id,\n    gsheet_range=gsheet_range_default,\n):\n    \"\"\"Convert Google Sheets data to Genie componenets that are used to create the agent\n\n    Args:\n        gsheet_id (str): The ID of the Google Sheet.\n        gsheet_range (str): The range of cells to retrieve.\n\n    Returns:\n        Tuple[List[GenieWorksheet], List[GenieDB], List[GenieType]]: The lists of Genie components.\n    \"\"\"\n    genie_worsheets = []\n    genie_worsheets_names = {}\n    genie_dbs = []\n    genie_dbs_names = {}\n    genie_types = []\n    genie_types_names = {}\n    for genie_type, cls in gsheet_to_classes(gsheet_id, gsheet_range):\n        if genie_type == \"worksheet\":\n            genie_worsheets.append(cls)\n            genie_worsheets_names[cls.__name__] = cls\n        elif genie_type == \"db\":\n            genie_dbs.append(cls)\n            genie_dbs_names[cls.__name__] = cls\n        elif genie_type == \"type\":\n            genie_types.append(cls)\n            genie_types_names[cls.__name__] = cls\n\n    for worksheet in genie_worsheets + genie_dbs + genie_types:\n        for field in get_genie_fields_from_ws(worksheet):\n            if isinstance(field.slottype, str):\n                if field.slottype in str_to_type:\n                    field.slottype = str_to_type[field.slottype]\n                elif field.slottype == \"confirm\":\n                    field.slottype = \"confirm\"\n                elif field.slottype == \"Enum\":\n                    field.slottype = Enum(field.name, field.slottype[1])\n                elif field.slottype.startswith(\"List\"):\n                    if field.slottype[5:-1] in genie_types_names:\n                        field.slottype = List[genie_types_names[field.slottype[5:-1]]]\n                    elif field.slottype[5:-1] in genie_dbs_names:\n                        field.slottype = List[genie_dbs_names[field.slottype[5:-1]]]\n                    elif field.slottype[5:-1] in genie_worsheets_names:\n                        field.slottype = List[\n                            genie_worsheets_names[field.slottype[5:-1]]\n                        ]\n                    else:\n                        if field.slottype[5:-1] in str_to_type:\n                            field.slottype = List[str_to_type[field.slottype[5:-1]]]\n                        else:\n                            raise ValueError(f\"Unknown type {field.slottype}\")\n                elif field.slottype in genie_types_names:\n                    field.slottype = genie_types_names[field.slottype]\n                elif field.slottype in genie_dbs_names:\n                    field.slottype = genie_dbs_names[field.slottype]\n                elif field.slottype in genie_worsheets_names:\n                    field.slottype = genie_worsheets_names[field.slottype]\n                else:\n                    raise ValueError(f\"Unknown type {field.slottype}\")\n\n    for ws in genie_dbs + genie_worsheets:\n        for output in ws.outputs:\n            if output in genie_worsheets_names:\n                ws.outputs[ws.outputs.index(output)] = genie_worsheets_names[output]\n            elif output in genie_types_names:\n                ws.outputs[ws.outputs.index(output)] = genie_types_names[output]\n            else:\n                raise ValueError(f\"Unknown type {output}\")\n\n    return genie_worsheets, genie_dbs, genie_types\n</code></pre>"},{"location":"api/knowledge/","title":"Knowledge","text":""},{"location":"api/knowledge/#src.worksheets.knowledge","title":"src.worksheets.knowledge","text":""},{"location":"api/knowledge/#src.worksheets.knowledge-attributes","title":"Attributes","text":""},{"location":"api/knowledge/#src.worksheets.knowledge.CURRENT_DIR","title":"CURRENT_DIR  <code>module-attribute</code>","text":"<pre><code>CURRENT_DIR = dirname(realpath(__file__))\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge-classes","title":"Classes","text":""},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase","title":"SUQLKnowledgeBase","text":"<p>               Bases: <code>BaseModel</code></p> <p>Knowledge base for SUQL queries</p> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>class SUQLKnowledgeBase(BaseModel):\n    \"\"\"Knowledge base for SUQL queries\"\"\"\n\n    # Name of the LLM model to use for the queries\n    llm_model_name: str\n\n    # Tables with primary keys as values for the queries.\n    # TODO: This should be automatically generated from the database schema\n    tables_with_primary_keys: Optional[dict] = None\n\n    # Name of the database to run the queries on\n    database_name: Optional[str] = None\n\n    # Address of the embedding server to use for the queries on free-text data\n    embedding_server_address: Optional[str] = None\n\n    # Mapping of free-text files to their paths for free-text data\n    source_file_mapping: Optional[dict] = None\n\n    # Function to run on the generated SUQL query\n    postprocessing_fn: Callable\n\n    # Function to run on the result from execution of the SUQL query\n    result_postprocessing_fn: Optional[Callable] = None\n\n    # Maximum number of rows to return in the result\n    max_rows: int = 3\n\n    # Username for the database\n    db_username: Optional[str] = None\n\n    # Password for the database\n    db_password: Optional[str] = None\n\n    # db host\n    db_host: str = \"127.0.0.1\"\n\n    # db port\n    db_port: str = \"5432\"\n\n    # Additional parameters for Azure\n    api_base: Optional[str] = None\n\n    api_version: Optional[str] = None\n\n    def run(self, query, *args, **kwargs):\n        \"\"\"Run the SUQL query and return the result.\"\"\"\n\n        if self.postprocessing_fn:\n            query = self.postprocessing_fn(query)\n\n        query = query.strip().replace(\"\\\\'\", \"'\")\n\n        results, column_names, _ = suql_execute(\n            query,\n            table_w_ids=self.tables_with_primary_keys,\n            database=self.database_name,\n            llm_model_name=self.llm_model_name,\n            embedding_server_address=self.embedding_server_address,\n            source_file_mapping=self.source_file_mapping,\n            select_username=self.db_username,\n            select_userpswd=self.db_password,\n            host=self.db_host,\n            port=self.db_port,\n            api_base=self.api_base,\n            api_version=self.api_version,\n        )\n\n        # Convert the results to a list of dictionaries for genie worksheets\n        results = [dict(zip(column_names, result)) for result in results]\n\n        if self.result_postprocessing_fn:\n            results = self.result_postprocessing_fn(results, column_names)\n\n        return results[: self.max_rows]\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase-attributes","title":"Attributes","text":""},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.llm_model_name","title":"llm_model_name  <code>instance-attribute</code>","text":"<pre><code>llm_model_name: str\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.tables_with_primary_keys","title":"tables_with_primary_keys  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tables_with_primary_keys: Optional[dict] = None\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.database_name","title":"database_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>database_name: Optional[str] = None\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.embedding_server_address","title":"embedding_server_address  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>embedding_server_address: Optional[str] = None\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.source_file_mapping","title":"source_file_mapping  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_file_mapping: Optional[dict] = None\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.postprocessing_fn","title":"postprocessing_fn  <code>instance-attribute</code>","text":"<pre><code>postprocessing_fn: Callable\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.result_postprocessing_fn","title":"result_postprocessing_fn  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result_postprocessing_fn: Optional[Callable] = None\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.max_rows","title":"max_rows  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max_rows: int = 3\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.db_username","title":"db_username  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>db_username: Optional[str] = None\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.db_password","title":"db_password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>db_password: Optional[str] = None\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.db_host","title":"db_host  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>db_host: str = '127.0.0.1'\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.db_port","title":"db_port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>db_port: str = '5432'\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.api_base","title":"api_base  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_base: Optional[str] = None\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.api_version","title":"api_version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_version: Optional[str] = None\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase-functions","title":"Functions","text":""},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLKnowledgeBase.run","title":"run","text":"<pre><code>run(query, *args, **kwargs)\n</code></pre> <p>Run the SUQL query and return the result.</p> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>def run(self, query, *args, **kwargs):\n    \"\"\"Run the SUQL query and return the result.\"\"\"\n\n    if self.postprocessing_fn:\n        query = self.postprocessing_fn(query)\n\n    query = query.strip().replace(\"\\\\'\", \"'\")\n\n    results, column_names, _ = suql_execute(\n        query,\n        table_w_ids=self.tables_with_primary_keys,\n        database=self.database_name,\n        llm_model_name=self.llm_model_name,\n        embedding_server_address=self.embedding_server_address,\n        source_file_mapping=self.source_file_mapping,\n        select_username=self.db_username,\n        select_userpswd=self.db_password,\n        host=self.db_host,\n        port=self.db_port,\n        api_base=self.api_base,\n        api_version=self.api_version,\n    )\n\n    # Convert the results to a list of dictionaries for genie worksheets\n    results = [dict(zip(column_names, result)) for result in results]\n\n    if self.result_postprocessing_fn:\n        results = self.result_postprocessing_fn(results, column_names)\n\n    return results[: self.max_rows]\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.BaseSUQLParser","title":"BaseSUQLParser","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for SUQL parsers</p> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>class BaseSUQLParser(BaseModel):\n    \"\"\"Base class for SUQL parsers\"\"\"\n\n    # Name of the LLM model to use for the queries\n    llm_model_name: str\n\n    async def parse(self, dlg_history: List[CurrentDialogueTurn], query: str):\n        raise NotImplementedError\n\n    def convert_dlg_turn_to_suql_dlg_turn(self, dlg_history, turn, db_results):\n        # Convert the dialog history to the expected format for SUQL\n        suql_dlg_history = []\n        for i, turn in enumerate(dlg_history):\n            user_target = turn.user_target_suql\n            agent_utterance = turn.system_response\n            user_utterance = turn.user_utterance\n\n            if db_results is None:\n                db_result = [\n                    obj.result\n                    for obj in turn.context.context.values()\n                    if isinstance(obj, Answer)\n                    and obj.query.value == turn.user_target_suql\n                ]\n            else:\n                db_result = db_results[i]\n\n            suql_dlg_history.append(\n                SUQLDialogueTurn(\n                    user_utterance=user_utterance,\n                    db_results=db_result,\n                    user_target=user_target,\n                    agent_utterance=agent_utterance,\n                )\n            )\n\n        return suql_dlg_history\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.BaseSUQLParser-attributes","title":"Attributes","text":""},{"location":"api/knowledge/#src.worksheets.knowledge.BaseSUQLParser.llm_model_name","title":"llm_model_name  <code>instance-attribute</code>","text":"<pre><code>llm_model_name: str\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.BaseSUQLParser-functions","title":"Functions","text":""},{"location":"api/knowledge/#src.worksheets.knowledge.BaseSUQLParser.parse","title":"parse  <code>async</code>","text":"<pre><code>parse(dlg_history: List[CurrentDialogueTurn], query: str)\n</code></pre> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>async def parse(self, dlg_history: List[CurrentDialogueTurn], query: str):\n    raise NotImplementedError\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.BaseSUQLParser.convert_dlg_turn_to_suql_dlg_turn","title":"convert_dlg_turn_to_suql_dlg_turn","text":"<pre><code>convert_dlg_turn_to_suql_dlg_turn(dlg_history, turn, db_results)\n</code></pre> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>def convert_dlg_turn_to_suql_dlg_turn(self, dlg_history, turn, db_results):\n    # Convert the dialog history to the expected format for SUQL\n    suql_dlg_history = []\n    for i, turn in enumerate(dlg_history):\n        user_target = turn.user_target_suql\n        agent_utterance = turn.system_response\n        user_utterance = turn.user_utterance\n\n        if db_results is None:\n            db_result = [\n                obj.result\n                for obj in turn.context.context.values()\n                if isinstance(obj, Answer)\n                and obj.query.value == turn.user_target_suql\n            ]\n        else:\n            db_result = db_results[i]\n\n        suql_dlg_history.append(\n            SUQLDialogueTurn(\n                user_utterance=user_utterance,\n                db_results=db_result,\n                user_target=user_target,\n                agent_utterance=agent_utterance,\n            )\n        )\n\n    return suql_dlg_history\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLParser","title":"SUQLParser","text":"<p>               Bases: <code>BaseSUQLParser</code></p> <p>Parser for SUQL queries</p> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>class SUQLParser(BaseSUQLParser):\n    \"\"\"Parser for SUQL queries\"\"\"\n\n    # Selector for the prompt to use for the queries\n    prompt_selector: Optional[Callable] = None\n\n    async def parse(\n        self,\n        dlg_history: List[CurrentDialogueTurn],\n        query: str,\n        bot: GenieRuntime,\n        db_results: List[str] | None = None,\n    ):\n        \"\"\"\n        A SUQL conversational semantic parser, with a pre-set prompt file.\n        The function convets the List[CurrentDialogueTurn] to the expected format\n        in SUQL (suql.agent.DialogueTurn) and calls the prompt file.\n\n        # Parameters:\n\n        `dlg_history` (List[CurrentDialogueTurn]): a list of past dialog turns.\n\n        `query` (str): the current query to be parsed.\n\n        # Returns:\n\n        `parsed_output` (str): a parsed SUQL output\n        \"\"\"\n\n        suql_dlg_history = self.convert_dlg_turn_to_suql_dlg_turn(\n            dlg_history, query, db_results\n        )\n\n        # Use the prompt selector if available\n        if self.prompt_selector:\n            prompt_file = await self.prompt_selector(bot, dlg_history, query)\n        else:\n            prompt_file = \"suql_parser.prompt\"\n\n        # Generate the SUQL output\n        parsed_output = await llm_generate(\n            prompt_file,\n            prompt_inputs={\n                \"dlg\": suql_dlg_history,\n                \"query\": query,\n                \"date\": datetime.now().strftime(\"%Y-%m-%d\"),\n                \"day\": datetime.now().strftime(\"%A\"),\n                \"day_tmr\": (datetime.now() + timedelta(days=1)).strftime(\"%A\"),\n            },\n            prompt_dir=bot.prompt_dir,\n            model_name=self.llm_model_name,\n            temperature=0.0,\n        )\n\n        return extract_code_block_from_output(parsed_output, lang=\"sql\")\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLParser-attributes","title":"Attributes","text":""},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLParser.llm_model_name","title":"llm_model_name  <code>instance-attribute</code>","text":"<pre><code>llm_model_name: str\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLParser.prompt_selector","title":"prompt_selector  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prompt_selector: Optional[Callable] = None\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLParser-functions","title":"Functions","text":""},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLParser.convert_dlg_turn_to_suql_dlg_turn","title":"convert_dlg_turn_to_suql_dlg_turn","text":"<pre><code>convert_dlg_turn_to_suql_dlg_turn(dlg_history, turn, db_results)\n</code></pre> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>def convert_dlg_turn_to_suql_dlg_turn(self, dlg_history, turn, db_results):\n    # Convert the dialog history to the expected format for SUQL\n    suql_dlg_history = []\n    for i, turn in enumerate(dlg_history):\n        user_target = turn.user_target_suql\n        agent_utterance = turn.system_response\n        user_utterance = turn.user_utterance\n\n        if db_results is None:\n            db_result = [\n                obj.result\n                for obj in turn.context.context.values()\n                if isinstance(obj, Answer)\n                and obj.query.value == turn.user_target_suql\n            ]\n        else:\n            db_result = db_results[i]\n\n        suql_dlg_history.append(\n            SUQLDialogueTurn(\n                user_utterance=user_utterance,\n                db_results=db_result,\n                user_target=user_target,\n                agent_utterance=agent_utterance,\n            )\n        )\n\n    return suql_dlg_history\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLParser.parse","title":"parse  <code>async</code>","text":"<pre><code>parse(dlg_history: List[CurrentDialogueTurn], query: str, bot: GenieRuntime, db_results: List[str] | None = None)\n</code></pre> <p>A SUQL conversational semantic parser, with a pre-set prompt file. The function convets the List[CurrentDialogueTurn] to the expected format in SUQL (suql.agent.DialogueTurn) and calls the prompt file.</p>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLParser.parse--parameters","title":"Parameters:","text":"<p><code>dlg_history</code> (List[CurrentDialogueTurn]): a list of past dialog turns.</p> <p><code>query</code> (str): the current query to be parsed.</p>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLParser.parse--returns","title":"Returns:","text":"<p><code>parsed_output</code> (str): a parsed SUQL output</p> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>async def parse(\n    self,\n    dlg_history: List[CurrentDialogueTurn],\n    query: str,\n    bot: GenieRuntime,\n    db_results: List[str] | None = None,\n):\n    \"\"\"\n    A SUQL conversational semantic parser, with a pre-set prompt file.\n    The function convets the List[CurrentDialogueTurn] to the expected format\n    in SUQL (suql.agent.DialogueTurn) and calls the prompt file.\n\n    # Parameters:\n\n    `dlg_history` (List[CurrentDialogueTurn]): a list of past dialog turns.\n\n    `query` (str): the current query to be parsed.\n\n    # Returns:\n\n    `parsed_output` (str): a parsed SUQL output\n    \"\"\"\n\n    suql_dlg_history = self.convert_dlg_turn_to_suql_dlg_turn(\n        dlg_history, query, db_results\n    )\n\n    # Use the prompt selector if available\n    if self.prompt_selector:\n        prompt_file = await self.prompt_selector(bot, dlg_history, query)\n    else:\n        prompt_file = \"suql_parser.prompt\"\n\n    # Generate the SUQL output\n    parsed_output = await llm_generate(\n        prompt_file,\n        prompt_inputs={\n            \"dlg\": suql_dlg_history,\n            \"query\": query,\n            \"date\": datetime.now().strftime(\"%Y-%m-%d\"),\n            \"day\": datetime.now().strftime(\"%A\"),\n            \"day_tmr\": (datetime.now() + timedelta(days=1)).strftime(\"%A\"),\n        },\n        prompt_dir=bot.prompt_dir,\n        model_name=self.llm_model_name,\n        temperature=0.0,\n    )\n\n    return extract_code_block_from_output(parsed_output, lang=\"sql\")\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser","title":"SUQLReActParser","text":"<p>               Bases: <code>BaseSUQLParser</code></p> <p>ReAct Parser for SUQL queries</p> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>class SUQLReActParser(BaseSUQLParser):\n    \"\"\"ReAct Parser for SUQL queries\"\"\"\n\n    # Select examples for the queries\n    example_path: str\n\n    # Select instructions for the queries\n    instruction_path: str\n\n    # Select table schema for the queries\n    table_schema_path: str\n\n    # Knowledge base for the queries\n    knowledge: SUQLKnowledgeBase\n\n    # List of examples for the queries\n    examples: Optional[List[str]] = None\n\n    # List of instructions for the queries\n    instructions: Optional[List[str]] = None\n\n    # Table schema for the queries\n    table_schema: Optional[str] = None\n\n    # Conversation history for the queries\n    conversation_history: List = []\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        if self.examples is None:\n            self.examples = []\n            with open(self.example_path, \"r\") as f:\n                text = f.read()\n\n            for example in text.split(\"--\"):\n                if example.strip():\n                    self.examples.append(example.strip())\n\n        if self.instructions is None:\n            with open(self.instruction_path, \"r\") as f:\n                self.instructions = f.readlines()\n\n        if self.table_schema is None:\n            with open(self.table_schema_path, \"r\") as f:\n                self.table_schema = f.read()\n\n    async def parse(\n        self,\n        dlg_history: List[CurrentDialogueTurn],\n        query: str,\n        bot: GenieRuntime,\n        db_results: List[str] | None = None,\n    ):\n        suql_dlg_history = self.convert_dlg_turn_to_suql_dlg_turn(\n            dlg_history, query, db_results\n        )\n\n        self.conversation_history = suql_dlg_history\n\n        output = await self.anext_turn(\n            query,\n            update_conversation_history=False,\n            table_w_ids=self.knowledge.tables_with_primary_keys,\n            database_name=self.knowledge.database_name,\n            embedding_server_address=self.knowledge.embedding_server_address,\n            source_file_mapping=self.knowledge.source_file_mapping,\n        )\n\n        # TODO: KeyError: 'final_sql'\n        # happens when the action_counter limit is met without a final SQL being generated\n        logger.info(f\"SUQL output: {output}\")\n        try:\n            final_output = output[\"final_sql\"].sql\n        except Exception as e:\n            logger.error(f\"Error in parsing output: {e}\")\n            final_output = None\n        return final_output\n\n    async def anext_turn(\n        self,\n        user_input: str,\n        update_conversation_history: bool = False,\n        table_w_ids: dict = None,\n        database_name: str = None,\n        embedding_server_address: str = None,\n        source_file_mapping: dict = None,\n    ):\n        try:\n            parser = PartToWholeParser()\n            parser.initialize(\n                engine=self.llm_model_name,\n                table_w_ids=table_w_ids,\n                database_name=database_name,\n                suql_model_name=self.knowledge.llm_model_name,\n                suql_api_base=self.knowledge.api_base,\n                suql_api_version=self.knowledge.api_version,\n                embedding_server_address=embedding_server_address,\n                source_file_mapping=source_file_mapping,\n                domain_instructions=self.instructions,\n                examples=self.examples,\n                table_schema=self.table_schema,\n            )\n\n            output = await parser.arun(\n                {\n                    \"question\": user_input,\n                    \"conversation_history\": self.conversation_history,\n                }\n            )\n        finally:\n            write_prompt_logs_to_file(append=True, include_timestamp=True)\n\n        if update_conversation_history:\n            self.update_turn(self.conversation_history, output, response=None)\n\n        return output\n\n    def update_turn(self, conversation_history, output, response):\n        turn = DialogueTurn(\n            user_utterance=output[\"question\"],\n            agent_utterance=response,\n            user_target=output[\"final_sql\"].sql,\n            db_results=output[\"final_sql\"].execution_result,\n        )\n\n        conversation_history.append(turn)\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser-attributes","title":"Attributes","text":""},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.llm_model_name","title":"llm_model_name  <code>instance-attribute</code>","text":"<pre><code>llm_model_name: str\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.example_path","title":"example_path  <code>instance-attribute</code>","text":"<pre><code>example_path: str\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.instruction_path","title":"instruction_path  <code>instance-attribute</code>","text":"<pre><code>instruction_path: str\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.table_schema_path","title":"table_schema_path  <code>instance-attribute</code>","text":"<pre><code>table_schema_path: str\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.knowledge","title":"knowledge  <code>instance-attribute</code>","text":"<pre><code>knowledge: SUQLKnowledgeBase\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples: Optional[List[str]] = None\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.conversation_history","title":"conversation_history  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conversation_history: List = []\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.instructions","title":"instructions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>instructions: Optional[List[str]] = readlines()\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.table_schema","title":"table_schema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>table_schema: Optional[str] = read()\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser-functions","title":"Functions","text":""},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.convert_dlg_turn_to_suql_dlg_turn","title":"convert_dlg_turn_to_suql_dlg_turn","text":"<pre><code>convert_dlg_turn_to_suql_dlg_turn(dlg_history, turn, db_results)\n</code></pre> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>def convert_dlg_turn_to_suql_dlg_turn(self, dlg_history, turn, db_results):\n    # Convert the dialog history to the expected format for SUQL\n    suql_dlg_history = []\n    for i, turn in enumerate(dlg_history):\n        user_target = turn.user_target_suql\n        agent_utterance = turn.system_response\n        user_utterance = turn.user_utterance\n\n        if db_results is None:\n            db_result = [\n                obj.result\n                for obj in turn.context.context.values()\n                if isinstance(obj, Answer)\n                and obj.query.value == turn.user_target_suql\n            ]\n        else:\n            db_result = db_results[i]\n\n        suql_dlg_history.append(\n            SUQLDialogueTurn(\n                user_utterance=user_utterance,\n                db_results=db_result,\n                user_target=user_target,\n                agent_utterance=agent_utterance,\n            )\n        )\n\n    return suql_dlg_history\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.__init__","title":"__init__","text":"<pre><code>__init__(**kwargs)\n</code></pre> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>def __init__(self, **kwargs):\n    super().__init__(**kwargs)\n\n    if self.examples is None:\n        self.examples = []\n        with open(self.example_path, \"r\") as f:\n            text = f.read()\n\n        for example in text.split(\"--\"):\n            if example.strip():\n                self.examples.append(example.strip())\n\n    if self.instructions is None:\n        with open(self.instruction_path, \"r\") as f:\n            self.instructions = f.readlines()\n\n    if self.table_schema is None:\n        with open(self.table_schema_path, \"r\") as f:\n            self.table_schema = f.read()\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.parse","title":"parse  <code>async</code>","text":"<pre><code>parse(dlg_history: List[CurrentDialogueTurn], query: str, bot: GenieRuntime, db_results: List[str] | None = None)\n</code></pre> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>async def parse(\n    self,\n    dlg_history: List[CurrentDialogueTurn],\n    query: str,\n    bot: GenieRuntime,\n    db_results: List[str] | None = None,\n):\n    suql_dlg_history = self.convert_dlg_turn_to_suql_dlg_turn(\n        dlg_history, query, db_results\n    )\n\n    self.conversation_history = suql_dlg_history\n\n    output = await self.anext_turn(\n        query,\n        update_conversation_history=False,\n        table_w_ids=self.knowledge.tables_with_primary_keys,\n        database_name=self.knowledge.database_name,\n        embedding_server_address=self.knowledge.embedding_server_address,\n        source_file_mapping=self.knowledge.source_file_mapping,\n    )\n\n    # TODO: KeyError: 'final_sql'\n    # happens when the action_counter limit is met without a final SQL being generated\n    logger.info(f\"SUQL output: {output}\")\n    try:\n        final_output = output[\"final_sql\"].sql\n    except Exception as e:\n        logger.error(f\"Error in parsing output: {e}\")\n        final_output = None\n    return final_output\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.anext_turn","title":"anext_turn  <code>async</code>","text":"<pre><code>anext_turn(user_input: str, update_conversation_history: bool = False, table_w_ids: dict = None, database_name: str = None, embedding_server_address: str = None, source_file_mapping: dict = None)\n</code></pre> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>async def anext_turn(\n    self,\n    user_input: str,\n    update_conversation_history: bool = False,\n    table_w_ids: dict = None,\n    database_name: str = None,\n    embedding_server_address: str = None,\n    source_file_mapping: dict = None,\n):\n    try:\n        parser = PartToWholeParser()\n        parser.initialize(\n            engine=self.llm_model_name,\n            table_w_ids=table_w_ids,\n            database_name=database_name,\n            suql_model_name=self.knowledge.llm_model_name,\n            suql_api_base=self.knowledge.api_base,\n            suql_api_version=self.knowledge.api_version,\n            embedding_server_address=embedding_server_address,\n            source_file_mapping=source_file_mapping,\n            domain_instructions=self.instructions,\n            examples=self.examples,\n            table_schema=self.table_schema,\n        )\n\n        output = await parser.arun(\n            {\n                \"question\": user_input,\n                \"conversation_history\": self.conversation_history,\n            }\n        )\n    finally:\n        write_prompt_logs_to_file(append=True, include_timestamp=True)\n\n    if update_conversation_history:\n        self.update_turn(self.conversation_history, output, response=None)\n\n    return output\n</code></pre>"},{"location":"api/knowledge/#src.worksheets.knowledge.SUQLReActParser.update_turn","title":"update_turn","text":"<pre><code>update_turn(conversation_history, output, response)\n</code></pre> Source code in <code>src/worksheets/knowledge.py</code> <pre><code>def update_turn(self, conversation_history, output, response):\n    turn = DialogueTurn(\n        user_utterance=output[\"question\"],\n        agent_utterance=response,\n        user_target=output[\"final_sql\"].sql,\n        db_results=output[\"final_sql\"].execution_result,\n    )\n\n    conversation_history.append(turn)\n</code></pre>"},{"location":"api/utils/","title":"Utility Modules","text":""},{"location":"api/utils/#annotation-utils","title":"Annotation Utils","text":""},{"location":"api/utils/#src.worksheets.annotation_utils","title":"src.worksheets.annotation_utils","text":"<p>Utility functions for handling Genie worksheet annotations and context management.</p> <p>This module provides utilities for managing and formatting Genie worksheet annotations, handling different types of answers, and preparing context for semantic parsing and dialogue interactions.</p>"},{"location":"api/utils/#src.worksheets.annotation_utils-functions","title":"Functions","text":""},{"location":"api/utils/#src.worksheets.annotation_utils.handle_genie_type","title":"handle_genie_type","text":"<pre><code>handle_genie_type(key, value, context, response_generator)\n</code></pre> <p>Processes a Genie type value and generates its schema representation.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key/name of the Genie type value.</p> required <code>value</code> <code>Union[GenieType, Answer, GenieWorksheet]</code> <p>The value to process.</p> required <code>context</code> <p>The context object containing variable information.</p> required <code>response_generator</code> <code>bool</code> <p>Flag indicating whether to include response generation info.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The schema representation of the Genie type value, or None if not applicable.</p> Source code in <code>src/worksheets/annotation_utils.py</code> <pre><code>def handle_genie_type(key, value, context, response_generator):\n    \"\"\"Processes a Genie type value and generates its schema representation.\n\n    Args:\n        key (str): The key/name of the Genie type value.\n        value (Union[GenieType, Answer, GenieWorksheet]): The value to process.\n        context: The context object containing variable information.\n        response_generator (bool): Flag indicating whether to include response generation info.\n\n    Returns:\n        str: The schema representation of the Genie type value, or None if not applicable.\n    \"\"\"\n    schema = \"\"\n    if isinstance(value, GenieType):\n        return\n    if key.startswith(\"__\"):  # To prevent __answer_result from shown in the schema\n        return\n    if isinstance(value, Answer):\n        if value.query.value is not None and response_generator:\n            schema += (\n                key\n                + \" = answer(\"\n                + repr(value.nl_query)\n                + \", sql=\"\n                + repr(value.query.value)\n                + \")\\n\"\n            )\n        else:\n            schema += key + \" = answer(\" + repr(value.nl_query) + \")\\n\"\n\n        if value.result:\n            if hasattr(value.result, \"value\"):\n                res = value.result.value\n            else:\n                res = value.result\n            if isinstance(res, list):\n                parent_var_name = None\n                indices = []\n\n                result_strings = []\n                for val in res:\n                    if isinstance(val, GenieType):\n                        var_name, idx = find_list_variable(val, context)\n                        if var_name is None and idx is None:\n                            result_strings.append(val)\n                        else:\n                            if (\n                                parent_var_name is not None\n                                and parent_var_name != var_name\n                            ):\n                                logger.error(\n                                    \"Cannot handle multiple list variables in the same answer\"\n                                )\n                            parent_var_name = var_name  # Ignoring any potential multiple list variables\n\n                            indices.append(idx)\n                    else:\n                        result_strings.append(val)\n\n                if parent_var_name:\n                    indices_str = []\n                    for idx in indices:\n                        indices_str.append(f\"{parent_var_name}[{idx}]\")\n\n                    result_strings = \"[\" + \", \".join(indices_str) + \"]\"\n\n            else:\n                result_strings = (\n                    res.schema_without_type(context)\n                    if isinstance(res, GenieWorksheet)\n                    else res\n                )\n            schema += key + \".result = \" + str(result_strings) + \"\\n\"\n        else:\n            schema += key + \".result = None\\n\"\n    elif isinstance(value, GenieWorksheet):\n        if value.__class__.__name__ == \"MoreFieldInfo\":\n            return\n        schema += key + \" = \" + str(value.schema_without_type(context)) + \"\\n\"\n        if hasattr(value, \"result\"):\n            if value.result:\n                schema += key + \".result = \" + str(value.result.value) + \"\\n\"\n\n    return schema\n</code></pre>"},{"location":"api/utils/#src.worksheets.annotation_utils.get_context_schema","title":"get_context_schema","text":"<pre><code>get_context_schema(context, response_generator=False)\n</code></pre> <p>Generates a schema representation of the given context.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <p>The context object containing variables and their values.</p> required <code>response_generator</code> <code>bool</code> <p>Flag to include response generation info. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>A string representation of the context schema with escaped backslashes removed.</p> Source code in <code>src/worksheets/annotation_utils.py</code> <pre><code>def get_context_schema(context, response_generator=False):\n    \"\"\"Generates a schema representation of the given context.\n\n    Args:\n        context: The context object containing variables and their values.\n        response_generator (bool, optional): Flag to include response generation info. Defaults to False.\n\n    Returns:\n        str: A string representation of the context schema with escaped backslashes removed.\n    \"\"\"\n    schema = \"\"\n\n    for key, value in context.context.items():\n        if isinstance(value, list):\n            bad_list = False\n            for val in value:\n                if not isinstance(val, GenieType):\n                    bad_list = True\n                    break\n\n            if not bad_list:\n                schema += key + \" = \" + str(value) + \"\\n\"\n        else:\n            new_schema = handle_genie_type(key, value, context, response_generator)\n            if new_schema:\n                schema += new_schema\n\n    return schema.replace(\"\\\\\", \"\")\n</code></pre>"},{"location":"api/utils/#src.worksheets.annotation_utils.get_agent_action_schemas","title":"get_agent_action_schemas","text":"<pre><code>get_agent_action_schemas(agent_acts, *args, **kwargs)\n</code></pre> <p>Converts agent actions into their schema representations.</p> <p>Parameters:</p> Name Type Description Default <code>agent_acts</code> <p>List of agent actions to convert.</p> required <code>*args</code> <p>Variable length argument list.</p> <code>()</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>list</code> <p>List of string representations of agent actions.</p> Source code in <code>src/worksheets/annotation_utils.py</code> <pre><code>def get_agent_action_schemas(agent_acts, *args, **kwargs):\n    \"\"\"Converts agent actions into their schema representations.\n\n    Args:\n        agent_acts: List of agent actions to convert.\n        *args: Variable length argument list.\n        **kwargs: Arbitrary keyword arguments.\n\n    Returns:\n        list: List of string representations of agent actions.\n    \"\"\"\n    agent_acts_schema = []\n    if agent_acts:\n        for act in agent_acts:\n            agent_acts_schema.append(str(act))\n\n    return agent_acts_schema\n</code></pre>"},{"location":"api/utils/#src.worksheets.annotation_utils.prepare_context_input","title":"prepare_context_input","text":"<pre><code>prepare_context_input(bot, dlg_history, current_dlg_turn)\n</code></pre> <p>Prepares context input for dialogue processing.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <p>The bot instance containing context and configuration.</p> required <code>dlg_history</code> <p>List of previous dialogue turns.</p> required <code>current_dlg_turn</code> <p>The current dialogue turn being processed.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing (state_schema, agent_acts, agent_utterance).</p> Source code in <code>src/worksheets/annotation_utils.py</code> <pre><code>def prepare_context_input(bot, dlg_history, current_dlg_turn):\n    \"\"\"Prepares context input for dialogue processing.\n\n    Args:\n        bot: The bot instance containing context and configuration.\n        dlg_history: List of previous dialogue turns.\n        current_dlg_turn: The current dialogue turn being processed.\n\n    Returns:\n        tuple: A tuple containing (state_schema, agent_acts, agent_utterance).\n    \"\"\"\n    if len(dlg_history):\n        state_schema = get_context_schema(bot.context)\n        agent_acts = json.dumps(\n            get_agent_action_schemas(dlg_history[-1].system_action, bot.context),\n            indent=2,\n        )\n        agent_utterance = dlg_history[-1].system_response\n    else:\n        state_schema = \"None\"\n        agent_acts = \"None\"\n        agent_utterance = bot.starting_prompt\n\n    return state_schema, agent_acts, agent_utterance\n</code></pre>"},{"location":"api/utils/#src.worksheets.annotation_utils.prepare_semantic_parser_input","title":"prepare_semantic_parser_input","text":"<pre><code>prepare_semantic_parser_input(bot, dlg_history, current_dlg_turn)\n</code></pre> <p>Prepares input for semantic parsing by gathering necessary context and schemas.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <p>The bot instance containing worksheets and database models.</p> required <code>dlg_history</code> <p>List of previous dialogue turns.</p> required <code>current_dlg_turn</code> <p>The current dialogue turn being processed.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing (state_schema, agent_acts, agent_utterance,    available_worksheets_text, available_dbs_text).</p> Source code in <code>src/worksheets/annotation_utils.py</code> <pre><code>def prepare_semantic_parser_input(bot, dlg_history, current_dlg_turn):\n    \"\"\"Prepares input for semantic parsing by gathering necessary context and schemas.\n\n    Args:\n        bot: The bot instance containing worksheets and database models.\n        dlg_history: List of previous dialogue turns.\n        current_dlg_turn: The current dialogue turn being processed.\n\n    Returns:\n        tuple: A tuple containing (state_schema, agent_acts, agent_utterance,\n               available_worksheets_text, available_dbs_text).\n    \"\"\"\n    state_schema, agent_acts, agent_utterance = prepare_context_input(\n        bot, dlg_history, current_dlg_turn\n    )\n\n    available_worksheets = [\n        ws.get_semantic_parser_schema() for ws in bot.genie_worksheets\n    ]\n    available_worksheets_text = \"\\n\".join(available_worksheets)\n\n    available_dbs = [db.get_semantic_parser_schema() for db in bot.genie_db_models]\n    available_dbs_text = \"\\n\".join(available_dbs)\n    return (\n        state_schema,\n        agent_acts,\n        agent_utterance,\n        available_worksheets_text,\n        available_dbs_text,\n    )\n</code></pre>"},{"location":"api/utils/#utils","title":"Utils","text":""},{"location":"api/utils/#src.worksheets.utils","title":"src.worksheets.utils","text":""},{"location":"api/utils/#src.worksheets.utils-functions","title":"Functions","text":""},{"location":"api/utils/#src.worksheets.utils.callable_name","title":"callable_name","text":"<pre><code>callable_name(any_callable)\n</code></pre> Source code in <code>src/worksheets/utils.py</code> <pre><code>def callable_name(any_callable):\n    if isinstance(any_callable, partial):\n        return any_callable.func.__name__\n\n    try:\n        return any_callable.__name__\n    except AttributeError:\n        return str(any_callable)\n</code></pre>"},{"location":"api/utils/#src.worksheets.utils.deep_compare_lists","title":"deep_compare_lists","text":"<pre><code>deep_compare_lists(list1, list2)\n</code></pre> Source code in <code>src/worksheets/utils.py</code> <pre><code>def deep_compare_lists(list1, list2):\n    try:\n        # First, try the simple Counter method for hashable elements.\n        from collections import Counter\n\n        return Counter(list1) == Counter(list2)\n    except TypeError:\n        # If elements are unhashable, fall back to a method that sorts them.\n        # This requires all elements to be comparable.\n        try:\n            return sorted(list1) == sorted(list2)\n        except TypeError:\n            # Final fallback: Convert inner structures to tuples if they are lists\n            def to_tuple(x):\n                if isinstance(x, list):\n                    return tuple(to_tuple(e) for e in x)\n                return x\n\n            return sorted(map(to_tuple, list1)) == sorted(map(to_tuple, list2))\n</code></pre>"},{"location":"api/utils/#src.worksheets.utils.generate_var_name","title":"generate_var_name","text":"<pre><code>generate_var_name(name)\n</code></pre> Source code in <code>src/worksheets/utils.py</code> <pre><code>def generate_var_name(name):\n    name = camel_to_snake(name)\n    name = name.lower()\n\n    return name\n</code></pre>"},{"location":"api/utils/#src.worksheets.utils.camel_to_snake","title":"camel_to_snake","text":"<pre><code>camel_to_snake(name)\n</code></pre> Source code in <code>src/worksheets/utils.py</code> <pre><code>def camel_to_snake(name):\n    name = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", name)\n    return re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", name).lower()\n</code></pre>"},{"location":"api/utils/#src.worksheets.utils.extract_code_block_from_output","title":"extract_code_block_from_output","text":"<pre><code>extract_code_block_from_output(output: str, lang='python')\n</code></pre> Source code in <code>src/worksheets/utils.py</code> <pre><code>def extract_code_block_from_output(output: str, lang=\"python\"):\n    code = output.split(\"```\")\n    if len(code) &gt; 1:\n        res = code[1]\n        if res.startswith(lang):\n            res = res[len(lang) :]\n        return res\n    else:\n        return output\n</code></pre>"},{"location":"api/utils/#src.worksheets.utils.num_tokens_from_string","title":"num_tokens_from_string","text":"<pre><code>num_tokens_from_string(string: str, model: str = 'gpt-3.5-turbo') -&gt; int\n</code></pre> <p>Returns the number of tokens in a text string.</p> Source code in <code>src/worksheets/utils.py</code> <pre><code>def num_tokens_from_string(string: str, model: str = \"gpt-3.5-turbo\") -&gt; int:\n    \"\"\"Returns the number of tokens in a text string.\"\"\"\n    encoding = tiktoken.encoding_for_model(model)\n    num_tokens = len(encoding.encode(string))\n    return num_tokens\n</code></pre>"},{"location":"api/utils/#interface-utils","title":"Interface Utils","text":""},{"location":"api/utils/#src.worksheets.interface_utils","title":"src.worksheets.interface_utils","text":""},{"location":"api/utils/#src.worksheets.interface_utils-classes","title":"Classes","text":""},{"location":"api/utils/#src.worksheets.interface_utils.bcolors","title":"bcolors","text":"Source code in <code>src/worksheets/interface_utils.py</code> <pre><code>class bcolors:\n    HEADER = \"\\033[95m\"\n    OKBLUE = \"\\033[94m\"\n    OKCYAN = \"\\033[96m\"\n    OKGREEN = \"\\033[92m\"\n    WARNING = \"\\033[93m\"\n    FAIL = \"\\033[91m\"\n    ENDC = \"\\033[0m\"\n    BOLD = \"\\033[1m\"\n    UNDERLINE = \"\\033[4m\"\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.bcolors-attributes","title":"Attributes","text":""},{"location":"api/utils/#src.worksheets.interface_utils.bcolors.HEADER","title":"HEADER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HEADER = '\\x1b[95m'\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.bcolors.OKBLUE","title":"OKBLUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OKBLUE = '\\x1b[94m'\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.bcolors.OKCYAN","title":"OKCYAN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OKCYAN = '\\x1b[96m'\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.bcolors.OKGREEN","title":"OKGREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OKGREEN = '\\x1b[92m'\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.bcolors.WARNING","title":"WARNING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WARNING = '\\x1b[93m'\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.bcolors.FAIL","title":"FAIL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FAIL = '\\x1b[91m'\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.bcolors.ENDC","title":"ENDC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ENDC = '\\x1b[0m'\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.bcolors.BOLD","title":"BOLD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BOLD = '\\x1b[1m'\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.bcolors.UNDERLINE","title":"UNDERLINE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UNDERLINE = '\\x1b[4m'\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils-functions","title":"Functions","text":""},{"location":"api/utils/#src.worksheets.interface_utils.convert_to_json","title":"convert_to_json","text":"<pre><code>convert_to_json(dialogue: list[CurrentDialogueTurn])\n</code></pre> <p>Convert the dialogue history to a JSON-compatible format.</p> <p>Parameters:</p> Name Type Description Default <code>dialogue</code> <code>list[CurrentDialogueTurn]</code> <p>The dialogue history.</p> required <p>Returns:</p> Type Description <p>list[dict]: The dialogue history in JSON format.</p> Source code in <code>src/worksheets/interface_utils.py</code> <pre><code>def convert_to_json(dialogue: list[CurrentDialogueTurn]):\n    \"\"\"Convert the dialogue history to a JSON-compatible format.\n\n    Args:\n        dialogue (list[CurrentDialogueTurn]): The dialogue history.\n\n    Returns:\n        list[dict]: The dialogue history in JSON format.\n    \"\"\"\n    json_dialogue = []\n    for turn in dialogue:\n        json_turn = {\n            \"user\": turn.user_utterance,\n            \"bot\": turn.system_response,\n            \"turn_context\": get_context_schema(turn.context),\n            \"global_context\": get_context_schema(turn.global_context),\n            \"system_action\": get_agent_action_schemas(turn.system_action),\n            \"user_target_sp\": turn.user_target_sp,\n            \"user_target\": turn.user_target,\n            \"user_target_suql\": turn.user_target_suql,\n        }\n        json_dialogue.append(json_turn)\n    return json_dialogue\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.input_user","title":"input_user","text":"<pre><code>input_user() -&gt; str\n</code></pre> <p>Prompt the user for input and return the input string.</p> Source code in <code>src/worksheets/interface_utils.py</code> <pre><code>def input_user() -&gt; str:\n    \"\"\"Prompt the user for input and return the input string.\"\"\"\n    try:\n        user_utterance = input(bcolors.OKCYAN + bcolors.BOLD + \"User: \")\n        # ignore empty inputs\n        while not user_utterance.strip():\n            user_utterance = input(bcolors.OKCYAN + bcolors.BOLD + \"User: \")\n    finally:\n        print(bcolors.ENDC)\n    return user_utterance\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.print_chatbot","title":"print_chatbot","text":"<pre><code>print_chatbot(s: str)\n</code></pre> <p>Print the chatbot's response in a formatted way.</p> Source code in <code>src/worksheets/interface_utils.py</code> <pre><code>def print_chatbot(s: str):\n    \"\"\"Print the chatbot's response in a formatted way.\"\"\"\n    print(bcolors.OKGREEN + bcolors.BOLD + \"Agent: \" + s + bcolors.ENDC)\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.print_user","title":"print_user","text":"<pre><code>print_user(s: str)\n</code></pre> <p>Print the user's utterance in a formatted way.</p> Source code in <code>src/worksheets/interface_utils.py</code> <pre><code>def print_user(s: str):\n    \"\"\"Print the user's utterance in a formatted way.\"\"\"\n    print(bcolors.OKCYAN + bcolors.BOLD + \"User: \" + s + bcolors.ENDC)\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.print_complete_history","title":"print_complete_history","text":"<pre><code>print_complete_history(dialogue_history)\n</code></pre> <p>Print the complete dialogue history.</p> Source code in <code>src/worksheets/interface_utils.py</code> <pre><code>def print_complete_history(dialogue_history):\n    \"\"\"Print the complete dialogue history.\"\"\"\n    for turn in dialogue_history:\n        print_user(turn.user_utterance)\n        print_chatbot(turn.system_response)\n</code></pre>"},{"location":"api/utils/#src.worksheets.interface_utils.conversation_loop","title":"conversation_loop  <code>async</code>","text":"<pre><code>conversation_loop(bot, output_state_path, quit_commands=None)\n</code></pre> <p>Run the conversation loop with the chatbot. Dumps the dialogue history to a JSON file upon exit.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <p>The chatbot instance.</p> required <code>output_state_path</code> <code>str</code> <p>The path to save the dialogue history.</p> required <code>quit_commands</code> <code>list[str]</code> <p>List of commands to quit the conversation. Defaults to None.</p> <code>None</code> Source code in <code>src/worksheets/interface_utils.py</code> <pre><code>async def conversation_loop(bot, output_state_path, quit_commands=None):\n    \"\"\"Run the conversation loop with the chatbot. Dumps the dialogue history to a JSON file upon exit.\n\n    Args:\n        bot: The chatbot instance.\n        output_state_path (str): The path to save the dialogue history.\n        quit_commands (list[str], optional): List of commands to quit the conversation. Defaults to None.\n    \"\"\"\n    if quit_commands is None:\n        quit_commands = [\"exit\", \"exit()\"]\n\n    try:\n        while True:\n            if len(bot.dlg_history) == 0:\n                print_chatbot(bot.starting_prompt)\n            user_utterance = None\n            if user_utterance is None:\n                user_utterance = input_user()\n            if user_utterance == quit_commands:\n                break\n\n            await generate_next_turn(user_utterance, bot)\n            print_complete_history(bot.dlg_history)\n    except Exception as e:\n        print(e)\n\n        import traceback\n\n        traceback.print_exc()\n    finally:\n        with open(output_state_path, \"w\") as f:\n            json.dump(convert_to_json(bot.dlg_history), f, indent=4)\n</code></pre>"},{"location":"api/utils/#gsheet-utils","title":"GSheet Utils","text":""},{"location":"api/utils/#src.worksheets.gsheet_utils","title":"src.worksheets.gsheet_utils","text":""},{"location":"api/utils/#src.worksheets.gsheet_utils-attributes","title":"Attributes","text":""},{"location":"api/utils/#src.worksheets.gsheet_utils.CURR_DIR","title":"CURR_DIR  <code>module-attribute</code>","text":"<pre><code>CURR_DIR = dirname(realpath(__file__))\n</code></pre>"},{"location":"api/utils/#src.worksheets.gsheet_utils.SCOPES","title":"SCOPES  <code>module-attribute</code>","text":"<pre><code>SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']\n</code></pre>"},{"location":"api/utils/#src.worksheets.gsheet_utils-functions","title":"Functions","text":""},{"location":"api/utils/#src.worksheets.gsheet_utils.retrieve_gsheet","title":"retrieve_gsheet","text":"<pre><code>retrieve_gsheet(id, range)\n</code></pre> <p>Retrieve values from a Google Sheet.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the Google Sheet.</p> required <code>range</code> <code>str</code> <p>The range of cells to retrieve.</p> required <p>Returns:</p> Name Type Description <code>List</code> <p>A list of values from the specified range in the Google Sheet.</p> Source code in <code>src/worksheets/gsheet_utils.py</code> <pre><code>def retrieve_gsheet(id, range):\n    \"\"\"Retrieve values from a Google Sheet.\n\n    Args:\n        id (str): The ID of the Google Sheet.\n        range (str): The range of cells to retrieve.\n\n    Returns:\n        List: A list of values from the specified range in the Google Sheet.\"\"\"\n    creds = using_service_account()\n\n    try:\n        service = build(\"sheets\", \"v4\", credentials=creds)\n\n        # Call the Sheets API\n        sheet = service.spreadsheets()\n        result = sheet.values().get(spreadsheetId=id, range=range).execute()\n        values: List = result.get(\"values\", [])\n\n        return values\n\n    except HttpError as err:\n        print(err)\n</code></pre>"},{"location":"api/utils/#src.worksheets.gsheet_utils.fill_all_empty","title":"fill_all_empty","text":"<pre><code>fill_all_empty(rows, desired_columns)\n</code></pre> Source code in <code>src/worksheets/gsheet_utils.py</code> <pre><code>def fill_all_empty(rows, desired_columns):\n    for row in rows:\n        for i in range(desired_columns - len(row)):\n            row.append(\"\")\n    return rows\n</code></pre>"},{"location":"api/utils/#src.worksheets.gsheet_utils.using_service_account","title":"using_service_account","text":"<pre><code>using_service_account()\n</code></pre> Source code in <code>src/worksheets/gsheet_utils.py</code> <pre><code>def using_service_account():\n    # Path to your service account key file\n    SERVICE_ACCOUNT_FILE = os.path.join(CURR_DIR, \"service_account.json\")\n\n    # Scopes required by the Sheets API\n    SCOPES = [\"https://www.googleapis.com/auth/spreadsheets\"]\n\n    # Create credentials using the service account key file\n    credentials = service_account.Credentials.from_service_account_file(\n        SERVICE_ACCOUNT_FILE, scopes=SCOPES\n    )\n\n    return credentials\n</code></pre>"},{"location":"api/utils/#chat","title":"Chat","text":""},{"location":"api/utils/#src.worksheets.chat","title":"src.worksheets.chat","text":""},{"location":"api/utils/#src.worksheets.chat-functions","title":"Functions","text":""},{"location":"api/utils/#src.worksheets.chat.generate_next_turn","title":"generate_next_turn  <code>async</code>","text":"<pre><code>generate_next_turn(user_utterance: str, bot)\n</code></pre> <p>Generate the next turn in the dialogue based on the user's utterance.</p> <p>Parameters:</p> Name Type Description Default <code>user_utterance</code> <code>str</code> <p>The user's input.</p> required <code>bot</code> <code>Agent</code> <p>The bot instance handling the dialogue.</p> required Source code in <code>src/worksheets/chat.py</code> <pre><code>async def generate_next_turn(user_utterance: str, bot):\n    \"\"\"Generate the next turn in the dialogue based on the user's utterance.\n\n    Args:\n        user_utterance (str): The user's input.\n        bot (Agent): The bot instance handling the dialogue.\n    \"\"\"\n    # instantiate a new dialogue turn\n    current_dlg_turn = CurrentDialogueTurn()\n    current_dlg_turn.user_utterance = user_utterance\n\n    # initialize contexts\n    current_dlg_turn.context = GenieContext()\n    current_dlg_turn.global_context = GenieContext()\n\n    # process the dialogue turn to GenieWorksheets\n    await semantic_parsing(current_dlg_turn, bot.dlg_history, bot)\n\n    # run the agent policy if user_target is not None\n    if current_dlg_turn.user_target is not None:\n        run_agent_policy(current_dlg_turn, bot)\n\n    # generate a response based on the agent policy\n    await generate_response(current_dlg_turn, bot.dlg_history, bot)\n    bot.dlg_history.append(current_dlg_turn)\n</code></pre>"}]}